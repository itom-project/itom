ArithmeticError(??) [doc: Base class for arithmetic errors.]
AssertionError(??) [doc: Assertion failed.]
AttributeError(??) [doc: Attribute not found.]
BaseException(??) [doc: Common base class for all exceptions]
BaseException.args
BaseException.with_traceback
BufferError(??) [doc: Buffer error.]
BytesWarning(??) [doc: Base class for warnings about bytes and buffer related problems, mostly]
DeprecationWarning(??) [doc: Base class for warnings about deprecated features.]
EOFError(??) [doc: Read beyond end of file.]
Ellipsis
EnvironmentError(??) [doc: Base class for I/O related errors.]
EnvironmentError.errno
EnvironmentError.filename
EnvironmentError.strerror
Exception(??) [doc: Common base class for all non-exit exceptions.]
False
FloatingPointError(??) [doc: Floating point operation failed.]
FutureWarning(??) [doc: Base class for warnings about constructs that will change semantically]
GeneratorExit(??) [doc: Request that a generator exit.]
IOError(??) [doc: I/O operation failed.]
ImportError(??) [doc: Import can't find module, or can't find name in module.]
ImportWarning(??) [doc: Base class for warnings about probable mistakes in module imports]
IndentationError(??) [doc: Improper indentation.]
IndexError(??) [doc: Sequence index out of range.]
KeyError(??) [doc: Mapping key not found.]
KeyboardInterrupt(??) [doc: Program interrupted by user.]
LookupError(??) [doc: Base class for lookup errors.]
MemoryError(??) [doc: Out of memory.]
NameError(??) [doc: Name not found globally.]
None
NotImplemented
NotImplementedError(??) [doc: Method or function hasn't been implemented yet.]
OSError(??) [doc: OS system call failed.]
OverflowError(??) [doc: Result too large to be represented.]
PendingDeprecationWarning(??) [doc: Base class for warnings about features which will be deprecated]
ReferenceError(??) [doc: Weak ref proxy used after referent went away.]
ResourceWarning(??) [doc: Base class for warnings about resource usage.]
RuntimeError(??) [doc: Unspecified run-time error.]
RuntimeWarning(??) [doc: Base class for warnings about dubious runtime behavior.]
StopIteration(??) [doc: Signal the end from iterator.__next__().]
SyntaxError(??) [doc: Invalid syntax.]
SyntaxError.filename
SyntaxError.lineno
SyntaxError.msg
SyntaxError.offset
SyntaxError.print_file_and_line
SyntaxError.text
SyntaxWarning(??) [doc: Base class for warnings about dubious syntax.]
SystemError(??) [doc: Internal error in the Python interpreter.]
SystemExit(??) [doc: Request to exit from the interpreter.]
SystemExit.code
TabError(??) [doc: Improper mixture of spaces and tabs.]
True
TypeError(??) [doc: Inappropriate argument type.]
UnboundLocalError(??) [doc: Local name referenced but not bound to a value.]
UnicodeDecodeError(??) [doc: Unicode decoding error.]
UnicodeDecodeError.encoding
UnicodeDecodeError.end
UnicodeDecodeError.object
UnicodeDecodeError.reason
UnicodeDecodeError.start
UnicodeEncodeError(??) [doc: Unicode encoding error.]
UnicodeEncodeError.encoding
UnicodeEncodeError.end
UnicodeEncodeError.object
UnicodeEncodeError.reason
UnicodeEncodeError.start
UnicodeError(??) [doc: Unicode related error.]
UnicodeTranslateError(??) [doc: Unicode translation error.]
UnicodeTranslateError.encoding
UnicodeTranslateError.end
UnicodeTranslateError.object
UnicodeTranslateError.reason
UnicodeTranslateError.start
UnicodeWarning(??) [doc: Base class for warnings about Unicode related problems, mostly]
UserWarning(??) [doc: Base class for warnings generated by user code.]
ValueError(??) [doc: Inappropriate argument value (of correct type).]
Warning(??) [doc: Base class for warning categories.]
WindowsError(??) [doc: MS-Windows OS system call failed.]
WindowsError.errno
WindowsError.filename
WindowsError.strerror
WindowsError.winerror
ZeroDivisionError(??) [doc: Second argument to a division or modulo operation was zero.]
_
abs(number) -> number
all(iterable) -> bool
and
any(iterable) -> bool
array.ArrayType(??) [doc: array(typecode [, initializer]) -> array]
array._array_reconstructor
array.array(typecode [, initializer]) -> array
array.typecodes
as
ascii(object) -> string
assert
atexit._clear() -> None
atexit._run_exitfuncs() -> None
atexit.register(func, *args, **kwargs) -> func
atexit.unregister(func) -> None
audioop.add
audioop.adpcm2lin
audioop.alaw2lin
audioop.avg
audioop.avgpp
audioop.bias
audioop.cross
audioop.error(??) [class]
audioop.findfactor
audioop.findfit
audioop.findmax
audioop.getsample
audioop.lin2adpcm
audioop.lin2alaw
audioop.lin2lin
audioop.lin2ulaw
audioop.max
audioop.maxpp
audioop.minmax
audioop.mul
audioop.ratecv
audioop.reverse
audioop.rms
audioop.tomono
audioop.tostereo
audioop.ulaw2lin
bin(number) -> string
binascii.Error(??) [class]
binascii.Incomplete(??) [class]
binascii.a2b_base64
binascii.a2b_hex(hexstr) -> s; Binary data of hexadecimal representation.
binascii.a2b_hqx
binascii.a2b_qp
binascii.a2b_uu
binascii.b2a_base64
binascii.b2a_hex(data) -> s; Hexadecimal representation of binary data.
binascii.b2a_hqx
binascii.b2a_qp(data, quotetabs=0, istext=1, header=0) -> s;
binascii.b2a_uu
binascii.crc32
binascii.crc_hqx
binascii.hexlify
binascii.rlecode_hqx
binascii.rledecode_hqx
binascii.unhexlify
bool(x) -> bool
break
builtins.ArithmeticError(??) [doc: Base class for arithmetic errors.]
builtins.AssertionError(??) [doc: Assertion failed.]
builtins.AttributeError(??) [doc: Attribute not found.]
builtins.BaseException(??) [doc: Common base class for all exceptions]
builtins.BufferError(??) [doc: Buffer error.]
builtins.BytesWarning(??) [doc: Base class for warnings about bytes and buffer related problems, mostly]
builtins.DeprecationWarning(??) [doc: Base class for warnings about deprecated features.]
builtins.EOFError(??) [doc: Read beyond end of file.]
builtins.Ellipsis
builtins.EnvironmentError(??) [doc: Base class for I/O related errors.]
builtins.Exception(??) [doc: Common base class for all non-exit exceptions.]
builtins.FloatingPointError(??) [doc: Floating point operation failed.]
builtins.FutureWarning(??) [doc: Base class for warnings about constructs that will change semantically]
builtins.GeneratorExit(??) [doc: Request that a generator exit.]
builtins.IOError(??) [doc: I/O operation failed.]
builtins.ImportError(??) [doc: Import can't find module, or can't find name in module.]
builtins.ImportWarning(??) [doc: Base class for warnings about probable mistakes in module imports]
builtins.IndentationError(??) [doc: Improper indentation.]
builtins.IndexError(??) [doc: Sequence index out of range.]
builtins.KeyError(??) [doc: Mapping key not found.]
builtins.KeyboardInterrupt(??) [doc: Program interrupted by user.]
builtins.LookupError(??) [doc: Base class for lookup errors.]
builtins.MemoryError(??) [doc: Out of memory.]
builtins.NameError(??) [doc: Name not found globally.]
builtins.NotImplemented
builtins.NotImplementedError(??) [doc: Method or function hasn't been implemented yet.]
builtins.OSError(??) [doc: OS system call failed.]
builtins.OverflowError(??) [doc: Result too large to be represented.]
builtins.PendingDeprecationWarning(??) [doc: Base class for warnings about features which will be deprecated]
builtins.ReferenceError(??) [doc: Weak ref proxy used after referent went away.]
builtins.ResourceWarning(??) [doc: Base class for warnings about resource usage.]
builtins.RuntimeError(??) [doc: Unspecified run-time error.]
builtins.RuntimeWarning(??) [doc: Base class for warnings about dubious runtime behavior.]
builtins.StopIteration(??) [doc: Signal the end from iterator.__next__().]
builtins.SyntaxError(??) [doc: Invalid syntax.]
builtins.SyntaxWarning(??) [doc: Base class for warnings about dubious syntax.]
builtins.SystemError(??) [doc: Internal error in the Python interpreter.]
builtins.SystemExit(??) [doc: Request to exit from the interpreter.]
builtins.TabError(??) [doc: Improper mixture of spaces and tabs.]
builtins.TypeError(??) [doc: Inappropriate argument type.]
builtins.UnboundLocalError(??) [doc: Local name referenced but not bound to a value.]
builtins.UnicodeDecodeError(??) [doc: Unicode decoding error.]
builtins.UnicodeEncodeError(??) [doc: Unicode encoding error.]
builtins.UnicodeError(??) [doc: Unicode related error.]
builtins.UnicodeTranslateError(??) [doc: Unicode translation error.]
builtins.UnicodeWarning(??) [doc: Base class for warnings about Unicode related problems, mostly]
builtins.UserWarning(??) [doc: Base class for warnings generated by user code.]
builtins.ValueError(??) [doc: Inappropriate argument value (of correct type).]
builtins.Warning(??) [doc: Base class for warning categories.]
builtins.WindowsError(??) [doc: MS-Windows OS system call failed.]
builtins.ZeroDivisionError(??) [doc: Second argument to a division or modulo operation was zero.]
builtins._
builtins.abs(number) -> number
builtins.all(iterable) -> bool
builtins.any(iterable) -> bool
builtins.ascii(object) -> string
builtins.bin(number) -> string
builtins.bool(x) -> bool
builtins.bytearray(iterable_of_ints) -> bytearray
builtins.bytes(iterable_of_ints) -> bytes
builtins.callable(object) -> bool
builtins.chr(i) -> Unicode character
builtins.classmethod(function) -> method
builtins.compile(source, filename, mode[, flags[, dont_inherit]]) -> code object
builtins.complex(real[, imag]) -> complex number
builtins.copyright
builtins.credits
builtins.delattr(object, name)
builtins.dict() -> new empty dictionary
builtins.dir([object]) -> list of strings
builtins.divmod(x, y) -> (div, mod)
builtins.enumerate(iterable[, start]) -> iterator for index, value of iterable
builtins.eval(source[, globals[, locals]]) -> value
builtins.exec(object[, globals[, locals]])
builtins.exit
builtins.filter(function or None, iterable) --> filter object
builtins.float(x) -> floating point number
builtins.format(value[, format_spec]) -> string
builtins.frozenset() -> empty frozenset object
builtins.getattr(object, name[, default]) -> value
builtins.globals() -> dictionary
builtins.hasattr(object, name) -> bool
builtins.hash(object) -> integer
builtins.help
builtins.hex(number) -> string
builtins.id(object) -> integer
builtins.input([prompt]) -> string
builtins.int(x[, base]) -> integer
builtins.isinstance(object, class-or-type-or-tuple) -> bool
builtins.issubclass(C, B) -> bool
builtins.iter(iterable) -> iterator
builtins.len(object) -> integer
builtins.license
builtins.list() -> new empty list
builtins.locals() -> dictionary
builtins.map(func, *iterables) --> map object
builtins.max(iterable[, key=func]) -> value
builtins.memoryview(object)
builtins.min(iterable[, key=func]) -> value
builtins.next(iterator[, default])
builtins.object(??) [doc: The most base type]
builtins.oct(number) -> string
builtins.open
builtins.ord(c) -> integer
builtins.pow(x, y[, z]) -> number
builtins.print(value, ..., sep=' ', end='\n', file=sys.stdout)
builtins.property(fget=None, fset=None, fdel=None, doc=None) -> property attribute
builtins.quit
builtins.range([start,] stop[, step]) -> range object
builtins.repr(object) -> string
builtins.reversed(sequence) -> reverse iterator over values of the sequence
builtins.round(number[, ndigits]) -> number
builtins.set() -> new empty set object
builtins.setattr(object, name, value)
builtins.slice([start,] stop[, step])
builtins.sorted(iterable, key=None, reverse=False) --> new sorted list
builtins.staticmethod(function) -> method
builtins.str(string[, encoding[, errors]]) -> str
builtins.sum(iterable[, start]) -> value
builtins.super() -> same as super(__class__, <first argument>)
builtins.tuple() -> empty tuple
builtins.type(object) -> the object's type
builtins.vars([object]) -> dictionary
builtins.zip(iter1 [,iter2 [...]]) --> zip object
bytearray(iterable_of_ints) -> bytearray
bytearray.append
bytearray.capitalize
bytearray.center
bytearray.count
bytearray.decode
bytearray.endswith
bytearray.expandtabs
bytearray.extend
bytearray.find
bytearray.fromhex
bytearray.index
bytearray.insert
bytearray.isalnum
bytearray.isalpha
bytearray.isdigit
bytearray.islower
bytearray.isspace
bytearray.istitle
bytearray.isupper
bytearray.join
bytearray.ljust
bytearray.lower
bytearray.lstrip
bytearray.maketrans
bytearray.partition
bytearray.pop
bytearray.remove
bytearray.replace
bytearray.reverse
bytearray.rfind
bytearray.rindex
bytearray.rjust
bytearray.rpartition
bytearray.rsplit
bytearray.rstrip
bytearray.split
bytearray.splitlines
bytearray.startswith
bytearray.strip
bytearray.swapcase
bytearray.title
bytearray.translate
bytearray.upper
bytearray.zfill
bytes(iterable_of_ints) -> bytes
bytes.capitalize
bytes.center
bytes.count
bytes.decode
bytes.endswith
bytes.expandtabs
bytes.find
bytes.fromhex
bytes.index
bytes.isalnum
bytes.isalpha
bytes.isdigit
bytes.islower
bytes.isspace
bytes.istitle
bytes.isupper
bytes.join
bytes.ljust
bytes.lower
bytes.lstrip
bytes.maketrans
bytes.partition
bytes.replace
bytes.rfind
bytes.rindex
bytes.rjust
bytes.rpartition
bytes.rsplit
bytes.rstrip
bytes.split
bytes.splitlines
bytes.startswith
bytes.strip
bytes.swapcase
bytes.title
bytes.translate
bytes.upper
bytes.zfill
callable(object) -> bool
chr(i) -> Unicode character
class
classmethod(function) -> method
cmath.acos(x)
cmath.acosh(x)
cmath.asin(x)
cmath.asinh(x)
cmath.atan(x)
cmath.atanh(x)
cmath.cos(x)
cmath.cosh(x)
cmath.e
cmath.exp(x)
cmath.isfinite(z) -> bool
cmath.isinf(z) -> bool
cmath.isnan(z) -> bool
cmath.log(x[, base]) -> the logarithm of x to the given base.
cmath.log10(x)
cmath.phase(z) -> float
cmath.pi
cmath.polar(z) -> r: float, phi: float
cmath.rect(r, phi) -> z: complex
cmath.sin(x)
cmath.sinh(x)
cmath.sqrt(x)
cmath.tan(x)
cmath.tanh(x)
compile(source, filename, mode[, flags[, dont_inherit]]) -> code object
complex(real[, imag]) -> complex number
complex.conjugate
complex.imag
complex.real
continue
copyright
credits
def
del
delattr(object, name)
dict() -> new empty dictionary
dict.clear
dict.copy
dict.fromkeys
dict.get
dict.items
dict.keys
dict.pop
dict.popitem
dict.setdefault
dict.update
dict.values
dir([object]) -> list of strings
divmod(x, y) -> (div, mod)
elif
else
enumerate(iterable[, start]) -> iterator for index, value of iterable
errno.E2BIG
errno.EACCES
errno.EADDRINUSE
errno.EADDRNOTAVAIL
errno.EAFNOSUPPORT
errno.EAGAIN
errno.EALREADY
errno.EBADF
errno.EBUSY
errno.ECHILD
errno.ECONNABORTED
errno.ECONNREFUSED
errno.ECONNRESET
errno.EDEADLK
errno.EDEADLOCK
errno.EDESTADDRREQ
errno.EDOM
errno.EDQUOT
errno.EEXIST
errno.EFAULT
errno.EFBIG
errno.EHOSTDOWN
errno.EHOSTUNREACH
errno.EILSEQ
errno.EINPROGRESS
errno.EINTR
errno.EINVAL
errno.EIO
errno.EISCONN
errno.EISDIR
errno.ELOOP
errno.EMFILE
errno.EMLINK
errno.EMSGSIZE
errno.ENAMETOOLONG
errno.ENETDOWN
errno.ENETRESET
errno.ENETUNREACH
errno.ENFILE
errno.ENOBUFS
errno.ENODEV
errno.ENOENT
errno.ENOEXEC
errno.ENOLCK
errno.ENOMEM
errno.ENOPROTOOPT
errno.ENOSPC
errno.ENOSYS
errno.ENOTCONN
errno.ENOTDIR
errno.ENOTEMPTY
errno.ENOTSOCK
errno.ENOTTY
errno.ENXIO
errno.EOPNOTSUPP
errno.EPERM
errno.EPFNOSUPPORT
errno.EPIPE
errno.EPROTONOSUPPORT
errno.EPROTOTYPE
errno.ERANGE
errno.EREMOTE
errno.EROFS
errno.ESHUTDOWN
errno.ESOCKTNOSUPPORT
errno.ESPIPE
errno.ESRCH
errno.ESTALE
errno.ETIMEDOUT
errno.ETOOMANYREFS
errno.EUSERS
errno.EWOULDBLOCK
errno.EXDEV
errno.WSABASEERR
errno.WSAEACCES
errno.WSAEADDRINUSE
errno.WSAEADDRNOTAVAIL
errno.WSAEAFNOSUPPORT
errno.WSAEALREADY
errno.WSAEBADF
errno.WSAECONNABORTED
errno.WSAECONNREFUSED
errno.WSAECONNRESET
errno.WSAEDESTADDRREQ
errno.WSAEDISCON
errno.WSAEDQUOT
errno.WSAEFAULT
errno.WSAEHOSTDOWN
errno.WSAEHOSTUNREACH
errno.WSAEINPROGRESS
errno.WSAEINTR
errno.WSAEINVAL
errno.WSAEISCONN
errno.WSAELOOP
errno.WSAEMFILE
errno.WSAEMSGSIZE
errno.WSAENAMETOOLONG
errno.WSAENETDOWN
errno.WSAENETRESET
errno.WSAENETUNREACH
errno.WSAENOBUFS
errno.WSAENOPROTOOPT
errno.WSAENOTCONN
errno.WSAENOTEMPTY
errno.WSAENOTSOCK
errno.WSAEOPNOTSUPP
errno.WSAEPFNOSUPPORT
errno.WSAEPROCLIM
errno.WSAEPROTONOSUPPORT
errno.WSAEPROTOTYPE
errno.WSAEREMOTE
errno.WSAESHUTDOWN
errno.WSAESOCKTNOSUPPORT
errno.WSAESTALE
errno.WSAETIMEDOUT
errno.WSAETOOMANYREFS
errno.WSAEUSERS
errno.WSAEWOULDBLOCK
errno.WSANOTINITIALISED
errno.WSASYSNOTREADY
errno.WSAVERNOTSUPPORTED
errno.errorcode
eval(source[, globals[, locals]]) -> value
except
exec(object[, globals[, locals]])
exit
filter(function or None, iterable) --> filter object
finally
float(x) -> floating point number
float.as_integer_ratio
float.conjugate
float.fromhex
float.hex
float.imag
float.is_integer
float.real
for
format(value[, format_spec]) -> string
from
frozenset() -> empty frozenset object
frozenset.copy
frozenset.difference
frozenset.intersection
frozenset.isdisjoint
frozenset.issubset
frozenset.issuperset
frozenset.symmetric_difference
frozenset.union
gc.DEBUG_COLLECTABLE
gc.DEBUG_LEAK
gc.DEBUG_SAVEALL
gc.DEBUG_STATS
gc.DEBUG_UNCOLLECTABLE
gc.collect([generation]) -> n
gc.disable() -> None
gc.enable() -> None
gc.garbage
gc.get_count() -> (count0, count1, count2)
gc.get_debug() -> flags
gc.get_objects() -> [...]
gc.get_referents(*objs) -> list
gc.get_referrers(*objs) -> list
gc.get_threshold() -> (threshold0, threshold1, threshold2)
gc.is_tracked(obj) -> bool
gc.isenabled() -> status
gc.set_debug(flags) -> None
gc.set_threshold(threshold0, [threshold1, threshold2]) -> None
getattr(object, name[, default]) -> value
global
globals() -> dictionary
hasattr(object, name) -> bool
hash(object) -> integer
help
hex(number) -> string
id(object) -> integer
if
imp.C_BUILTIN
imp.C_EXTENSION
imp.IMP_HOOK
imp.NullImporter(??) [doc: Null importer object]
imp.PKG_DIRECTORY
imp.PY_CODERESOURCE
imp.PY_COMPILED
imp.PY_FROZEN
imp.PY_RESOURCE
imp.PY_SOURCE
imp.SEARCH_ERROR
imp.acquire_lock() -> None
imp.cache_from_source
imp.find_module(name, [path]) -> (file, filename, (suffix, mode, type))
imp.get_frozen_object
imp.get_magic() -> string
imp.get_suffixes() -> [(suffix, mode, type), ...]
imp.get_tag() -> string
imp.init_builtin
imp.init_frozen
imp.is_builtin
imp.is_frozen
imp.is_frozen_package
imp.load_compiled
imp.load_dynamic
imp.load_module(name, file, filename, (suffix, mode, type)) -> module
imp.load_package
imp.load_source
imp.lock_held() -> boolean
imp.new_module(name) -> module
imp.release_lock() -> None
imp.reload(module) -> module
imp.source_from_cache
import
in
input([prompt]) -> string
int(x[, base]) -> integer
int.bit_length
int.conjugate
int.denominator
int.from_bytes
int.imag
int.numerator
int.real
int.to_bytes
is
isinstance(object, class-or-type-or-tuple) -> bool
issubclass(C, B) -> bool
iter(iterable) -> iterator
itertools.accumulate(iterable) --> accumulate object
itertools.chain(*iterables) --> chain object
itertools.combinations(iterable, r) --> combinations object
itertools.combinations_with_replacement(iterable, r) --> combinations_with_replacement object
itertools.compress(data, selectors) --> iterator over selected data
itertools.count(start=0, step=1) --> count object
itertools.cycle(iterable) --> cycle object
itertools.dropwhile(predicate, iterable) --> dropwhile object
itertools.filterfalse(function or None, sequence) --> filterfalse object
itertools.groupby(iterable[, keyfunc]) -> create an iterator which returns
itertools.islice(iterable, [start,] stop [, step]) --> islice object
itertools.permutations(iterable[, r]) --> permutations object
itertools.product(*iterables) --> product object
itertools.repeat(object [,times]) -> create an iterator which returns the object
itertools.starmap(function, sequence) --> starmap object
itertools.takewhile(predicate, iterable) --> takewhile object
itertools.tee(iterable, n=2) --> tuple of n independent iterators.
itertools.zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> zip_longest object
lambda
len(object) -> integer
license
list() -> new empty list
list.append
list.count
list.extend
list.index
list.insert
list.pop
list.remove
list.reverse
list.sort
locals() -> dictionary
map(func, *iterables) --> map object
marshal.dump(value, file[, version])
marshal.dumps(value[, version])
marshal.load(file)
marshal.loads(string)
marshal.version
math.acos(x)
math.acosh(x)
math.asin(x)
math.asinh(x)
math.atan(x)
math.atan2(y, x)
math.atanh(x)
math.ceil(x)
math.copysign(x, y)
math.cos(x)
math.cosh(x)
math.degrees(x)
math.e
math.erf(x)
math.erfc(x)
math.exp(x)
math.expm1(x)
math.fabs(x)
math.factorial(x) -> Integral
math.floor(x)
math.fmod(x, y)
math.frexp(x)
math.fsum(iterable)
math.gamma(x)
math.hypot(x, y)
math.isfinite(x) -> bool
math.isinf(x) -> bool
math.isnan(x) -> bool
math.ldexp(x, i)
math.lgamma(x)
math.log(x[, base])
math.log10(x)
math.log1p(x)
math.modf(x)
math.pi
math.pow(x, y)
math.radians(x)
math.sin(x)
math.sinh(x)
math.sqrt(x)
math.tan(x)
math.tanh(x)
math.trunc(x:Real) -> Integral
max(iterable[, key=func]) -> value
memoryview(object)
memoryview.format
memoryview.itemsize
memoryview.ndim
memoryview.readonly
memoryview.release
memoryview.shape
memoryview.strides
memoryview.suboffsets
memoryview.tobytes
memoryview.tolist
min(iterable[, key=func]) -> value
mmap.ACCESS_COPY
mmap.ACCESS_READ
mmap.ACCESS_WRITE
mmap.ALLOCATIONGRANULARITY
mmap.PAGESIZE
mmap.error(??) [class]
mmap.mmap(??) [doc: Windows: mmap(fileno, length[, tagname[, access[, offset]]])]
msvcrt.CRT_ASSEMBLY_VERSION
msvcrt.LIBRARIES_ASSEMBLY_NAME_PREFIX
msvcrt.LK_LOCK
msvcrt.LK_NBLCK
msvcrt.LK_NBRLCK
msvcrt.LK_RLCK
msvcrt.LK_UNLCK
msvcrt.SEM_FAILCRITICALERRORS
msvcrt.SEM_NOALIGNMENTFAULTEXCEPT
msvcrt.SEM_NOGPFAULTERRORBOX
msvcrt.SEM_NOOPENFILEERRORBOX
msvcrt.SetErrorMode
msvcrt.VC_ASSEMBLY_PUBLICKEYTOKEN
msvcrt.get_osfhandle(fd) -> file handle
msvcrt.getch() -> key character
msvcrt.getche() -> key character
msvcrt.getwch() -> Unicode key character
msvcrt.getwche() -> Unicode key character
msvcrt.heapmin() -> None
msvcrt.kbhit() -> bool
msvcrt.locking(fd, mode, nbytes) -> None
msvcrt.open_osfhandle(handle, flags) -> file descriptor
msvcrt.putch(char) -> None
msvcrt.putwch(unicode_char) -> None
msvcrt.setmode(fd, mode) -> Previous mode
msvcrt.ungetch(char) -> None
msvcrt.ungetwch(unicode_char) -> None
next(iterator[, default])
nonlocal
not
nt.F_OK
nt.O_APPEND
nt.O_BINARY
nt.O_CREAT
nt.O_EXCL
nt.O_NOINHERIT
nt.O_RANDOM
nt.O_RDONLY
nt.O_RDWR
nt.O_SEQUENTIAL
nt.O_SHORT_LIVED
nt.O_TEMPORARY
nt.O_TEXT
nt.O_TRUNC
nt.O_WRONLY
nt.P_DETACH
nt.P_NOWAIT
nt.P_NOWAITO
nt.P_OVERLAY
nt.P_WAIT
nt.R_OK
nt.TMP_MAX
nt.W_OK
nt.X_OK
nt._exit(status)
nt._getfileinformation
nt._getfinalpathname
nt._getfullpathname
nt._isdir
nt.abort() -> does not return!
nt.access(path, mode) -> True if granted, False otherwise
nt.chdir(path)
nt.chmod(path, mode)
nt.close(fd)
nt.closerange(fd_low, fd_high)
nt.device_encoding(fd) -> str
nt.dup(fd) -> fd2
nt.dup2(old_fd, new_fd)
nt.environ
nt.error(??) [doc: OS system call failed.]
nt.execv(path, args)
nt.execve(path, args, env)
nt.fstat(fd) -> stat result
nt.fsync(fildes)
nt.getcwd() -> path
nt.getcwdb() -> path
nt.getlogin() -> string
nt.getpid() -> pid
nt.getppid() -> ppid
nt.isatty(fd) -> bool
nt.kill(pid, sig)
nt.link(src, dst)
nt.listdir([path]) -> list_of_strings
nt.lseek(fd, pos, how) -> newpos
nt.lstat(path) -> stat result
nt.mkdir(path [, mode=0777])
nt.open(filename, flag [, mode=0777]) -> fd
nt.pipe() -> (read_end, write_end)
nt.putenv(key, value)
nt.read(fd, buffersize) -> string
nt.readlink(path) -> path
nt.remove(path)
nt.rename(old, new)
nt.rmdir(path)
nt.spawnv(mode, path, args)
nt.spawnve(mode, path, args, env)
nt.startfile(filepath [, operation]) - Start a file with its associated
nt.stat(path) -> stat result
nt.stat_float_times([newval]) -> oldval
nt.stat_result(??) [doc: stat_result: Result from stat or lstat.]
nt.statvfs_result(??) [doc: statvfs_result: Result from statvfs or fstatvfs.]
nt.strerror(code) -> string
nt.symlink(src, dst, target_is_directory=False)
nt.system(command) -> exit_status
nt.times() -> (utime, stime, cutime, cstime, elapsed_time)
nt.umask(new_mask) -> old_mask
nt.unlink(path)
nt.urandom(n) -> str
nt.utime(path, (atime, mtime))
nt.waitpid(pid, options) -> (pid, status << 8)
nt.write(fd, string) -> byteswritten
object(??) [doc: The most base type]
oct(number) -> string
open
operator.abs(a) -- Same as abs(a).
operator.add(a, b) -- Same as a + b.
operator.and_(a, b) -- Same as a & b.
operator.attrgetter(attr, ...) --> attrgetter object
operator.concat(a, b) -- Same as a + b, for a and b sequences.
operator.contains(a, b) -- Same as b in a (note reversed operands).
operator.countOf(a, b) -- Return the number of times b occurs in a.
operator.delitem(a, b) -- Same as del a[b].
operator.eq(a, b) -- Same as a==b.
operator.floordiv(a, b) -- Same as a // b.
operator.ge(a, b) -- Same as a>=b.
operator.getitem(a, b) -- Same as a[b].
operator.gt(a, b) -- Same as a>b.
operator.iadd
operator.iand
operator.iconcat
operator.ifloordiv
operator.ilshift
operator.imod
operator.imul
operator.index(a) -- Same as a.__index__()
operator.indexOf(a, b) -- Return the first index of b in a.
operator.inv(a) -- Same as ~a.
operator.invert(a) -- Same as ~a.
operator.ior
operator.ipow
operator.irshift
operator.is_(a, b) -- Same as a is b.
operator.is_not(a, b) -- Same as a is not b.
operator.isub
operator.itemgetter(item, ...) --> itemgetter object
operator.itruediv
operator.ixor
operator.le(a, b) -- Same as a<=b.
operator.lshift(a, b) -- Same as a << b.
operator.lt(a, b) -- Same as a<b.
operator.methodcaller(name, ...) --> methodcaller object
operator.mod(a, b) -- Same as a % b.
operator.mul(a, b) -- Same as a * b.
operator.ne(a, b) -- Same as a!=b.
operator.neg(a) -- Same as -a.
operator.not_(a) -- Same as not a.
operator.or_(a, b) -- Same as a | b.
operator.pos(a) -- Same as +a.
operator.pow(a, b) -- Same as a ** b.
operator.rshift(a, b) -- Same as a >> b.
operator.setitem(a, b, c) -- Same as a[b] = c.
operator.sub(a, b) -- Same as a - b.
operator.truediv(a, b) -- Same as a / b.
operator.truth(a) -- Return True if a is true, False otherwise.
operator.xor(a, b) -- Same as a ^ b.
or
ord(c) -> integer
parser.ParserError(??) [class]
parser.STType(??) [doc: Intermediate representation of a Python parse tree.]
parser._pickler
parser.compilest
parser.expr
parser.isexpr
parser.issuite
parser.sequence2st
parser.st2list
parser.st2tuple
parser.suite
parser.tuple2st
pass
pow(x, y[, z]) -> number
property(fget=None, fset=None, fdel=None, doc=None) -> property attribute
property.deleter
property.fdel
property.fget
property.fset
property.getter
property.setter
quit
raise
range([start,] stop[, step]) -> range object
range.count
range.index
repr(object) -> string
return
reversed(sequence) -> reverse iterator over values of the sequence
round(number[, ndigits]) -> number
set() -> new empty set object
set.add
set.clear
set.copy
set.difference
set.difference_update
set.discard
set.intersection
set.intersection_update
set.isdisjoint
set.issubset
set.issuperset
set.pop
set.remove
set.symmetric_difference
set.symmetric_difference_update
set.union
set.update
setattr(object, name, value)
signal.CTRL_BREAK_EVENT
signal.CTRL_C_EVENT
signal.NSIG
signal.SIGABRT
signal.SIGBREAK
signal.SIGFPE
signal.SIGILL
signal.SIGINT
signal.SIGSEGV
signal.SIGTERM
signal.SIG_DFL
signal.SIG_IGN
signal.default_int_handler(...)
signal.getsignal(sig) -> action
signal.set_wakeup_fd(fd) -> fd
signal.signal(sig, action) -> action
slice([start,] stop[, step])
slice.indices
slice.start
slice.step
slice.stop
sorted(iterable, key=None, reverse=False) --> new sorted list
staticmethod(function) -> method
str(string[, encoding[, errors]]) -> str
str.capitalize
str.center
str.count
str.encode
str.endswith
str.expandtabs
str.find
str.format
str.format_map
str.index
str.isalnum
str.isalpha
str.isdecimal
str.isdigit
str.isidentifier
str.islower
str.isnumeric
str.isprintable
str.isspace
str.istitle
str.isupper
str.join
str.ljust
str.lower
str.lstrip
str.maketrans
str.partition
str.replace
str.rfind
str.rindex
str.rjust
str.rpartition
str.rsplit
str.rstrip
str.split
str.splitlines
str.startswith
str.strip
str.swapcase
str.title
str.translate
str.upper
str.zfill
sum(iterable[, start]) -> value
super() -> same as super(__class__, <first argument>)
sys._clear_type_cache() -> None
sys._current_frames() -> dictionary
sys._getframe([depth]) -> frameobject
sys._mercurial
sys._xoptions
sys.api_version
sys.argv
sys.builtin_module_names
sys.byteorder
sys.call_tracing(func, args) -> object
sys.callstats() -> tuple of integers
sys.copyright
sys.displayhook(object) -> None
sys.dllhandle
sys.dont_write_bytecode
sys.exc_info() -> (type, value, traceback)
sys.excepthook(exctype, value, traceback) -> None
sys.exec_prefix
sys.executable
sys.exit([status])
sys.flags
sys.float_info
sys.float_repr_style
sys.getcheckinterval() -> current check interval; see setcheckinterval().
sys.getdefaultencoding() -> string
sys.getfilesystemencoding() -> string
sys.getprofile()
sys.getrecursionlimit()
sys.getrefcount(object) -> integer
sys.getsizeof(object, default) -> int
sys.getswitchinterval() -> current thread switch interval; see setswitchinterval().
sys.gettrace()
sys.getwindowsversion()
sys.hash_info
sys.hexversion
sys.int_info
sys.intern(string) -> string
sys.last_traceback
sys.last_type(??) [doc: Name not found globally.]
sys.last_value
sys.maxsize
sys.maxunicode
sys.meta_path
sys.modules
sys.path
sys.path_hooks
sys.path_importer_cache
sys.platform
sys.prefix
sys.setcheckinterval(n)
sys.setprofile(function)
sys.setrecursionlimit(n)
sys.setswitchinterval(n)
sys.settrace(function)
sys.stderr
sys.stdin
sys.stdout
sys.subversion
sys.tracebacklimit
sys.version
sys.version_info
sys.warnoptions
sys.winver
time.accept2dyear
time.altzone
time.asctime([tuple]) -> string
time.clock() -> floating point number
time.ctime(seconds) -> string
time.daylight
time.gmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min,
time.localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,
time.mktime(tuple) -> floating point number
time.sleep(seconds)
time.strftime(format[, tuple]) -> string
time.strptime(string, format) -> struct_time
time.struct_time(??) [doc: The time value as returned by gmtime(), localtime(), and strptime(), and]
time.time() -> floating point number
time.timezone
time.tzname
try
tuple() -> empty tuple
tuple.count
tuple.index
type(object) -> the object's type
type.mro() -> list
vars([object]) -> dictionary
while
winreg.CloseKey(hkey) - Closes a previously opened registry key.
winreg.ConnectRegistry
winreg.CreateKey
winreg.CreateKeyEx
winreg.DeleteKey(key, sub_key) - Deletes the specified key.
winreg.DeleteKeyEx(key, sub_key, sam, res) - Deletes the specified key.
winreg.DeleteValue(key, value) - Removes a named value from a registry key.
winreg.DisableReflectionKey
winreg.EnableReflectionKey
winreg.EnumKey
winreg.EnumValue
winreg.ExpandEnvironmentStrings
winreg.FlushKey(key) - Writes all the attributes of a key to the registry.
winreg.HKEYType(??) [doc: PyHKEY Object - A Python object, representing a win32 registry key.]
winreg.HKEY_CLASSES_ROOT
winreg.HKEY_CURRENT_CONFIG
winreg.HKEY_CURRENT_USER
winreg.HKEY_DYN_DATA
winreg.HKEY_LOCAL_MACHINE
winreg.HKEY_PERFORMANCE_DATA
winreg.HKEY_USERS
winreg.KEY_ALL_ACCESS
winreg.KEY_CREATE_LINK
winreg.KEY_CREATE_SUB_KEY
winreg.KEY_ENUMERATE_SUB_KEYS
winreg.KEY_EXECUTE
winreg.KEY_NOTIFY
winreg.KEY_QUERY_VALUE
winreg.KEY_READ
winreg.KEY_SET_VALUE
winreg.KEY_WOW64_32KEY
winreg.KEY_WOW64_64KEY
winreg.KEY_WRITE
winreg.LoadKey(key, sub_key, file_name) - Creates a subkey under the specified key
winreg.OpenKey
winreg.OpenKeyEx
winreg.QueryInfoKey
winreg.QueryReflectionKey
winreg.QueryValue
winreg.QueryValueEx
winreg.REG_BINARY
winreg.REG_CREATED_NEW_KEY
winreg.REG_DWORD
winreg.REG_DWORD_BIG_ENDIAN
winreg.REG_DWORD_LITTLE_ENDIAN
winreg.REG_EXPAND_SZ
winreg.REG_FULL_RESOURCE_DESCRIPTOR
winreg.REG_LEGAL_CHANGE_FILTER
winreg.REG_LEGAL_OPTION
winreg.REG_LINK
winreg.REG_MULTI_SZ
winreg.REG_NONE
winreg.REG_NOTIFY_CHANGE_ATTRIBUTES
winreg.REG_NOTIFY_CHANGE_LAST_SET
winreg.REG_NOTIFY_CHANGE_NAME
winreg.REG_NOTIFY_CHANGE_SECURITY
winreg.REG_NO_LAZY_FLUSH
winreg.REG_OPENED_EXISTING_KEY
winreg.REG_OPTION_BACKUP_RESTORE
winreg.REG_OPTION_CREATE_LINK
winreg.REG_OPTION_NON_VOLATILE
winreg.REG_OPTION_OPEN_LINK
winreg.REG_OPTION_RESERVED
winreg.REG_OPTION_VOLATILE
winreg.REG_REFRESH_HIVE
winreg.REG_RESOURCE_LIST
winreg.REG_RESOURCE_REQUIREMENTS_LIST
winreg.REG_SZ
winreg.REG_WHOLE_HIVE_VOLATILE
winreg.SaveKey(key, file_name) - Saves the specified key, and all its subkeys to the specified file.
winreg.SetValue(key, sub_key, type, value) - Associates a value with a specified key.
winreg.SetValueEx(key, value_name, reserved, type, value) - Stores data in the value field of an open registry key.
winreg.error(??) [doc: MS-Windows OS system call failed.]
with
xxsubtype.bench
xxsubtype.spamdict(??) [class]
xxsubtype.spamlist(??) [class]
yield
zip(iter1 [,iter2 [...]]) --> zip object
zipimport.ZipImportError(??) [class]
zipimport._zip_directory_cache
zipimport.zipimporter(archivepath) -> zipimporter object
zlib.DEFLATED
zlib.DEF_MEM_LEVEL
zlib.MAX_WBITS
zlib.ZLIB_VERSION
zlib.Z_BEST_COMPRESSION
zlib.Z_BEST_SPEED
zlib.Z_DEFAULT_COMPRESSION
zlib.Z_DEFAULT_STRATEGY
zlib.Z_FILTERED
zlib.Z_FINISH
zlib.Z_FULL_FLUSH
zlib.Z_HUFFMAN_ONLY
zlib.Z_NO_FLUSH
zlib.Z_SYNC_FLUSH
zlib.adler32(string[, start]) -- Compute an Adler-32 checksum of string.
zlib.compress(string[, level]) -- Returned compressed string.
zlib.compressobj([level]) -- Return a compressor object.
zlib.crc32(string[, start]) -- Compute a CRC-32 checksum of string.
zlib.decompress(string[, wbits[, bufsize]]) -- Return decompressed string.
zlib.decompressobj([wbits]) -- Return a decompressor object.
zlib.error(??) [class]
