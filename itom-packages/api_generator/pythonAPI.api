ArithmeticError(??) [doc: Base class for arithmetic errors.]
AssertionError(??) [doc: Assertion failed.]
AttributeError(??) [doc: Attribute not found.]
BaseException(??) [doc: Common base class for all exceptions]
BaseException.args
BaseException.with_traceback
BlockingIOError(??) [doc: I/O operation would block.]
BrokenPipeError(??) [doc: Broken pipe.]
BufferError(??) [doc: Buffer error.]
BytesWarning(??) [doc: Base class for warnings about bytes and buffer related problems, mostly]
ChildProcessError(??) [doc: Child process error.]
ConnectionAbortedError(??) [doc: Connection aborted.]
ConnectionError(??) [doc: Connection error.]
ConnectionRefusedError(??) [doc: Connection refused.]
ConnectionResetError(??) [doc: Connection reset.]
DeprecationWarning(??) [doc: Base class for warnings about deprecated features.]
EOFError(??) [doc: Read beyond end of file.]
Ellipsis
EnvironmentError(??) [doc: Base class for I/O related errors.]
EnvironmentError.characters_written
EnvironmentError.errno
EnvironmentError.filename
EnvironmentError.filename2
EnvironmentError.strerror
EnvironmentError.winerror
Exception(??) [doc: Common base class for all non-exit exceptions.]
False
FileExistsError(??) [doc: File already exists.]
FileNotFoundError(??) [doc: File not found.]
FloatingPointError(??) [doc: Floating point operation failed.]
FutureWarning(??) [doc: Base class for warnings about constructs that will change semantically]
GeneratorExit(??) [doc: Request that a generator exit.]
IOError(??) [doc: Base class for I/O related errors.]
IOError.characters_written
IOError.errno
IOError.filename
IOError.filename2
IOError.strerror
IOError.winerror
ImportError(??) [doc: Import can't find module, or can't find name in module.]
ImportError.msg
ImportError.name
ImportError.path
ImportWarning(??) [doc: Base class for warnings about probable mistakes in module imports]
IndentationError(??) [doc: Improper indentation.]
IndexError(??) [doc: Sequence index out of range.]
InterruptedError(??) [doc: Interrupted by signal.]
IsADirectoryError(??) [doc: Operation doesn't work on directories.]
KeyError(??) [doc: Mapping key not found.]
KeyboardInterrupt(??) [doc: Program interrupted by user.]
LookupError(??) [doc: Base class for lookup errors.]
MemoryError(??) [doc: Out of memory.]
NameError(??) [doc: Name not found globally.]
None
NotADirectoryError(??) [doc: Operation only works on directories.]
NotImplemented
NotImplementedError(??) [doc: Method or function hasn't been implemented yet.]
OSError(??) [doc: Base class for I/O related errors.]
OSError.characters_written
OSError.errno
OSError.filename
OSError.filename2
OSError.strerror
OSError.winerror
OverflowError(??) [doc: Result too large to be represented.]
PendingDeprecationWarning(??) [doc: Base class for warnings about features which will be deprecated]
PermissionError(??) [doc: Not enough permissions.]
ProcessLookupError(??) [doc: Process not found.]
RecursionError(??) [doc: Recursion limit exceeded.]
ReferenceError(??) [doc: Weak ref proxy used after referent went away.]
ResourceWarning(??) [doc: Base class for warnings about resource usage.]
RuntimeError(??) [doc: Unspecified run-time error.]
RuntimeWarning(??) [doc: Base class for warnings about dubious runtime behavior.]
StopAsyncIteration(??) [doc: Signal the end from iterator.__anext__().]
StopIteration(??) [doc: Signal the end from iterator.__next__().]
StopIteration.value
SyntaxError(??) [doc: Invalid syntax.]
SyntaxError.filename
SyntaxError.lineno
SyntaxError.msg
SyntaxError.offset
SyntaxError.print_file_and_line
SyntaxError.text
SyntaxWarning(??) [doc: Base class for warnings about dubious syntax.]
SystemError(??) [doc: Internal error in the Python interpreter.]
SystemExit(??) [doc: Request to exit from the interpreter.]
SystemExit.code
TabError(??) [doc: Improper mixture of spaces and tabs.]
TimeoutError(??) [doc: Timeout expired.]
True
TypeError(??) [doc: Inappropriate argument type.]
UnboundLocalError(??) [doc: Local name referenced but not bound to a value.]
UnicodeDecodeError(??) [doc: Unicode decoding error.]
UnicodeDecodeError.encoding
UnicodeDecodeError.end
UnicodeDecodeError.object
UnicodeDecodeError.reason
UnicodeDecodeError.start
UnicodeEncodeError(??) [doc: Unicode encoding error.]
UnicodeEncodeError.encoding
UnicodeEncodeError.end
UnicodeEncodeError.object
UnicodeEncodeError.reason
UnicodeEncodeError.start
UnicodeError(??) [doc: Unicode related error.]
UnicodeTranslateError(??) [doc: Unicode translation error.]
UnicodeTranslateError.encoding
UnicodeTranslateError.end
UnicodeTranslateError.object
UnicodeTranslateError.reason
UnicodeTranslateError.start
UnicodeWarning(??) [doc: Base class for warnings about Unicode related problems, mostly]
UserWarning(??) [doc: Base class for warnings generated by user code.]
ValueError(??) [doc: Inappropriate argument value (of correct type).]
Warning(??) [doc: Base class for warning categories.]
WindowsError(??) [doc: Base class for I/O related errors.]
WindowsError.characters_written
WindowsError.errno
WindowsError.filename
WindowsError.filename2
WindowsError.strerror
WindowsError.winerror
ZeroDivisionError(??) [doc: Second argument to a division or modulo operation was zero.]
abs
all
and
any
array.ArrayType(??) [doc: array(typecode [, initializer]) -> array]
array._array_reconstructor
array.array(typecode [, initializer]) -> array
array.typecodes
as
ascii
assert
atexit._clear() -> None
atexit._ncallbacks() -> int
atexit._run_exitfuncs() -> None
atexit.register(func, *args, **kwargs) -> func
atexit.unregister(func) -> None
audioop.add
audioop.adpcm2lin
audioop.alaw2lin
audioop.avg
audioop.avgpp
audioop.bias
audioop.byteswap
audioop.cross
audioop.error(??) [class]
audioop.findfactor
audioop.findfit
audioop.findmax
audioop.getsample
audioop.lin2adpcm
audioop.lin2alaw
audioop.lin2lin
audioop.lin2ulaw
audioop.max
audioop.maxpp
audioop.minmax
audioop.mul
audioop.ratecv
audioop.reverse
audioop.rms
audioop.tomono
audioop.tostereo
audioop.ulaw2lin
bin
binascii.Error(??) [class]
binascii.Incomplete(??) [class]
binascii.a2b_base64
binascii.a2b_hex
binascii.a2b_hqx
binascii.a2b_qp
binascii.a2b_uu
binascii.b2a_base64
binascii.b2a_hex
binascii.b2a_hqx
binascii.b2a_qp
binascii.b2a_uu
binascii.crc32
binascii.crc_hqx
binascii.hexlify
binascii.rlecode_hqx
binascii.rledecode_hqx
binascii.unhexlify
bool(x) -> bool
break
builtins.ArithmeticError(??) [doc: Base class for arithmetic errors.]
builtins.AssertionError(??) [doc: Assertion failed.]
builtins.AttributeError(??) [doc: Attribute not found.]
builtins.BaseException(??) [doc: Common base class for all exceptions]
builtins.BlockingIOError(??) [doc: I/O operation would block.]
builtins.BrokenPipeError(??) [doc: Broken pipe.]
builtins.BufferError(??) [doc: Buffer error.]
builtins.BytesWarning(??) [doc: Base class for warnings about bytes and buffer related problems, mostly]
builtins.ChildProcessError(??) [doc: Child process error.]
builtins.ConnectionAbortedError(??) [doc: Connection aborted.]
builtins.ConnectionError(??) [doc: Connection error.]
builtins.ConnectionRefusedError(??) [doc: Connection refused.]
builtins.ConnectionResetError(??) [doc: Connection reset.]
builtins.DeprecationWarning(??) [doc: Base class for warnings about deprecated features.]
builtins.EOFError(??) [doc: Read beyond end of file.]
builtins.Ellipsis
builtins.EnvironmentError(??) [doc: Base class for I/O related errors.]
builtins.Exception(??) [doc: Common base class for all non-exit exceptions.]
builtins.FileExistsError(??) [doc: File already exists.]
builtins.FileNotFoundError(??) [doc: File not found.]
builtins.FloatingPointError(??) [doc: Floating point operation failed.]
builtins.FutureWarning(??) [doc: Base class for warnings about constructs that will change semantically]
builtins.GeneratorExit(??) [doc: Request that a generator exit.]
builtins.IOError(??) [doc: Base class for I/O related errors.]
builtins.ImportError(??) [doc: Import can't find module, or can't find name in module.]
builtins.ImportWarning(??) [doc: Base class for warnings about probable mistakes in module imports]
builtins.IndentationError(??) [doc: Improper indentation.]
builtins.IndexError(??) [doc: Sequence index out of range.]
builtins.InterruptedError(??) [doc: Interrupted by signal.]
builtins.IsADirectoryError(??) [doc: Operation doesn't work on directories.]
builtins.KeyError(??) [doc: Mapping key not found.]
builtins.KeyboardInterrupt(??) [doc: Program interrupted by user.]
builtins.LookupError(??) [doc: Base class for lookup errors.]
builtins.MemoryError(??) [doc: Out of memory.]
builtins.NameError(??) [doc: Name not found globally.]
builtins.NotADirectoryError(??) [doc: Operation only works on directories.]
builtins.NotImplemented
builtins.NotImplementedError(??) [doc: Method or function hasn't been implemented yet.]
builtins.OSError(??) [doc: Base class for I/O related errors.]
builtins.OverflowError(??) [doc: Result too large to be represented.]
builtins.PendingDeprecationWarning(??) [doc: Base class for warnings about features which will be deprecated]
builtins.PermissionError(??) [doc: Not enough permissions.]
builtins.ProcessLookupError(??) [doc: Process not found.]
builtins.RecursionError(??) [doc: Recursion limit exceeded.]
builtins.ReferenceError(??) [doc: Weak ref proxy used after referent went away.]
builtins.ResourceWarning(??) [doc: Base class for warnings about resource usage.]
builtins.RuntimeError(??) [doc: Unspecified run-time error.]
builtins.RuntimeWarning(??) [doc: Base class for warnings about dubious runtime behavior.]
builtins.StopAsyncIteration(??) [doc: Signal the end from iterator.__anext__().]
builtins.StopIteration(??) [doc: Signal the end from iterator.__next__().]
builtins.SyntaxError(??) [doc: Invalid syntax.]
builtins.SyntaxWarning(??) [doc: Base class for warnings about dubious syntax.]
builtins.SystemError(??) [doc: Internal error in the Python interpreter.]
builtins.SystemExit(??) [doc: Request to exit from the interpreter.]
builtins.TabError(??) [doc: Improper mixture of spaces and tabs.]
builtins.TimeoutError(??) [doc: Timeout expired.]
builtins.TypeError(??) [doc: Inappropriate argument type.]
builtins.UnboundLocalError(??) [doc: Local name referenced but not bound to a value.]
builtins.UnicodeDecodeError(??) [doc: Unicode decoding error.]
builtins.UnicodeEncodeError(??) [doc: Unicode encoding error.]
builtins.UnicodeError(??) [doc: Unicode related error.]
builtins.UnicodeTranslateError(??) [doc: Unicode translation error.]
builtins.UnicodeWarning(??) [doc: Base class for warnings about Unicode related problems, mostly]
builtins.UserWarning(??) [doc: Base class for warnings generated by user code.]
builtins.ValueError(??) [doc: Inappropriate argument value (of correct type).]
builtins.Warning(??) [doc: Base class for warning categories.]
builtins.WindowsError(??) [doc: Base class for I/O related errors.]
builtins.ZeroDivisionError(??) [doc: Second argument to a division or modulo operation was zero.]
builtins.abs
builtins.all
builtins.any
builtins.ascii
builtins.bin
builtins.bool(x) -> bool
builtins.bytearray(iterable_of_ints) -> bytearray
builtins.bytes(iterable_of_ints) -> bytes
builtins.callable
builtins.chr
builtins.classmethod(function) -> method
builtins.compile
builtins.complex(real[, imag]) -> complex number
builtins.copyright
builtins.credits
builtins.delattr
builtins.dict() -> new empty dictionary
builtins.dir([object]) -> list of strings
builtins.divmod
builtins.enumerate(iterable[, start]) -> iterator for index, value of iterable
builtins.eval
builtins.exec
builtins.exit
builtins.filter(function or None, iterable) --> filter object
builtins.float(x) -> floating point number
builtins.format
builtins.frozenset() -> empty frozenset object
builtins.getattr(object, name[, default]) -> value
builtins.globals
builtins.hasattr
builtins.hash
builtins.help
builtins.hex
builtins.id
builtins.input
builtins.int(x=0) -> integer
builtins.isinstance
builtins.issubclass
builtins.iter(iterable) -> iterator
builtins.len
builtins.license
builtins.list() -> new empty list
builtins.locals
builtins.map(func, *iterables) --> map object
builtins.max(iterable, *[, default=obj, key=func]) -> value
builtins.memoryview(??) [doc: Create a new memoryview object which references the given object.]
builtins.min(iterable, *[, default=obj, key=func]) -> value
builtins.next(iterator[, default])
builtins.object(??) [doc: The most base type]
builtins.oct
builtins.open
builtins.ord
builtins.pow
builtins.print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
builtins.property(fget=None, fset=None, fdel=None, doc=None) -> property attribute
builtins.quit
builtins.range(stop) -> range object
builtins.repr
builtins.reversed(sequence) -> reverse iterator over values of the sequence
builtins.round(number[, ndigits]) -> number
builtins.set() -> new empty set object
builtins.setattr
builtins.slice(stop)
builtins.sorted
builtins.staticmethod(function) -> method
builtins.str(object='') -> str
builtins.sum
builtins.super() -> same as super(__class__, <first argument>)
builtins.tuple() -> empty tuple
builtins.type(object_or_name, bases, dict)
builtins.vars([object]) -> dictionary
builtins.zip(iter1 [,iter2 [...]]) --> zip object
bytearray(iterable_of_ints) -> bytearray
bytearray.append
bytearray.capitalize
bytearray.center
bytearray.clear
bytearray.copy
bytearray.count
bytearray.decode
bytearray.endswith
bytearray.expandtabs
bytearray.extend
bytearray.find
bytearray.fromhex
bytearray.hex
bytearray.index
bytearray.insert
bytearray.isalnum
bytearray.isalpha
bytearray.isdigit
bytearray.islower
bytearray.isspace
bytearray.istitle
bytearray.isupper
bytearray.join
bytearray.ljust
bytearray.lower
bytearray.lstrip
bytearray.maketrans
bytearray.partition
bytearray.pop
bytearray.remove
bytearray.replace
bytearray.reverse
bytearray.rfind
bytearray.rindex
bytearray.rjust
bytearray.rpartition
bytearray.rsplit
bytearray.rstrip
bytearray.split
bytearray.splitlines
bytearray.startswith
bytearray.strip
bytearray.swapcase
bytearray.title
bytearray.translate(table, [deletechars])
bytearray.upper
bytearray.zfill
bytes(iterable_of_ints) -> bytes
bytes.capitalize
bytes.center
bytes.count
bytes.decode
bytes.endswith
bytes.expandtabs
bytes.find
bytes.fromhex
bytes.hex
bytes.index
bytes.isalnum
bytes.isalpha
bytes.isdigit
bytes.islower
bytes.isspace
bytes.istitle
bytes.isupper
bytes.join
bytes.ljust
bytes.lower
bytes.lstrip
bytes.maketrans
bytes.partition
bytes.replace
bytes.rfind
bytes.rindex
bytes.rjust
bytes.rpartition
bytes.rsplit
bytes.rstrip
bytes.split
bytes.splitlines
bytes.startswith
bytes.strip
bytes.swapcase
bytes.title
bytes.translate(table, [deletechars])
bytes.upper
bytes.zfill
callable
chr
class
classmethod(function) -> method
cmath.acos
cmath.acosh
cmath.asin
cmath.asinh
cmath.atan
cmath.atanh
cmath.cos
cmath.cosh
cmath.e
cmath.exp
cmath.isclose
cmath.isfinite
cmath.isinf
cmath.isnan
cmath.log
cmath.log10
cmath.phase
cmath.pi
cmath.polar
cmath.rect
cmath.sin
cmath.sinh
cmath.sqrt
cmath.tan
cmath.tanh
compile
complex(real[, imag]) -> complex number
complex.conjugate
complex.imag
complex.real
continue
copyright
credits
def
del
delattr
dict() -> new empty dictionary
dict.clear
dict.copy
dict.fromkeys
dict.get
dict.items
dict.keys
dict.pop
dict.popitem
dict.setdefault
dict.update
dict.values
dir([object]) -> list of strings
divmod
elif
else
enumerate(iterable[, start]) -> iterator for index, value of iterable
errno.E2BIG
errno.EACCES
errno.EADDRINUSE
errno.EADDRNOTAVAIL
errno.EAFNOSUPPORT
errno.EAGAIN
errno.EALREADY
errno.EBADF
errno.EBADMSG
errno.EBUSY
errno.ECANCELED
errno.ECHILD
errno.ECONNABORTED
errno.ECONNREFUSED
errno.ECONNRESET
errno.EDEADLK
errno.EDEADLOCK
errno.EDESTADDRREQ
errno.EDOM
errno.EDQUOT
errno.EEXIST
errno.EFAULT
errno.EFBIG
errno.EHOSTDOWN
errno.EHOSTUNREACH
errno.EIDRM
errno.EILSEQ
errno.EINPROGRESS
errno.EINTR
errno.EINVAL
errno.EIO
errno.EISCONN
errno.EISDIR
errno.ELOOP
errno.EMFILE
errno.EMLINK
errno.EMSGSIZE
errno.ENAMETOOLONG
errno.ENETDOWN
errno.ENETRESET
errno.ENETUNREACH
errno.ENFILE
errno.ENOBUFS
errno.ENODATA
errno.ENODEV
errno.ENOENT
errno.ENOEXEC
errno.ENOLCK
errno.ENOLINK
errno.ENOMEM
errno.ENOMSG
errno.ENOPROTOOPT
errno.ENOSPC
errno.ENOSR
errno.ENOSTR
errno.ENOSYS
errno.ENOTCONN
errno.ENOTDIR
errno.ENOTEMPTY
errno.ENOTRECOVERABLE
errno.ENOTSOCK
errno.ENOTSUP
errno.ENOTTY
errno.ENXIO
errno.EOPNOTSUPP
errno.EOVERFLOW
errno.EOWNERDEAD
errno.EPERM
errno.EPFNOSUPPORT
errno.EPIPE
errno.EPROTO
errno.EPROTONOSUPPORT
errno.EPROTOTYPE
errno.ERANGE
errno.EREMOTE
errno.EROFS
errno.ESHUTDOWN
errno.ESOCKTNOSUPPORT
errno.ESPIPE
errno.ESRCH
errno.ESTALE
errno.ETIME
errno.ETIMEDOUT
errno.ETOOMANYREFS
errno.ETXTBSY
errno.EUSERS
errno.EWOULDBLOCK
errno.EXDEV
errno.WSABASEERR
errno.WSAEACCES
errno.WSAEADDRINUSE
errno.WSAEADDRNOTAVAIL
errno.WSAEAFNOSUPPORT
errno.WSAEALREADY
errno.WSAEBADF
errno.WSAECONNABORTED
errno.WSAECONNREFUSED
errno.WSAECONNRESET
errno.WSAEDESTADDRREQ
errno.WSAEDISCON
errno.WSAEDQUOT
errno.WSAEFAULT
errno.WSAEHOSTDOWN
errno.WSAEHOSTUNREACH
errno.WSAEINPROGRESS
errno.WSAEINTR
errno.WSAEINVAL
errno.WSAEISCONN
errno.WSAELOOP
errno.WSAEMFILE
errno.WSAEMSGSIZE
errno.WSAENAMETOOLONG
errno.WSAENETDOWN
errno.WSAENETRESET
errno.WSAENETUNREACH
errno.WSAENOBUFS
errno.WSAENOPROTOOPT
errno.WSAENOTCONN
errno.WSAENOTEMPTY
errno.WSAENOTSOCK
errno.WSAEOPNOTSUPP
errno.WSAEPFNOSUPPORT
errno.WSAEPROCLIM
errno.WSAEPROTONOSUPPORT
errno.WSAEPROTOTYPE
errno.WSAEREMOTE
errno.WSAESHUTDOWN
errno.WSAESOCKTNOSUPPORT
errno.WSAESTALE
errno.WSAETIMEDOUT
errno.WSAETOOMANYREFS
errno.WSAEUSERS
errno.WSAEWOULDBLOCK
errno.WSANOTINITIALISED
errno.WSASYSNOTREADY
errno.WSAVERNOTSUPPORTED
errno.errorcode
eval
except
exec
exit
faulthandler._fatal_error(message): call Py_FatalError(message)
faulthandler._read_null(): read from NULL, raise a SIGSEGV or SIGBUS signal depending on the platform
faulthandler._sigabrt(): raise a SIGABRT signal
faulthandler._sigfpe(): raise a SIGFPE signal
faulthandler._sigsegv(release_gil=False): raise a SIGSEGV signal
faulthandler.cancel_dump_traceback_later():
faulthandler.disable(): disable the fault handler
faulthandler.dump_traceback(file=sys.stderr, all_threads=True): dump the traceback of the current thread, or of all threads if all_threads is True, into file
faulthandler.dump_traceback_later(timeout, repeat=False, file=sys.stderrn, exit=False):
faulthandler.enable(file=sys.stderr, all_threads=True): enable the fault handler
faulthandler.is_enabled()->bool: check if the handler is enabled
filter(function or None, iterable) --> filter object
finally
float(x) -> floating point number
float.as_integer_ratio
float.conjugate
float.fromhex
float.hex
float.imag
float.is_integer
float.real
for
format
from
frozenset() -> empty frozenset object
frozenset.copy
frozenset.difference
frozenset.intersection
frozenset.isdisjoint
frozenset.issubset
frozenset.issuperset
frozenset.symmetric_difference
frozenset.union
gc.DEBUG_COLLECTABLE
gc.DEBUG_LEAK
gc.DEBUG_SAVEALL
gc.DEBUG_STATS
gc.DEBUG_UNCOLLECTABLE
gc.callbacks
gc.collect([generation]) -> n
gc.disable() -> None
gc.enable() -> None
gc.garbage
gc.get_count() -> (count0, count1, count2)
gc.get_debug() -> flags
gc.get_objects() -> [...]
gc.get_referents(*objs) -> list
gc.get_referrers(*objs) -> list
gc.get_stats() -> [...]
gc.get_threshold() -> (threshold0, threshold1, threshold2)
gc.is_tracked(obj) -> bool
gc.isenabled() -> status
gc.set_debug(flags) -> None
gc.set_threshold(threshold0, [threshold1, threshold2]) -> None
getattr(object, name[, default]) -> value
global
globals
hasattr
hash
help
hex
id
if
import
in
input
int(x=0) -> integer
int.bit_length
int.conjugate
int.denominator
int.from_bytes
int.imag
int.numerator
int.real
int.to_bytes
is
isinstance
issubclass
iter(iterable) -> iterator
itertools._grouper(??) [class]
itertools._tee(??) [doc: Iterator wrapped to make it copyable]
itertools._tee_dataobject(??) [doc: Data container common to multiple tee objects.]
itertools.accumulate(iterable[, func]) --> accumulate object
itertools.chain(*iterables) --> chain object
itertools.combinations(iterable, r) --> combinations object
itertools.combinations_with_replacement(iterable, r) --> combinations_with_replacement object
itertools.compress(data, selectors) --> iterator over selected data
itertools.count(start=0, step=1) --> count object
itertools.cycle(iterable) --> cycle object
itertools.dropwhile(predicate, iterable) --> dropwhile object
itertools.filterfalse(function or None, sequence) --> filterfalse object
itertools.groupby(iterable[, keyfunc]) -> create an iterator which returns
itertools.islice(iterable, stop) --> islice object
itertools.permutations(iterable[, r]) --> permutations object
itertools.product(*iterables, repeat=1) --> product object
itertools.repeat(object [,times]) -> create an iterator which returns the object
itertools.starmap(function, sequence) --> starmap object
itertools.takewhile(predicate, iterable) --> takewhile object
itertools.tee(iterable, n=2) --> tuple of n independent iterators.
itertools.zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> zip_longest object
lambda
len
license
list() -> new empty list
list.append
list.clear
list.copy
list.count
list.extend
list.index
list.insert
list.pop
list.remove
list.reverse
list.sort
locals
map(func, *iterables) --> map object
marshal.dump(value, file[, version])
marshal.dumps(value[, version])
marshal.load(file)
marshal.loads(bytes)
marshal.version
math.acos(x)
math.acosh(x)
math.asin(x)
math.asinh(x)
math.atan(x)
math.atan2(y, x)
math.atanh(x)
math.ceil(x)
math.copysign(x, y)
math.cos(x)
math.cosh(x)
math.degrees(x)
math.e
math.erf(x)
math.erfc(x)
math.exp(x)
math.expm1(x)
math.fabs(x)
math.factorial(x) -> Integral
math.floor(x)
math.fmod(x, y)
math.frexp(x)
math.fsum(iterable)
math.gamma(x)
math.gcd(x, y) -> int
math.hypot(x, y)
math.inf
math.isclose
math.isfinite(x) -> bool
math.isinf(x) -> bool
math.isnan(x) -> bool
math.ldexp(x, i)
math.lgamma(x)
math.log(x[, base])
math.log10(x)
math.log1p(x)
math.log2(x)
math.modf(x)
math.nan
math.pi
math.pow(x, y)
math.radians(x)
math.sin(x)
math.sinh(x)
math.sqrt(x)
math.tan(x)
math.tanh(x)
math.trunc(x:Real) -> Integral
matlab.MatlabSession(??) [class]
max(iterable, *[, default=obj, key=func]) -> value
memoryview(??) [doc: Create a new memoryview object which references the given object.]
memoryview.c_contiguous
memoryview.cast
memoryview.contiguous
memoryview.f_contiguous
memoryview.format
memoryview.hex
memoryview.itemsize
memoryview.nbytes
memoryview.ndim
memoryview.obj
memoryview.readonly
memoryview.release
memoryview.shape
memoryview.strides
memoryview.suboffsets
memoryview.tobytes
memoryview.tolist
min(iterable, *[, default=obj, key=func]) -> value
mmap.ACCESS_COPY
mmap.ACCESS_READ
mmap.ACCESS_WRITE
mmap.ALLOCATIONGRANULARITY
mmap.PAGESIZE
mmap.error(??) [doc: Base class for I/O related errors.]
mmap.mmap(??) [doc: Windows: mmap(fileno, length[, tagname[, access[, offset]]])]
msvcrt.CRT_ASSEMBLY_VERSION
msvcrt.LK_LOCK
msvcrt.LK_NBLCK
msvcrt.LK_NBRLCK
msvcrt.LK_RLCK
msvcrt.LK_UNLCK
msvcrt.SEM_FAILCRITICALERRORS
msvcrt.SEM_NOALIGNMENTFAULTEXCEPT
msvcrt.SEM_NOGPFAULTERRORBOX
msvcrt.SEM_NOOPENFILEERRORBOX
msvcrt.SetErrorMode
msvcrt.get_osfhandle
msvcrt.getch
msvcrt.getche
msvcrt.getwch
msvcrt.getwche
msvcrt.heapmin
msvcrt.kbhit
msvcrt.locking
msvcrt.open_osfhandle
msvcrt.putch
msvcrt.putwch
msvcrt.setmode
msvcrt.ungetch
msvcrt.ungetwch
next(iterator[, default])
nonlocal
not
nt.F_OK
nt.O_APPEND
nt.O_BINARY
nt.O_CREAT
nt.O_EXCL
nt.O_NOINHERIT
nt.O_RANDOM
nt.O_RDONLY
nt.O_RDWR
nt.O_SEQUENTIAL
nt.O_SHORT_LIVED
nt.O_TEMPORARY
nt.O_TEXT
nt.O_TRUNC
nt.O_WRONLY
nt.P_DETACH
nt.P_NOWAIT
nt.P_NOWAITO
nt.P_OVERLAY
nt.P_WAIT
nt.R_OK
nt.TMP_MAX
nt.W_OK
nt.X_OK
nt._exit
nt._getdiskusage
nt._getfinalpathname
nt._getfullpathname
nt._getvolumepathname
nt._have_functions
nt._isdir
nt.abort
nt.access
nt.chdir
nt.chmod
nt.close
nt.closerange
nt.cpu_count
nt.device_encoding
nt.dup
nt.dup2
nt.environ
nt.error(??) [doc: Base class for I/O related errors.]
nt.execv
nt.execve
nt.fstat
nt.fsync
nt.ftruncate
nt.get_handle_inheritable
nt.get_inheritable
nt.get_terminal_size
nt.getcwd
nt.getcwdb
nt.getlogin
nt.getpid
nt.getppid
nt.isatty
nt.kill
nt.link
nt.listdir
nt.lseek
nt.lstat
nt.mkdir
nt.open
nt.pipe
nt.putenv
nt.read
nt.readlink(path, *, dir_fd=None) -> path
nt.remove
nt.rename
nt.replace
nt.rmdir
nt.scandir(path='.') -> iterator of DirEntry objects for given path
nt.set_handle_inheritable
nt.set_inheritable
nt.spawnv
nt.spawnve
nt.startfile(filepath [, operation])
nt.stat
nt.stat_float_times([newval]) -> oldval
nt.stat_result(??) [doc: stat_result: Result from stat, fstat, or lstat.]
nt.statvfs_result(??) [doc: statvfs_result: Result from statvfs or fstatvfs.]
nt.strerror
nt.symlink
nt.system
nt.terminal_size(??) [doc: A tuple of (columns, lines) for holding terminal window size]
nt.times
nt.times_result(??) [doc: times_result: Result from os.times().]
nt.truncate
nt.umask
nt.uname_result(??) [doc: uname_result: Result from os.uname().]
nt.unlink
nt.urandom
nt.utime
nt.waitpid
nt.write
object(??) [doc: The most base type]
oct
open
or
ord
parser.ParserError(??) [class]
parser.STType(??) [doc: Intermediate representation of a Python parse tree.]
parser._pickler
parser.compilest
parser.expr
parser.isexpr
parser.issuite
parser.sequence2st
parser.st2list
parser.st2tuple
parser.suite
parser.tuple2st
pass
pow
property(fget=None, fset=None, fdel=None, doc=None) -> property attribute
property.deleter
property.fdel
property.fget
property.fset
property.getter
property.setter
quit
raise
range(stop) -> range object
range.count
range.index
range.start
range.step
range.stop
repr
return
reversed(sequence) -> reverse iterator over values of the sequence
round(number[, ndigits]) -> number
set() -> new empty set object
set.add
set.clear
set.copy
set.difference
set.difference_update
set.discard
set.intersection
set.intersection_update
set.isdisjoint
set.issubset
set.issuperset
set.pop
set.remove
set.symmetric_difference
set.symmetric_difference_update
set.union
set.update
setattr
slice(stop)
slice.indices
slice.start
slice.step
slice.stop
sorted
staticmethod(function) -> method
str(object='') -> str
str.capitalize
str.casefold
str.center
str.count
str.encode
str.endswith
str.expandtabs
str.find
str.format
str.format_map
str.index
str.isalnum
str.isalpha
str.isdecimal
str.isdigit
str.isidentifier
str.islower
str.isnumeric
str.isprintable
str.isspace
str.istitle
str.isupper
str.join
str.ljust
str.lower
str.lstrip
str.maketrans
str.partition
str.replace
str.rfind
str.rindex
str.rjust
str.rpartition
str.rsplit
str.rstrip
str.split
str.splitlines
str.startswith
str.strip
str.swapcase
str.title
str.translate
str.upper
str.zfill
sum
super() -> same as super(__class__, <first argument>)
sys._clear_type_cache() -> None
sys._current_frames() -> dictionary
sys._debugmallocstats()
sys._getframe([depth]) -> frameobject
sys._home
sys._mercurial
sys._xoptions
sys.api_version
sys.argv
sys.base_exec_prefix
sys.base_prefix
sys.builtin_module_names
sys.byteorder
sys.call_tracing(func, args) -> object
sys.callstats() -> tuple of integers
sys.copyright
sys.displayhook(object) -> None
sys.dllhandle
sys.dont_write_bytecode
sys.exc_info() -> (type, value, traceback)
sys.excepthook(exctype, value, traceback) -> None
sys.exec_prefix
sys.executable
sys.exit([status])
sys.flags
sys.float_info
sys.float_repr_style
sys.get_coroutine_wrapper()
sys.getallocatedblocks() -> integer
sys.getcheckinterval() -> current check interval; see setcheckinterval().
sys.getdefaultencoding() -> string
sys.getfilesystemencoding() -> string
sys.getprofile()
sys.getrecursionlimit()
sys.getrefcount(object) -> integer
sys.getsizeof(object, default) -> int
sys.getswitchinterval() -> current thread switch interval; see setswitchinterval().
sys.gettrace()
sys.getwindowsversion()
sys.hash_info
sys.hexversion
sys.implementation
sys.int_info
sys.intern(string) -> string
sys.is_finalizing()
sys.maxsize
sys.maxunicode
sys.meta_path
sys.modules
sys.path
sys.path_hooks
sys.path_importer_cache
sys.platform
sys.prefix
sys.set_coroutine_wrapper(wrapper)
sys.setcheckinterval(n)
sys.setprofile(function)
sys.setrecursionlimit(n)
sys.setswitchinterval(n)
sys.settrace(function)
sys.stderr
sys.stdin
sys.stdout
sys.thread_info
sys.version
sys.version_info
sys.warnoptions
sys.winver
time._STRUCT_TM_ITEMS
time.altzone
time.asctime([tuple]) -> string
time.clock() -> floating point number
time.ctime(seconds) -> string
time.daylight
time.get_clock_info(name: str) -> dict
time.gmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min,
time.localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,
time.mktime(tuple) -> floating point number
time.monotonic() -> float
time.perf_counter() -> float
time.process_time() -> float
time.sleep(seconds)
time.strftime(format[, tuple]) -> string
time.strptime(string, format) -> struct_time
time.struct_time(??) [doc: The time value as returned by gmtime(), localtime(), and strptime(), and]
time.time() -> floating point number
time.timezone
time.tzname
try
tuple() -> empty tuple
tuple.count
tuple.index
type(object_or_name, bases, dict)
type.mro() -> list
vars([object]) -> dictionary
while
winreg.CloseKey
winreg.ConnectRegistry
winreg.CreateKey
winreg.CreateKeyEx
winreg.DeleteKey
winreg.DeleteKeyEx
winreg.DeleteValue
winreg.DisableReflectionKey
winreg.EnableReflectionKey
winreg.EnumKey
winreg.EnumValue
winreg.ExpandEnvironmentStrings
winreg.FlushKey
winreg.HKEYType(??) [doc: PyHKEY Object - A Python object, representing a win32 registry key.]
winreg.HKEY_CLASSES_ROOT
winreg.HKEY_CURRENT_CONFIG
winreg.HKEY_CURRENT_USER
winreg.HKEY_DYN_DATA
winreg.HKEY_LOCAL_MACHINE
winreg.HKEY_PERFORMANCE_DATA
winreg.HKEY_USERS
winreg.KEY_ALL_ACCESS
winreg.KEY_CREATE_LINK
winreg.KEY_CREATE_SUB_KEY
winreg.KEY_ENUMERATE_SUB_KEYS
winreg.KEY_EXECUTE
winreg.KEY_NOTIFY
winreg.KEY_QUERY_VALUE
winreg.KEY_READ
winreg.KEY_SET_VALUE
winreg.KEY_WOW64_32KEY
winreg.KEY_WOW64_64KEY
winreg.KEY_WRITE
winreg.LoadKey
winreg.OpenKey
winreg.OpenKeyEx
winreg.QueryInfoKey
winreg.QueryReflectionKey
winreg.QueryValue
winreg.QueryValueEx
winreg.REG_BINARY
winreg.REG_CREATED_NEW_KEY
winreg.REG_DWORD
winreg.REG_DWORD_BIG_ENDIAN
winreg.REG_DWORD_LITTLE_ENDIAN
winreg.REG_EXPAND_SZ
winreg.REG_FULL_RESOURCE_DESCRIPTOR
winreg.REG_LEGAL_CHANGE_FILTER
winreg.REG_LEGAL_OPTION
winreg.REG_LINK
winreg.REG_MULTI_SZ
winreg.REG_NONE
winreg.REG_NOTIFY_CHANGE_ATTRIBUTES
winreg.REG_NOTIFY_CHANGE_LAST_SET
winreg.REG_NOTIFY_CHANGE_NAME
winreg.REG_NOTIFY_CHANGE_SECURITY
winreg.REG_NO_LAZY_FLUSH
winreg.REG_OPENED_EXISTING_KEY
winreg.REG_OPTION_BACKUP_RESTORE
winreg.REG_OPTION_CREATE_LINK
winreg.REG_OPTION_NON_VOLATILE
winreg.REG_OPTION_OPEN_LINK
winreg.REG_OPTION_RESERVED
winreg.REG_OPTION_VOLATILE
winreg.REG_REFRESH_HIVE
winreg.REG_RESOURCE_LIST
winreg.REG_RESOURCE_REQUIREMENTS_LIST
winreg.REG_SZ
winreg.REG_WHOLE_HIVE_VOLATILE
winreg.SaveKey
winreg.SetValue
winreg.SetValueEx
winreg.error(??) [doc: Base class for I/O related errors.]
with
xxsubtype.bench
xxsubtype.spamdict(??) [class]
xxsubtype.spamlist(??) [class]
yield
zip(iter1 [,iter2 [...]]) --> zip object
zipimport.ZipImportError(??) [class]
zipimport._zip_directory_cache
zipimport.zipimporter(archivepath) -> zipimporter object
zlib.DEFLATED
zlib.DEF_BUF_SIZE
zlib.DEF_MEM_LEVEL
zlib.MAX_WBITS
zlib.ZLIB_RUNTIME_VERSION
zlib.ZLIB_VERSION
zlib.Z_BEST_COMPRESSION
zlib.Z_BEST_SPEED
zlib.Z_DEFAULT_COMPRESSION
zlib.Z_DEFAULT_STRATEGY
zlib.Z_FILTERED
zlib.Z_FINISH
zlib.Z_FULL_FLUSH
zlib.Z_HUFFMAN_ONLY
zlib.Z_NO_FLUSH
zlib.Z_SYNC_FLUSH
zlib.adler32
zlib.compress
zlib.compressobj
zlib.crc32
zlib.decompress
zlib.decompressobj
zlib.error(??) [class]
