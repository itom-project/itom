# coding=iso-8859-15 

# -*- coding: utf-8 -*-

import os
import ctypes
import sys
from sphinx.util.console import nocolor
from sphinx.application import Sphinx

from packaging import version
import subprocess
import itom
import __main__
import shutil
import glob
import modify_doc
import re

from sys import platform as _platform

clc()

all_files = True
filenames = False
confoverrides = {}
freshenv = False

basedir = getCurrentPath()
srcdir = "${CMAKE_CURRENT_SOURCE_DIR}/docs/userDoc/source"                #basedir + "\\source"
confdir = "${CMAKE_CURRENT_SOURCE_DIR}/docs/userDoc/source"               #basedir + "\\source"
aboutDir = "${CMAKE_CURRENT_SOURCE_DIR}/docs/userDoc/source/AboutItem"    #basedir + "\\source\\AboutItom"

__main__.__dict__["__doxygen__xml"] = "${CMAKE_CURRENT_BINARY_DIR}/docs/doxygen/xml"

buildernames = ["qthelp"] #["qthelp", "htmlhelp", "latex", "html"]

for buildername in buildernames:
    outdir = basedir + "/build/" + buildername
    doctreedir = basedir + "/build/doctrees"
    
    # for html-builder use another config-file
    if (buildername == "html"):
        confdir = confdir + "/config_html"
    
    try:
        os.mkdir(outdir)
    except:
        pass


    app = Sphinx(srcdir, confdir, outdir, doctreedir, buildername,
                 confoverrides, sys.stdout, sys.stderr, freshenv)
    
    if("${BUILD_WITH_PCL}" in ("ON", "on", "TRUE", "true")): #the first variable is automatically set by CMake
        app.tags.add('PCL')
    else:
        app.tags.add('NOPCL')

    nocolor()

    if not app.builder:
        raise RuntimeError

    if all_files:
        app.builder.build_all()
    elif filenames:
        app.builder.build_specific(filenames)
    else:
        app.builder.build_update()

    if(buildername == "qthelp"):
        #search for relative name to case insensitive document itomdocumentation.qhcp (linux is case-sensitive)
        #[iI] is a regexp for case insensitive letter i e.g.
        filenames = glob.glob("build/qthelp/[iI][tT][oO][mM][dD]ocumentation.qhcp") 
        ret = 0
        
        import sphinx
        if sphinx.__version__ >= "1.8.0" and sphinx.__version__ < "1.8.3":
            #temporary fix to replace <file>/index.html</file> by <file>index.html</file> in qhp file
            #see: https://github.com/sphinx-doc/sphinx/issues/5627
            for qhpName in glob.glob("build/qthelp/[iI][tT][oO][mM][dD]ocumentation.qhp"):
                newContent = None
                with open(qhpName, 'rt') as fp:
                    content = fp.read()
                    newContent = re.sub("<file>/([a-zA-Z0-9\._\-]*)</file>",r"<file>\1</file>", content, flags =re.M)
                if not newContent is None:
                    with open(qhpName, 'wt') as fp:
                        fp.write(newContent)
        
        if version.parse(itom.version(1)["itom"]["QT_Version"]) >= version.parse("5.12.0"): #https://blog.qt.io/blog/2018/11/02/whats-new-qt-help/
            if _platform == "darwin":   # OS X
                ret = subprocess.call([itom.getQtToolPath("qhelpgenerator"), os.getcwd()+'/'+filenames[0]], shell=True)
            else:
                ret = subprocess.call([itom.getQtToolPath("qhelpgenerator"), filenames[0]])
        else:
            if _platform == "darwin":   # OS X
                ret = subprocess.call([itom.getQtToolPath("qcollectiongenerator"), os.getcwd()+'/'+filenames[0]], shell=True)
            else:
                ret = subprocess.call([itom.getQtToolPath("qcollectiongenerator"), filenames[0]])
        
        if(ret != 0 and ret != 127):
            raise RuntimeError("qcollectiongenerator failed")
        else:
            print("qcollectiongenerator successfully executed")
            
        ret = itom.ui.msgInformation("show result","do you want to see the result?",ui.MsgBoxYes | ui.MsgBoxNo)
        if(ret[0] == ui.MsgBoxYes):
            filenames = glob.glob("build/qthelp/[iI][tT][oO][mM][dD]ocumentation.qhc") 
            showHelpViewer(filenames[0])
            
            #if _platform == "darwin":   # OS X
                #subprocess.check_call(["/Applications/Assistant.app/Contents/MacOS/Assistant", "-collectionFile", os.getcwd()+'/'+filenames[0]], shell=True)
            #else:
                #subprocess.check_call(["assistant", "-collectionFile", filenames[0]])
            
    elif(buildername == "htmlhelp"):
        hhc = "${HTML_HELP_COMPILER}" #"C:/Program Files (x86)/HTML Help Workshop/hhc.exe"
        
        if( os.path.exists( hhc )):
            print("Compile chm with", hhc, "...")
            ret = subprocess.call([hhc, "build/htmlhelp/itom_doc.hhp"])
            if(ret != 1):
                raise RuntimeError("html help workshop failed")
            else:
                print("html help workshop successfully executed")
                shutil.copy2("build/htmlhelp/itom_doc.chm","..")
        else:
            print("HTML Help Workshop (hhc.exe) could not be found.")
            print("Open HTML Help Workshop and compile resulting *.hpp-file to *.chm help file")
            print("HTML Help Workshop is obtained by http://www.microsoft.com/en-us/download/details.aspx?id=21138")
            
    elif(buildername == "latex"):
        if ctypes.windll.shell32.IsUserAnAdmin() == 0:
            raise RuntimeError("Latex file can only be modified, if itom is executed as admin.")
            
        pdflatex  = "${PDFLATEX_COMPILER}" #"C:/Programme/MiKTeX 2.9/miktex/bin/pdflatex.exe"
        texfolder = outdir #"F:/itom-git/build/itom/docs/userDoc/build/latex"
        
        # replace some lines in tex files
        print("\n*.tex is corrected by modify_doc")
        modify_doc.replaceInFiles(texfolder,".tex")
        
        # Convert into pdf 
        dirList=os.listdir(texfolder)
        # iterate through files in folder
        for fname in dirList:
            if fname.endswith(".tex"):
                print("\nstarte Latex => pdf")
                startupinfo = subprocess.STARTUPINFO()
                startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
                # the window is hidden with the very last command
                # Attention: you cannot change the process when errors occur and you are waiting for input
                ret = subprocess.call([pdflatex, fname,"-output-directory=" + texfolder])#,"-quiet"])#, startupinfo=startupinfo)startupinfo=startupinfo)
                if ret == 0:
                    print("------------------------------")
                    print("******* pdf created *******")
                    print("------------------------------")
                elif ret == 1:
                    print("ERROR: Can not create pdf")
                # The link within the PDF only works if the command is called twice.
                ret = subprocess.call([pdflatex, fname,"-output-directory=" + texfolder])#,"-quiet"])#, startupinfo=startupinfo)startupinfo=startupinfo)
                if ret == 0:
                    print("------------------------------")
                    print("******* pdf linked *******")
                    print("------------------------------")
                elif ret == 1:
                    print("ERROR: Can not create pdf")

del __main__.__dict__["__doxygen__xml"]
