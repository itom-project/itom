# coding=iso-8859-15

"""This script modifies latex outputs to avoid latex compiler errors.
"""

import itom
import os
import re


def replaceInFiles(path, ending):
    dirList = os.listdir(path)
    coding = "iso-8859-15"

    # Iterate over files in folder
    for fname in dirList:
        if fname.endswith(ending):
            with open(path + "\\" + fname, "r", encoding=coding) as f:
                s = f.read()
                s = s.replace(
                    "\\begin{quote}\\begin{description}", "\\begin{description}"
                )
                s = s.replace("\\end{description}\\end{quote}", "\\end{description}")

                dict = itom.version(True)
                itomRefAbbrev = dict["itom"]["itom_GIT_Rev_Abbrev"]
                itomVersion = dict["itom"]["itom_Version"]
                # replace itom Ref number by itom version
                s = s.replace("%s" % itomRefAbbrev, "%s" % itomVersion)

                s = s.replace(".gif", ".png")  # replace gif by png images for pdf

                # look for all figures and insert a \newpage after approx. every 10th image
                p = re.compile(r"\\begin{figure}\[htbp\]")

                # chapter, sections... interrupt the search
                pNeg = re.compile(
                    r"\\chapter{|\\section{|\\subsection{|\\subsubsection{"
                )

                # j indicates after how many images a new pagebreak should appear
                j = 3
                pos = 0
                # c counts the number of figures
                c = 0
                while pos < len(s):
                    m = p.search(s, pos, len(s))
                    if m is None:
                        break

                    # check, if pNeg could find a match between pos and pos + m.end().
                    # If so, reset the counter c.
                    m2 = pNeg.search(s, pos, len(s))
                    if not (m2 is None) and m2.end() < m.end():
                        print("new section or chapter, figure newline counter resetted")
                        c = 1
                    else:
                        c += 1

                    pos = m.end()
                    # c = c +1
                    if c % j == 0:
                        # replace
                        sStart = s[: m.start()]
                        sRep = re.sub(
                            r"\\begin{figure}\[htbp\]",
                            r"\\newpage\n\\begin{figure}[htbp]",
                            s[m.start() : m.end()],
                        )
                        sEnd = s[m.end() :]
                        s = sStart + sRep + sEnd

                # remove single-line verbatim blocks. workaround.
                s = re.sub(r"\\begin{Verbatim}.*\n\\end{Verbatim}", "\n", s)

                # remove empty descriptions
                s = re.sub(r"\\begin{description}\s\\end{description}", "\n", s)
            with open(path + "\\" + fname, "w", encoding=coding) as f:
                f.write(s,)
