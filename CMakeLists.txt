project(itom)
 
cmake_minimum_required(VERSION 3.0.2)

if(APPLE)
    set(CMAKE_OSX_ARCHITECTURES "x86_64")
endif()

option(BUILD_TARGET64 "Build for 64 bit target if set to ON or 32 bit if set to OFF." ON)
option(BUILD_UNICODE "Build with unicode charset if set to ON, else multibyte charset." ON)
option(BUILD_WITH_PCL "Build itom with PointCloudLibrary support (pointCloud, polygonMesh, point...)" ON)
set(ITOM_APP_DIR ${CMAKE_CURRENT_BINARY_DIR} CACHE PATH "base path to itom")
set(ITOM_SDK_DIR ${CMAKE_CURRENT_BINARY_DIR}/SDK CACHE PATH "base path to itom_sdk")
set(CMAKE_DEBUG_POSTFIX "d" CACHE STRING "Adds a postfix for debug-built libraries.")
option(BUILD_UNITTEST "Build unittest for itom (including gtest)." OFF)
option(SETUP_ISSCONFIG "Set up batch for inno setup compilation." OFF)
option(BUILD_ITOMLIBS_SHARED "Build dataObject, pointCloud, itomCommonLib and itomCommonQtLib as shared library (default)" ON)
set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug;Release")

# Determined by try-compile from cmake 3.0.2 onwards. Not sure if it's a good idea to set this manually...
if(BUILD_TARGET64)
    if(NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
        message(FATAL_ERROR "BUILD_TARGET64 is ON, but CMAKE_SIZEOF_VOID_P is unequal to 8 bytes. Maybe change the compiler.")
    endif()
else()
    if(NOT CMAKE_SIZEOF_VOID_P EQUAL 4)
        message(FATAL_ERROR "BUILD_TARGET64 is OFF, but CMAKE_SIZEOF_VOID_P is unequal to 4 bytes. Maybe change the compiler.")
    endif()
endif(BUILD_TARGET64)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR})

if(WIN32)
    # add /LTCG flag to remove MSVC linker warning in release build
    set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /LTCG")
    set(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS_RELEASE} /LTCG")
    set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG")
endif()

add_subdirectory(DataObject)

if(BUILD_WITH_PCL)
    add_subdirectory(PointCloud)
    set(ITOM_SDK_LIB_COMPONENTS_STR "dataobject pointcloud addinmanager qpropertyeditor itomCommonLib itomCommonQtLib itomCommonPlotLib itomWidgets itomShapeLib")
else()
    set(ITOM_SDK_LIB_COMPONENTS_STR "dataobject addinmanager qpropertyeditor itomCommonLib itomCommonQtLib itomCommonPlotLib itomWidgets itomShapeLib")
endif()

add_subdirectory(common)
add_subdirectory(AddInManager)
add_subdirectory(shape)
add_subdirectory(commonQt)
add_subdirectory(QPropertyEditor)
add_subdirectory(plot)
add_subdirectory(itomWidgets)
add_subdirectory(Qitom)
add_subdirectory(iconThemes)

if(BUILD_UNITTEST)
    #put this as last, since gtest is globally changing many compiler flags
    add_subdirectory(gtest-1.6.0)
    add_subdirectory(itom_unittests)
endif()

if(BUILD_ISSCONFIG)
    set(InnoSetupPath CACHE PATH "base path to inno setup")
endif()

#find current itom version from qitom/global.h
file(STRINGS ${CMAKE_CURRENT_SOURCE_DIR}/Qitom/global.h ITOM_versionStringFull LIMIT_COUNT 1 REGEX "^#define ITOM_VERSION_STR.*$")
string(REGEX MATCH "([0-9]+).([0-9]+).([0-9]+)" ITOM_versionString ${ITOM_versionStringFull}) #searches for Number.Number.Number[.Number] in ITOM_versionStringFull

message(STATUS "itom version is: ${ITOM_versionString}. If wrong change it in global.h and reconfigure CMake")
message(STATUS "")
message(STATUS "CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}")
message(STATUS "")

################################################################################################################
#CONFIGURE AND PREPARE THE INNO SETUP FILES (require location of Qt, therefore find_package_qt must be called)
include("ItomBuildMacros.cmake")
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/doxygen/itom_doxygen.dox.in ${CMAKE_CURRENT_BINARY_DIR}/docs/doxygen/itom_doxygen.dox )
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/userDoc/create_doc.py.in ${CMAKE_CURRENT_BINARY_DIR}/docs/userDoc/create_doc.py )
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/userDoc/modify_doc.py.in ${CMAKE_CURRENT_BINARY_DIR}/docs/userDoc/modify_doc.py )
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/docs/pythonSqlDb/PythonAPI_SqlCreator.py ${CMAKE_CURRENT_BINARY_DIR}/docs/pythonSqlDb/PythonAPI_SqlCreator.py )
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/docs/pluginDoc DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/docs)
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/styles DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/licenses DESTINATION ${CMAKE_CURRENT_BINARY_DIR})

################################################################################################################
FIND_PACKAGE_QT(ON Core)

configure_file(${CMAKE_CURRENT_SOURCE_DIR}/setup/win32/itom_setup_win32.iss.in ${CMAKE_CURRENT_BINARY_DIR}/setup/win32/itom_setup_win32.iss )
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/setup/common/itom_setup_code.iss.in ${CMAKE_CURRENT_BINARY_DIR}/setup/win32/itom_setup_win32_code.iss )
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/setup/common/start_qt_deployment.bat.in ${CMAKE_CURRENT_BINARY_DIR}/setup/win32/start_qt_deployment.bat )
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/setup/win64/itom_setup_win64.iss.in ${CMAKE_CURRENT_BINARY_DIR}/setup/win64/itom_setup_win64.iss )
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/setup/common/itom_setup_code.iss.in ${CMAKE_CURRENT_BINARY_DIR}/setup/win64/itom_setup_win64_code.iss )
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/setup/common/start_qt_deployment.bat.in ${CMAKE_CURRENT_BINARY_DIR}/setup/win64/start_qt_deployment.bat )

if(SETUP_ISSCONFIG)
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/setup/win32/compile_iss_win32.bat.in ${CMAKE_CURRENT_BINARY_DIR}/setup/win32/compile_iss_win32.bat )
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/setup/win64/compile_iss_win64.bat.in ${CMAKE_CURRENT_BINARY_DIR}/setup/win64/compile_iss_win64.bat )
endif()
################################################################################################################

if(WIN32)
    set(CHMSource "${CMAKE_CURRENT_SOURCE_DIR}/docs/itom_doc.chm")
    set(CHMDest "${CMAKE_CURRENT_BINARY_DIR}/docs")

    if(EXISTS ${CHMSource})
        if(EXISTS "${CHMDest}/itom_doc.chm")
            if(${CHMSource} IS_NEWER_THAN "${CHMDest}/itom_doc.chm")
                message(STATUS "copy ${CHMSource} to ${CHMDest} since it is newer")
                file(COPY ${CHMSource} DESTINATION ${CHMDest})
            endif()
        else()
            message(STATUS "copy ${CHMSource} to ${CHMDest}")
            file(COPY ${CHMSource} DESTINATION ${CHMDest})
        endif()
    else()
        message(STATUS "${CHMSource} does not exist")
    endif()


    if(MSVC_VERSION EQUAL 1600)
        if(CMAKE_CL_64)
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_debug64.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_debug.bat COPYONLY)
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_release64.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_release.bat COPYONLY)
        else()
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_debug32.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_debug.bat COPYONLY)
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_release32.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_release.bat COPYONLY)
        endif()
    elseif(MSVC_VERSION EQUAL 1700)
        if(CMAKE_CL_64)
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_debug64_v11.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_debug.bat COPYONLY)
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_release64_v11.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_release.bat COPYONLY)
        else()
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_debug32_v11.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_debug.bat COPYONLY)
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_release32_v11.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_release.bat COPYONLY)
        endif()
    elseif(MSVC_VERSION EQUAL 1800)
        if(CMAKE_CL_64)
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_debug64_v12.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_debug.bat COPYONLY)
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_release64_v12.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_release.bat COPYONLY)
        else()
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_debug32_v12.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_debug.bat COPYONLY)
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_release32_v12.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_release.bat COPYONLY)
        endif()
    elseif(MSVC_VERSION EQUAL 1900)
        if(CMAKE_CL_64)
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_debug64_v14.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_debug.bat COPYONLY)
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_release64_v14.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_release.bat COPYONLY)
        else()
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_debug32_v14.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_debug.bat COPYONLY)
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_release32_v14.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_release.bat COPYONLY)
        endif()
    elseif((MSVC_VERSION GREATER 1909) AND (MSVC_VERSION LESS 1920))
        if(CMAKE_CL_64)
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_debug64_v15.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_debug.bat COPYONLY)
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_release64_v15.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_release.bat COPYONLY)
        else()
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_debug32_v15.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_debug.bat COPYONLY)
            configure_file(${CMAKE_CURRENT_SOURCE_DIR}/compile_release32_v15.bat ${CMAKE_CURRENT_BINARY_DIR}/compile_release.bat COPYONLY)
        endif()
    endif()
endif()

#ADD a batch file for itom-release
configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/COPYING.txt ${CMAKE_CURRENT_BINARY_DIR}/COPYING.txt )

configure_file( ${CMAKE_CURRENT_SOURCE_DIR}/itom_sdk.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/SDK/itom_sdk.cmake )
