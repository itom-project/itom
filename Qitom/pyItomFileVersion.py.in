'''
/* ********************************************************************
    itom software
    URL: http://www.uni-stuttgart.de/ito
    Copyright (C) 2013, Institut fuer Technische Optik (ITO),
    Universitaet Stuttgart, Germany

    This file is part of itom and its software development toolkit (SDK).

    itom is free software; you can redistribute it and/or modify it
    under the terms of the GNU Library General Public Licence as published by
    the Free Software Foundation; either version 2 of the Licence, or (at
    your option) any later version.
   
    In addition, as a special exception, the Institut fuer Technische
    Optik (ITO) gives you certain additional rights.
    These rights are described in the ITO LGPL Exception version 1.0,
    which can be found in the file LGPL_EXCEPTION.txt in this package.

    itom is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library
    General Public Licence for more details.

    You should have received a copy of the GNU Library General Public License
    along with itom. If not, see <http://www.gnu.org/licenses/>.
*********************************************************************** */

This is a wrapper to convert the version informations to a RC file and add it to the project.
Later windows adds this data automatically to the itom file describtion.
'''

import time
import os
import sys
from os import path
import subprocess

repositoryPath = '${CMAKE_CURRENT_SOURCE_DIR}/..'
destinationFolder = '${CMAKE_CURRENT_BINARY_DIR}/..'

inputString = ''

versionMajor = '1'
versionMinor = '0'
versionPath  = '0'

versionString = '\"1.0.0\\0\"'
copyrightStuff = '\"LGPL V2.1 with ITO/itom exception 2010-'+str(time.localtime()[0])+'\\0\"'
currentVersionApiInfo = '\"not defined\\0\"'

try:
    inputFile = open(repositoryPath+"/common/addInInterface.h", "r")
    inputString = inputFile.read()
    inputFile.close()
    pos = inputString.find("static const char* ito_AddInInterface_CurrentVersion", 0, len(inputString))
    posFirst = inputString.find("= ", pos, len(inputString))+3
    posLast = inputString.find("\n", pos, len(inputString))-2
    currentVersionApiInfo = '\"'+inputString[posFirst:posLast] +'\\0\"'
except:
    raise RuntimeError("Reading /common/addInInterface.h failed")

try:
    inputFile = open(repositoryPath+"/Qitom/global.h", "r")
    inputString = inputFile.read()
    inputFile.close()
    posFirst = inputString.find("#define ITOM_VERSION_MAJOR ", 0, len(inputString)) + len("#define ITOM_VERSION_MAJOR ")
    posLast = inputString.find("\n", posFirst, len(inputString))
    versionMajor = inputString[posFirst:posLast]
    posFirst = inputString.find("#define ITOM_VERSION_MINOR ", 0, len(inputString)) + len("#define ITOM_VERSION_MINOR ")
    posLast = inputString.find("\n", posFirst, len(inputString))
    versionMinor = inputString[posFirst:posLast]
    posFirst = inputString.find("#define ITOM_VERSION_PATCH ", 0, len(inputString)) + len("#define ITOM_VERSION_PATCH ")
    posLast = inputString.find("\n", posFirst, len(inputString))
    versionPath = inputString[posFirst:posLast]
    posFirst = inputString.find("#define ITOM_VERSION_STR ", 0, len(inputString)) + len("#define ITOM_VERSION_STR ")
    posLast = inputString.find("\n", posFirst, len(inputString))
    versionString = inputString[posFirst:posLast-1] + '\\0\"'
except:
    raise RuntimeError("Reading /Qitom/global.h failed")

inputString = ''
try:
    inputFile = open(repositoryPath+"/Qitom/version.rc.in", "r")
    inputString = inputFile.read()
    inputFile.close()
except:
    raise RuntimeError("Reading templatefile failed")

inputString = inputString.replace('$ITOM_VERSION_MAJOR$', versionMajor)
inputString = inputString.replace('$ITOM_VERSION_MINOR$', versionMinor)
inputString = inputString.replace('$ITOM_VERSION_PATCH$', versionPath)
inputString = inputString.replace('$CurrentItomVersionString$', versionString)
inputString = inputString.replace('$CopyRightCommment$', copyrightStuff)
inputString = inputString.replace('$CurrentItomVersionStringWithApi$', currentVersionApiInfo)

try:
    outputFile = open(destinationFolder+"/Qitom/version.rc", "w")
    outputFile.write(inputString)
    outputFile.close()
except:
    raise RuntimeError("Writing new version.rc failed")






