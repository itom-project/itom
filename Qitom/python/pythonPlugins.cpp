/* ********************************************************************
    itom software
    URL: http://www.uni-stuttgart.de/ito
    Copyright (C) 2020, Institut fuer Technische Optik (ITO),
    Universitaet Stuttgart, Germany

    This file is part of itom.
  
    itom is free software; you can redistribute it and/or modify it
    under the terms of the GNU Library General Public Licence as published by
    the Free Software Foundation; either version 2 of the Licence, or (at
    your option) any later version.

    itom is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library
    General Public Licence for more details.

    You should have received a copy of the GNU Library General Public License
    along with itom. If not, see <http://www.gnu.org/licenses/>.
*********************************************************************** */

#include "pythonPlugins.h"
#include "pythonDataObject.h"
#include "pythonQtConversion.h"
#include "pythonCommon.h"

#if (defined linux) | (defined CMAKE)
    #include "structmember.h"
#else
    #include "structmember.h"   //python structmember
#endif
#include "../../AddInManager/addInManager.h"
#include "../AppManagement.h"
#include <qlist.h>
#include <qmap.h>
#include <qobject.h>
#include "pythonQtSignalMapper.h"

#include <qsharedpointer.h>
#include "../helper/sharedPointerHelper.h"
#include "../../AddInManager/paramHelper.h"
#include "../../common/helperCommon.h"

#include "pythontParamConversion.h"
#include "pythonSharedPointerGuard.h"
#include <qdockwidget.h>
#include <qaction.h>

using namespace ito;

//#include "./memoryCheck/setDebugNew.h"
//#include "./memoryCheck/reportingHook.h"

namespace ito
{

//----------------------------------------------------------------------------------------------------------------------------------
/** Helper function that accepts a python parameter list and returns pointers to the parameters' values and a list with their types
*   @param [in]   args      list with python parameters
*   @param [in]   length    number of parameters passed
*   @param [out]  cargs     pointers to the parsed parameters
*   @param [out]  cargt     list with the parameter's types
*   @return                 return 0 if all parameters passed could be parsed to a known type, -1 otherwise
*
*   The function accepts a list of python parameters and tries to parse them to make them available to c/c++ functions. The found
*   parameters pointers are given back in the cargs array ant the parameters' types in the cargt array. To free the generated lists
*   use the \ref freeParams function.
*/
int parseParams(PyObject *args, int length, char **&cargs, char *&cargt)
{
   PyObject *tempPyObj = NULL;
   cargs = (char **)calloc(length, sizeof(char*));
   cargt = (char *)calloc(length, sizeof(char));

   tempPyObj = PyTuple_GetItem(args, 0);

   for (int n = 0; n < length; n++)
   {
      tempPyObj = PyTuple_GetItem(args, n);
      if (PyLong_CheckExact(tempPyObj))
      {
         cargs[n] = (char*)malloc(sizeof(long));
         (*(long*)cargs[n]) = PyLong_AsLong(tempPyObj);
         cargt[n] = 'l';
      }
      else if (PyFloat_CheckExact(tempPyObj))
      {
         cargs[n] = (char*)malloc(sizeof(double));
         (*(double*)cargs[n]) = PyFloat_AsDouble(tempPyObj);
         cargt[n] = 'f';
      }
      else if (PyComplex_CheckExact(tempPyObj))
      {
         cargs[n] = (char*)malloc(sizeof(Py_complex));
         (*(Py_complex*)cargs[n]) = PyComplex_AsCComplex(tempPyObj);
         cargt[n] = 'c';
      }
      else if (PyUnicode_Check(tempPyObj))
      {
         bool ok = false;
         QByteArray ba = PythonQtConversion::PyObjGetBytes(tempPyObj,false,ok);
         cargs[n] = ba.data();
         cargt[n] = 's';
      }
      else if (Py_TYPE(tempPyObj) == &PythonPlugins::PyDataIOPluginType)
      {
         cargt[n] = 'o';
         cargs[n] = (char*)(((PythonPlugins::PyDataIOPlugin *)tempPyObj)->dataIOObj);
      }
      else if (Py_TYPE(tempPyObj) == &PythonPlugins::PyActuatorPluginType)
      {
         cargt[n] = 'o';
         cargs[n] = (char*)(((PythonPlugins::PyActuatorPlugin *)tempPyObj)->actuatorObj);
      }
      else
      {
          PyErr_Format(PyExc_TypeError, "type of parameter %i cannot be parsed: %s", n+1, tempPyObj->ob_type->tp_name);
          return -1;
      }
   }

   return 0;
}

//----------------------------------------------------------------------------------------------------------------------------------
/** frees parameter and parameter type arrays generated by the \ref parseParams function
*   @param [in] length  number of parameters
*   @param [in] cargt   array with parameter types
*   @param [in] cargs   array with the parameter pointers / values
*   @return             0
*
*   The function frees the arrays generated by the \ref parseParams function, i.e. the array with the parsed parameter values and the
*   array with their types.
*/
int freeParams(int length, char *&cargt, char **&cargs)
{
   for (int n = 0; n < length; n++)
   {
      if ((cargt[n] == 'l') || (cargt[n] == 'f') || (cargt[n] == 'c'))
      {
         free(cargs[n]);
      }
   }

   free(cargs);
   free(cargt);

   return 0;
}

//----------------------------------------------------------------------------------------------------------------------------------
/** returns the names of the parameters available in a plugin
*   @param [in] aib the plugin for which the parameter names are requested
*   @return     python object with a string list with the parameters' names
*/
PyObject * getParamList(ito::AddInBase *aib)
{
    PyObject *result = NULL;
    QMap<QString, ito::Param> *paramList = NULL;
    const char *name;

    aib->getParamList(&paramList);

    if (paramList)
    {
        result = PyList_New(0);
        QMap<QString, ito::Param>::const_iterator paramIt;
        PyObject *temp = NULL;

        for (paramIt = paramList->constBegin(); paramIt != paramList->constEnd(); ++paramIt)
        {
            name = paramIt.value().getName();
            if (name)
            {
                temp = PyUnicode_DecodeLatin1(name, strlen(name), NULL); //new ref
                PyList_Append(result, temp);
            }
            else
            {
                temp = PyUnicode_FromString("<invalid name>"); //new ref
                PyList_Append(result, temp);
            }
            Py_XDECREF(temp);
        }
    }

    return result;
}


//----------------------------------------------------------------------------------------------------------------------------------
/** returns the all informations of the parameters available in a plugin
*   @param [in] aib     the plugin for which the parameter names are requested
*   @param [in] args    1 Item-Vector with bool request for additional dictionary return
*   @return     python list of python tuple with the parameters' names, min, max, current value, (infostring)
*/
PyObject * getParamListInfo(ito::AddInBase *aib, PyObject *args)
{
   PyObject *result = NULL;
   int length = PyTuple_Size(args);
   int output = 0;

   QMap<QString, ito::Param> *paramList = NULL;

   aib->getParamList(&paramList);

    if (length == 1)
    {
        if (!PyArg_ParseTuple(args, "i", &output))
        {
            PyErr_SetString(PyExc_ValueError, "wrong input parameter");
            return NULL;
        }
    }
    else if (length > 1)
    {
        PyErr_SetString(PyExc_ValueError, "wrong number of input arguments");
        return NULL;
    }

    if (paramList)
    {
        if (output == 0)
            std::cout << "Plugin parameters are:\n";

        QVector<ito::Param> parameter = paramList->values().toVector();
        result = printOutParams(&parameter, false, true, -1, output == 0);
    }
    else
    {
        result = PyDict_New();
        if (output == 0)
            std::cout << " \nPlugin does not accept parameters! \n";
    }

   //std::cout << "\n";

    if ((length == 0) || (output==0))
    {
        Py_DECREF(result);
        Py_RETURN_NONE;
    }
    else
        return result;

}

//----------------------------------------------------------------------------------------------------------------------------------
/** returns a dictionary with all meta information of one parameter
*   @param [in] aib     the plugin for which the parameter names are requested
*   @param [in] args    1 Item-Vector with bool request for additional dictionary return
*   @return     python list of python tuple with the parameters' names, min, max, current value, (infostring)
*/
PyObject * getParamInfo(ito::AddInBase *aib, PyObject *args)
{
    PyObject *result = NULL;
    char *name = nullptr;// = "";

    if (!PyArg_ParseTuple(args, "s", &name))
    {
        return NULL;
    }

    QMap<QString, ito::Param> *paramList = NULL;
    aib->getParamList(&paramList);

    if (paramList->contains(name))
    {
        const ito::Param &p = (*paramList)[name];
        return parseParamMetaAsDict(p.getMeta());
    }
    else
    {
        return PyErr_Format(PyExc_ValueError, "parameter '%s' does not exist", name);
    }
}

//----------------------------------------------------------------------------------------------------------------------------------
PyObject* plugin_showConfiguration(ito::AddInBase *aib)
{
    ItomSharedSemaphoreLocker locker(new ItomSharedSemaphore());
    ito::RetVal retval;

    if (aib)
    {
        if ((qobject_cast<QApplication*>(QCoreApplication::instance())) && aib->hasConfDialog())
        {
            ito::AddInManager *aim = qobject_cast<ito::AddInManager*>(AppManagement::getAddInManager());
            QMetaObject::invokeMethod(aim, "showConfigDialog", Q_ARG(ito::AddInBase*, aib), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore()));

            locker.getSemaphore()->wait(-1);
            retval += locker.getSemaphore()->returnValue;
        }
        else
        {
            retval += ito::RetVal(ito::retError, 0, QObject::tr("plugin has no configuration dialog").toLatin1().data());
        }
    }

    if (!PythonCommon::setReturnValueMessage(retval, "showConfiguration", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    Py_RETURN_NONE;
}

//----------------------------------------------------------------------------------------------------------------------------------


/** returns the list of available parameters
*   @param [in] self    the actuator object (python)
*
*   This method simply open the widget
*/
PyObject* plugin_showToolbox(ito::AddInBase *aib)
{
    ItomSharedSemaphoreLocker locker(new ItomSharedSemaphore());
    ito::RetVal retval;

    if (aib)
    {
        ito::AddInManager *aim = qobject_cast<ito::AddInManager*>(AppManagement::getAddInManager());
        if (QMetaObject::invokeMethod(aim, "showDockWidget", Q_ARG(ito::AddInBase*, aib), Q_ARG(int, 1), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore())))
        {
            if (!locker.getSemaphore()->wait(AppManagement::timeouts.pluginGeneral))
            {
                retval += ito::RetVal(ito::retError, 0, QObject::tr("timeout while showing toolbox").toLatin1().data());
            }
            else
            {
                retval += locker.getSemaphore()->returnValue;
            }
        }
        else
        {
            retval += ito::RetVal(ito::retError, 0, QObject::tr("Member 'showDockWidget' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
        }
    }
    if (!PythonCommon::setReturnValueMessage(retval, "showToolbox", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    Py_RETURN_NONE;
}

//----------------------------------------------------------------------------------------------------------------------------------
/** returns the list of available parameters
*   @param [in] self    the actuator object (python)
*
*   This method simply close the widget
*/
PyObject* plugin_hideToolbox(ito::AddInBase *aib)
{
    ItomSharedSemaphoreLocker locker(new ItomSharedSemaphore());
    ito::RetVal retval;

    if (aib)
    {
        ito::AddInManager *aim = qobject_cast<ito::AddInManager*>(AppManagement::getAddInManager());
        if (QMetaObject::invokeMethod(aim, "showDockWidget", Q_ARG(ito::AddInBase*, aib), Q_ARG(int, 0), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore())))
        {
            if (!locker.getSemaphore()->wait(AppManagement::timeouts.pluginGeneral))
            {
                retval += ito::RetVal(ito::retError, 0, QObject::tr("timeout while hiding toolbox").toLatin1().data());
            }
            else
            {
                retval += locker.getSemaphore()->returnValue;
            }
        }
        else
        {
            retval += ito::RetVal(ito::retError, 0, QObject::tr("Member 'showDockWidget' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
        }
    }
    if (!PythonCommon::setReturnValueMessage(retval, "hideToolbox", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    Py_RETURN_NONE;
}



//----------------------------------------------------------------------------------------------------------------------------------
/** returns the names of extended Functionality available in a plugin
*   @param [in] aib the plugin for which the parameter names are requested
*   @return     python object with a string list with the execFuncs' names
*/
PyObject * getExecFuncsList(ito::AddInBase *aib)
{
    PyObject *result = PyList_New(0);

    QMap<QString, ExecFuncParams> *funcList = NULL;
    aib->getExecFuncList(&funcList);

    if (funcList && !funcList->isEmpty())
    {
        QMap<QString, ExecFuncParams>::const_iterator fn;
        for (fn = funcList->constBegin(); fn != funcList->constEnd(); fn++)
        {
            PyObject* temp = NULL;
            QByteArray name = fn.key().toLatin1();
            if (name != "")
            {
                temp = PyUnicode_DecodeLatin1(name.constData(), name.length(), NULL); //new ref
                PyList_Append(result, temp);
            }
            else
            {
                temp = PyUnicode_FromString("<invalid name>"); //new ref
                PyList_Append(result, temp);
            }
            Py_XDECREF(temp);
        }
    }

    return result;
}


//----------------------------------------------------------------------------------------------------------------------------------
/** returns a list of execFunction available in a plugin similar to filterHelp 
*   @param [in] aib     the plugin for which the execFuncs names are requested
*   @param [in] args    2 Item-Vector with integer request for additional dictionary return
*   @return             python dictionary with list of functions or specific dictionary for one execFunc with the parameters' names, min, max, current value, (infostring)
*/
PyObject * getExecFuncsInfo(ito::AddInBase *aib, PyObject *args, PyObject *kwds)
{
    const char *kwlist[] = {"funcName", "detailLevel", NULL};
    char* funcName = NULL;
    int detailLevel = 0; //0: show text in std::cout, 1: return dict or list with items

    PyObject *result = NULL;
    QString funcNameString("");

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "|si", const_cast<char**>(kwlist), &funcName, &detailLevel))
    {
        return NULL;
    }

    QMap<QString, ExecFuncParams> *funcList = NULL;
    bool printToStream = (detailLevel != 1);

    aib->getExecFuncList(&funcList);
    result = PyDict_New();

    if (funcList && funcList->size() > 0)
    {
        if (funcName != NULL)
        {
            funcNameString = QString(funcName);
        }

        QStringList execFuncs = funcList->keys();
        PyObject *execFuncslist = NULL;

        if (execFuncs.size() > 0)
        {
            if (!funcNameString.isEmpty() && execFuncs.contains(funcNameString))    // got an exect match
            {
                (*funcList)[funcNameString].infoString;
                (*funcList)[funcNameString].paramsMand;
                (*funcList)[funcNameString].paramsOpt;

                if (printToStream)
                {
                    std::cout << "Parameters\n-----------------\n";
                }
                const QVector<ito::Param> *parameter = &((*funcList)[funcNameString].paramsMand);
                if (parameter->size() > 0)
                {
                    if (printToStream)
                    {
                        std::cout << "\nMandatory parameters:\n";
                    }
                    execFuncslist = printOutParams(parameter, false, true, -1, printToStream);
                    PyDict_SetItemString(result, "Mandatory Parameters", execFuncslist);
                    Py_DECREF(execFuncslist);
                }
                else if (printToStream)
                {
                    std::cout << "\nMandatory parameters:\n- no mandatory parameters -";
                }

                parameter = &((*funcList)[funcNameString].paramsOpt);
                if (parameter->size() > 0)
                {
                    if (printToStream)
                    {
                        std::cout << "\nOptional parameters:\n";
                    }
                    execFuncslist = printOutParams(parameter, false, true, -1, printToStream);
                    PyDict_SetItemString(result, "Optional Parameters", execFuncslist);
                    Py_DECREF(execFuncslist);
                }
                else if (printToStream)
                {
                    std::cout << "\nOptional parameters:\n- no optional parameters -";
                }
                std::cout << "\n";

                parameter = &((*funcList)[funcNameString].paramsOut);
                if (parameter->size())
                {
                    if (printToStream)
                    {
                        std::cout << "\nOutput values:\n";
                    }
                    execFuncslist = printOutParams(parameter, false, true, -1, printToStream);
                    PyDict_SetItemString(result, "Output Parameters", execFuncslist);
                    Py_DECREF(execFuncslist);
                }
                else if (printToStream)
                {
                    std::cout << "\nOutput values:\n- no output parameters -";
                }
            
            }
            else
            {
                execFuncs.sort();
                
                if (printToStream)
                {
                    std::cout << "Plugin 'exec' functions are:\n\n";
                }

                QList<QPair<QString, QString> > outPut;
                outPut.clear();
                int longname = 0;

                for (int funcs = 0; funcs < execFuncs.size(); funcs++)
                {  
                    if (longname < execFuncs.value(funcs).length())
                        longname = execFuncs.value(funcs).length();

                    outPut.append(QPair<QString, QString>(execFuncs.value(funcs), (*funcList)[execFuncs.value(funcs)].infoString));

                    PyObject *text = PythonQtConversion::QByteArrayToPyUnicodeSecure((*funcList)[execFuncs.value(funcs)].infoString.toLatin1());
                    PyDict_SetItemString(result, execFuncs.value(funcs).toLatin1().data() , text);
                    Py_DECREF(text);
                    text = NULL;
                }
                longname+= 3;
                if (printToStream)
                {
                    std::cout << "No " << QString("Name").leftJustified(longname, ' ', false).toLatin1().data() << "   \tInfostring\n";

                    for (int funcs = 0; funcs < outPut.size(); funcs++)
                    {
                        std::cout << funcs << "  " << outPut.value(funcs).first.leftJustified(longname, ' ', false).toLatin1().data() << "  \t'" << outPut.value(funcs).second.toLatin1().data() << "'\n";
                    }

                    std::cout << "\nUse inst.getExecFuncsInfo('execfuncname') to get detailed information about one 'exec' function.\n";
                }
            }
        }
        else if (printToStream)
        {
            std::cout << " \nPlugin has no additional 'exec' functions. \n";        
        }

    }
    else if (printToStream)
    {
        std::cout << " \nPlugin has no additional 'exec' functions. \n";
    }

    if (printToStream)
    {
        Py_DECREF(result);
        Py_RETURN_NONE;
    }
    else
    {
        return result;
    }

}

//----------------------------------------------------------------------------------------------------------------------------------
/** returns the name of a python plugin
*   @param [in] addInObj    the plugin whoes name should be returned
*   @return     the plugin name
*/
PyObject* getName(ito::AddInBase *addInObj)
{
    ito::RetVal ret = ito::retOk;

    ItomSharedSemaphoreLocker locker(new ItomSharedSemaphore());
    QSharedPointer<ito::Param> qsParam(new ito::Param("name", ito::ParamBase::String, "", NULL));

    if (QMetaObject::invokeMethod(addInObj, "getParam", Q_ARG(QSharedPointer<ito::Param>, qsParam), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore())))
    {
        bool timeout = false;

        while (!locker.getSemaphore()->wait(AppManagement::timeouts.pluginGeneral))
        {
            if (!addInObj->isAlive())
            {
                ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while getting name parameter").toLatin1().data());
                timeout = true;
                break;
            }
        }

        if (!timeout)
        {
            ret += locker.getSemaphore()->returnValue;
        }
    }
    else
    {
        ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'getParam' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
    }

    if (!PythonCommon::setReturnValueMessage(ret, "getName", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    //return PyUnicode_FromString((*qsParam).getVal<char*>());
    char* val = (*qsParam).getVal<char*>();
    QString val2 = QString("%1 (%2)").arg(val).arg(addInObj->getRefCount());
    QByteArray val2_ = val2.toLatin1();
    const char* val3 = val2_.constData();
    return PyUnicode_DecodeLatin1(val3, strlen(val3), NULL);
}

//----------------------------------------------------------------------------------------------------------------------------------

PyObject* execFunc(ito::AddInBase *aib, PyObject *args, PyObject *kwds)
{
    ito::RetVal ret = ito::retOk;
    QMap<QString, ExecFuncParams> *funcList;
    QSharedPointer<QVector<ito::ParamBase> > paramsMand(new QVector<ito::ParamBase>(), PythonPlugins::paramBaseVectorDeleter); //the deleter are important, else it crashes sometimes if the execFunc of the plugin releases the waitCond much earlier (nobody knows why)
    QSharedPointer<QVector<ito::ParamBase> > paramsOpt(new QVector<ito::ParamBase>(), PythonPlugins::paramBaseVectorDeleter); //the deleter are important, else it crashes sometimes if the execFunc of the plugin releases the waitCond much earlier (nobody knows why)
    QSharedPointer<QVector<ito::ParamBase> > paramsOut(new QVector<ito::ParamBase>(), PythonPlugins::paramBaseVectorDeleter); //the deleter are important, else it crashes sometimes if the execFunc of the plugin releases the waitCond much earlier (nobody knows why)
    QString name;
    int argsLength = PyTuple_Size(args);
    PyObject *pyObj = NULL;
    bool ok;

    if (argsLength < 1)
    {
        ret += ito::RetVal(ito::retError, 0, QObject::tr("you must provide at least one parameter with the name of the function").toLatin1().data());
    }
    else
    {
        pyObj = PyTuple_GET_ITEM(args,0); //borrowed
        name = PythonQtConversion::PyObjGetString(pyObj,true,ok);
        if (!ok)
        {
            ret += ito::RetVal(ito::retError, 0, QObject::tr("the first function name parameter can not be interpreted as string").toLatin1().data());
        }
    }
    
    if (!ret.containsError())
    {
        ret += aib->getExecFuncList(&funcList);
        QMap<QString, ExecFuncParams>::const_iterator it = funcList->constFind(name);

        if (it == funcList->constEnd())
        {
            ret += ito::RetVal::format(ito::retError, 0, QObject::tr("plugin does not provide an execution of function '%s'").toLatin1().data(),name.toLatin1().data());
        }
        else
        {
            //split first argument from args
            pyObj = PyTuple_GetSlice(args, 1, argsLength); //new ref

            //parses python-parameters with respect to the default values given py (*it).paramsMand and (*it).paramsOpt and returns default-initialized ParamBase-Vectors paramsMand and paramsOpt.
            ret += parseInitParams(&(it->paramsMand), &(it->paramsOpt), pyObj, kwds, *paramsMand, *paramsOpt);

            //makes deep copy from default-output parameters (*it).paramsOut and returns it in paramsOut (ParamBase-Vector)
            ret += copyParamVector(&(it->paramsOut), *paramsOut);

            Py_XDECREF(pyObj);

            if (!ret.containsError())
            {
                ItomSharedSemaphoreLocker locker(new ItomSharedSemaphore());
                if (QMetaObject::invokeMethod(aib, "execFunc", Q_ARG(QString, name), Q_ARG(QSharedPointer<QVector<ito::ParamBase> >, paramsMand), Q_ARG(QSharedPointer<QVector<ito::ParamBase> >, paramsOpt), Q_ARG(QSharedPointer<QVector<ito::ParamBase> >, paramsOut), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore())))
                {
                    bool timeout = false;

                    while (!locker.getSemaphore()->wait(AppManagement::timeouts.pluginGeneral))
                    {
                        if (!aib->isAlive())
                        {
                            ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while calling specific function in plugin.").toLatin1().data());
                            timeout = true;
                            break;
                        }
                    }

                    if (!timeout)
                    {
                        ret += locker.getSemaphore()->returnValue;
                    }
                }
                else
                {
                    ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'execFunc' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
                }
            }

        }
    }

    QByteArray name_ba = name.toLatin1();
    if (!PythonCommon::setReturnValueMessage(ret, name_ba.data(), PythonCommon::execFunc))
    {
        return NULL;
    }
    else
    {
        if (paramsOut->size() == 0)
        {
            Py_RETURN_NONE;
        }
        else if (paramsOut->size() == 1)
        {
            PyObject* out = PythonParamConversion::ParamBaseToPyObject((*paramsOut)[0]); //new ref
            if (!PythonCommon::setReturnValueMessage(ret, name_ba.data(), PythonCommon::execFunc))
            {
                return NULL;
            }
            else
            {
                return out;
            }
        }
        else
        {
            //parse output vector to PyObject-Tuple
            PyObject* out = PyTuple_New(paramsOut->size());
            PyObject* temp;
            Py_ssize_t i = 0;

            foreach(const ito::ParamBase &p, *paramsOut)
            {
                temp = PythonParamConversion::ParamBaseToPyObject(p); //new ref
                if (temp)
                {
                    PyTuple_SetItem(out,i,temp); //steals ref
                    i++;
                }
                else
                {
                    break;
                }
            }
            if (!PythonCommon::setReturnValueMessage(ret, name_ba.data(), PythonCommon::execFunc))
            {
                Py_DECREF(out);
                return NULL;
            }
            else
            {
                return out;
            }
        }
    }

    
}

//----------------------------------------------------------------------------------------------------------------------------------
/** return a parameter value
*   @param [in] addInObj    the addIn whoes parameter is requested
*   @param [in] args        the parameter name
*   @return     python object with the parameter value on success (parameter exists), NULL otherwise
*
*   The function tries to retrieve the value of the parameter with the name given in args. If the parameter does not exist
*   NULL is returned. To actually retrieve the value the getParam function of the plugin is invoked.
*/
PyObject* getParam(ito::AddInBase *addInObj, PyObject *args)
{
    PyObject *result = NULL;
    const char *paramName = NULL;
    //bool paramNameCheck;

    ItomSharedSemaphoreLocker locker(new ItomSharedSemaphore());

    ito::RetVal ret = ito::retOk;

    if (!PyArg_ParseTuple(args, "s", &paramName))
    {
        PyErr_SetString(PyExc_ValueError, "no parameter name specified");
        return NULL;
    }

    //check parameter name and split it into its components
    bool hasIndex;
    QString nameOnly;
    int index;
    QString additionalTag;
    if(ito::ParamHelper::parseParamName(paramName, nameOnly, hasIndex, index, additionalTag).containsError())
    {
        PyErr_SetString(PyExc_TypeError, "parameter name is invalid. It must have the following format: paramName['['index']'][:additionalTag]");
        return NULL;
    }

    //now get pointer to the parameter-map from plugin and check whether paramName is available
    QMap<QString, Param> *params;
    QMap<QString, Param>::iterator it;
    (addInObj)->getParamList(&params); //always returns ok

    //find parameter in params
    it = params->find(nameOnly);
    if (it == params->end())
    {
        PyErr_Format(PyExc_ValueError, "Parameter '%s' not contained in plugin.", nameOnly.toLatin1().data());
        return NULL;
    }

    //create a container for the returned parameter. This value is initialized by the full name including the type of the corresponding parameter of the m_params map.
    //Usually, this type is correct, such that setVal can directly used within the plugin. However, the plugin is also allowed to change the type.
    QSharedPointer<ito::Param> qsParam(new ito::Param(paramName, it->getType(false)));
    
    if (QMetaObject::invokeMethod(addInObj, "getParam", Q_ARG(QSharedPointer<ito::Param>, qsParam), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore())))
    {
        bool timeout = false;
        while (!locker.getSemaphore()->wait(AppManagement::timeouts.pluginGeneral))
        {
            if (!addInObj->isAlive())
            {
                ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while getting parameter").toLatin1().data());
                timeout = true;
                break;
            }
        }

        if (!timeout)
        {
            ret += locker.getSemaphore()->returnValue;
        }
    }
    else
    {
        ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'getParam' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
    }

    result = ito::PythonParamConversion::ParamBaseToPyObject(*qsParam);

    if (!PythonCommon::setReturnValueMessage(ret, "getParam", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    return result;
}


//general docstrings BEGIN
PyDoc_STRVAR(pyPluginName_doc, "name() -> returns the plugin name\n\
\n\
Returns \n\
-------- \n\
name : {str} \n\
    name of the plugin, which corresponds to `getParam('name')` \n\
\n\
See Also \n\
--------- \n\
getParam");

PyDoc_STRVAR(pyPluginGetExecFuncsList_doc, "getExecFuncsList() -> returns a list of the names of the additional Functions of this plugin\n\
\n\
Each plugin may define a set of functions, extending the standard interface. These functions are not common to plugins of the same type. \n\
These functions are executed using instance.exec(\"funcname\",params)\
\n\
to check exact function call use instance.getExecFuncsInfo()\
getExecFuncsInfo");

PyDoc_STRVAR(pyPluginGetParamList_doc, "getParamList() -> returns a list of the names of the internal parameters of the plugin\n\
\n\
Each plugin defines a set of parameters, where each parameter has got a name and maps to any value. The value is represented by \n\
the C++ class ito::ParamBase and can have one of the following types: \n\
\n\
* String \n\
* Char \n\
* Integer \n\
* Double \n\
* CharArray \n\
* IntegerArray \n\
* DoubleArray \n\
* DataObject \n\
* PolygonMesh \n\
* PointCloud \n\
* Another plugin instance \n\
\n\
Using one of the parameter names, its current value can be obtained by `getParam('name')` and \n\
is writable by `setParam('name', newValue)` (if not read-only) \n\
\n\
Returns \n\
------- \n\
out : {list} \n\
    list of parameter names \n\
\n\
See Also \n\
--------- \n\
getParam, setParam, getParamListInfo");

PyDoc_STRVAR(pyPluginGetParamListInfo_doc, "getParamListInfo(detailLevel = 1) -> prints detailed information about all plugin parameters. \n\
\n\
Each plugin defines a set of parameters, where each parameter has got a name and maps to any value. The value is represented by \n\
the C++ class ito::ParamBase and can have one of the following types: \n\
\n\
* String \n\
* Char \n\
* Integer \n\
* Double \n\
* CharArray \n\
* IntegerArray \n\
* DoubleArray \n\
* DataObject \n\
* PolygonMesh \n\
* PointCloud \n\
* Another plugin instance \n\
\n\
Using one of the parameter names, its current value can be obtained by `getParam('name')` and \n\
is writable by `setParam('name', newValue)` (if not read-only) \n\
\n\
This method prints a detailed table with the name, current value, description string and further meta information of every plugin parameter. \n\
Additionally, the column R/W indicates if this parameter is writable or read-only. \n\
\n\
Parameters \n\
----------- \n\
detailLevel : {dict}, optional \n\
    if `detailLevel == 1`, function returns a dictionary with parameters, else None is returned and the output is printed in a readable form to the console [default]\n\
\n\
Returns \n\
------- \n\
out : {None, dict} \n\
    If `detailLevel == 1`, a dictionary containing all printed information is returned \n\
\n\
See Also \n\
---------- \n\
getParam, setParam, getParamInfo, getParamList");

PyDoc_STRVAR(pyPluginGetParamInfo_doc, "getParamInfo(name) -> returns dictionary with meta information of parameter 'name'.");

PyDoc_STRVAR(pyPluginGetParam_doc, "getParam(name) -> current value of the plugin parameter 'name'.\n\
\n\
Returns the current value of the internal plugin parameter with 'name'. The type of the returned value depends on the \n\
real type of the internal plugin, which may be: \n\
\n\
* String -> str \n\
* Char, Integer -> int \n\
* Double -> float \n\
* CharArray, IntegerArray -> tuple of int \n\
* DoubleArray -> tuple of float \n\
* DataObject -> dataObject \n\
* PolygonMesh -> polygonMesh \n\
* PointCloud -> pointCloud \n\
* Another plugin instance -> dataIO or actuator \n\
\n\
The name of the parameter must have the following form: \n\
\n\
* name \n\
* name:additionalTag (additionalTag can be a special feature of some plugins) \n\
* name[index] (only possible if parameter is an array type and you only want to get one single value, specified by the integer index [0,nrOfArrayItems-1]) \n\
* name[index]:additionalTag \n\
\n\
Parameters \n\
----------- \n\
name : {str}\n\
    name of the requested parameter\n\
\n\
Returns \n\
------- \n\
out : {variant}\n\
    value of the parameter \n\
\n\
Raises \n\
------- \n\
ValueError \n\
    if parameter does not exist \n\
\n\
See Also \n\
--------- \n\
setParam, getParamList, getParamListInfo");

PyDoc_STRVAR(pyPluginSetParam_doc, "setParam(name, value) -> sets parameter 'name' to the given value.\n\
\n\
Sets the internal plugin parameter with 'name' to a new value. The plugin itsself can decide whether the given value is \n\
accepted as new value. This may depend on the type of the given value, but also on the allowed value range indicated by \n\
further meta information of the internal parameter. Parameters that have the read-only flag set can not be reset. \n\
\n\
The name of the parameter must have the following form: \n\
\n\
* name \n\
* name:additionalTag (additionalTag can be a special feature of some plugins) \n\
* name[index] (only possible if parameter is an array type and you only want to get one single value, specified by the integer index [0,nrOfArrayItems-1]) \n\
* name[index]:additionalTag \n\
\n\
Parameters \n\
----------- \n\
name : {str}\n\
    name of the parameter\n\
value : {str, int, double, ...}\n\
    value that will be set. Only the name and existance of the parameter is checked before passing the request to the plugin. \n\
    The plugin itsself is responsible for further validations (including read-only attribute). \n\
\n\
See Also \n\
--------- \n\
getParam, getParamList, getParamListInfo");

PyDoc_STRVAR(pyPluginShowToolbox_doc, "showToolbox() -> open toolbox of the plugin \n\
\n\
Raises \n\
------ \n\
RuntimeError \n\
    if plugin does not provide a toolbox \n\
\n\
See Also \n\
--------- \n\
hideToolbox");

PyDoc_STRVAR(pyPluginHideToolbox_doc, "hideToolbox() -> hides toolbox of the plugin \n\
\n\
Raises \n\
------ \n\
RuntimeError \n\
    if plugin does not provide a toolbox \n\
\n\
See Also \n\
--------- \n\
showToolbox");

PyDoc_STRVAR(pyPluginShowConfiguration_doc, "showConfiguration() -> show configuration dialog of the plugin\n\
\n\
Raises \n\
------- \n\
RuntimeError \n\
    if plugin does not provide a configuration dialog");

PyDoc_STRVAR(pyPlugInGetExecFuncsInfo_doc, "getExecFuncsInfo([funcName [, detailLevel]]) -> plots a list of available execFuncs or a detailed description of the specified execFunc. \n\
\n\
Every plugin can define further functions, that are called by plugin.exec('funcName' [,param1, param2...]). This can for  \n\
instance be used in order to call specific calibration routines of cameras or actuators. This method allows printing \n\
information about available functions of this type. \n\
\n\
Parameters \n\
----------- \n\
funcName : {str}, optional \n\
    is the fullname or a part of any execFunc-name which should be displayed. \n\
    If funcName is none or no execFunc matches funcName casesensitiv a list with all suitable execFuncs is given. \n\
detailLevel : {dict}, optional \n\
    if `detailLevel == 1`, function returns a dictionary with parameters, else information is print to the command line [default: 0]. \n\
\n\
Returns \n\
------- \n\
out : {None or dict}\n\
    depending on the value of *detailLevel*. \n\
\n\
See Also \n\
-------- \n\
exec");

PyDoc_STRVAR(PyPlugin_execFunc_doc, "exec(funcName [, param1, ...]) -> invoke the function 'funcName' registered as execFunc within the plugin.\n\
\n\
Every plugin can define further functions that can for instance be used in order to call specific calibration routines \n\
of cameras or actuators. This general method is used to call one of these specific functions registered under `funcName`. \n\
\n\
Parameters \n\
----------- \n\
funcName : {str} \n\
    The name of the function\n\
param1 : {variant}, optional \n\
    Further parameters depending on the requirements of the specific function.\n\
\n\
Returns \n\
------- \n\
out : {variant, list of variants}.\n\
    The return values depend on the function itself.\n\
\n\
See Also \n\
-------- \n\
getExecFuncsInfo");
//general docstrings END



//----------------------------------------------------------------------------------------------------------------------------------
/** set a parameter value
*   @param [in] addInObj    the addIn whoes parameter is requested
*   @param [in] args        the parameter name and value in a python object
*   @return     Py_Return_None on success, NULL otherwise
*
*   The function tries to set the value of the parameter with the name given in args. If the parameter does not exist
*   or is incompatible with the value passed, NULL is returned. To actually set the value the setParam function of the plugin is invoked.
*/
PyObject* setParam(ito::AddInBase *addInObj, PyObject *args)
{
    const char *key = NULL;
    ItomSharedSemaphore *waitCond = NULL;
    ito::RetVal ret = ito::retOk;
    PyObject *value = NULL;

    QSharedPointer<ito::ParamBase> qsParam;

    if(!PyArg_ParseTuple(args, "sO", &key, &value))
    {
        PyErr_SetString(PyExc_ValueError, "Parameter name and its value required.");
        return NULL;
    }

    //check parameter name and split it into its components
    bool hasIndex;
    QString paramName;
    int index;
    QString additionalTag;
    if(ito::ParamHelper::parseParamName(key, paramName, hasIndex, index, additionalTag).containsError())
    {
        PyErr_SetString(PyExc_TypeError, "parameter name is invalid. It must have the following format: paramName['['index']'][:additionalTag]");
        return NULL;
    }

    //now get pointer to the parameter-map from plugin and check whether paramName is available
    QMap<QString, Param> *params;
    QMap<QString, Param>::iterator it;
    addInObj->getParamList(&params); //always returns ok

    //find parameter in params
    it = params->find(paramName);
    if (it == params->end())
    {
        PyErr_Format(PyExc_ValueError, "Parameter '%s' not contained in plugin.", paramName.toLatin1().data());
        return NULL;
    }

    if(hasIndex)
    {
        switch(it->getType())
        {
        case ito::ParamBase::CharArray:
            qsParam = PythonParamConversion::PyObjectToParamBase(value, key, ret, ito::ParamBase::Char, false);
            break;
        case ito::ParamBase::IntArray:
            qsParam = PythonParamConversion::PyObjectToParamBase(value, key, ret, ito::ParamBase::Int, false);
            break;
        case ito::ParamBase::DoubleArray:
            qsParam = PythonParamConversion::PyObjectToParamBase(value, key, ret, ito::ParamBase::Double, false);
            break;
        default:
            PyErr_Format(PyExc_ValueError, "Parameter '%s' of plugin is no array.", paramName.toLatin1().data());
            return NULL;
        }
    }
    else
    {
        qsParam = PythonParamConversion::PyObjectToParamBase(value, key, ret, it->getType(), false);
    }

    if(ret.containsError())
    {
        PyErr_Format(PyExc_ValueError, "The given value could not be transformed to type of parameter.", paramName.toLatin1().data());
        return NULL;
    }
    else
    {
        bool timeout = false;
        waitCond = new ItomSharedSemaphore();
        if (QMetaObject::invokeMethod(addInObj, "setParam", Q_ARG(QSharedPointer<ito::ParamBase>, qsParam), Q_ARG(ItomSharedSemaphore*, waitCond)))
        {

            while (!waitCond->wait(AppManagement::timeouts.pluginGeneral))
            {
                if (!addInObj->isAlive())
                {
                    ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout.").toLatin1().data());
                    timeout = true;
                    break;
                }
            }

            if (!timeout)
            {
                ret += waitCond->returnValue;
            }
        }
        else
        {
            ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'setParam' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
        }

         waitCond->deleteSemaphore();
         waitCond = NULL;
    }

    if (!PythonCommon::setReturnValueMessage(ret, "setParam", PythonCommon::invokeFunc))
    {
        return NULL;
    }
    
    Py_RETURN_NONE;
}


//----------------------------------------------------------------------------------------------------------------------------------
/** desctructor for actuator object in python
*   @param [in] self
*
*   Destructs an actuator object (plugin), i.e. deletes the according python variable and invokes
*   the closeAddIn function. The object itself is only deleted if the object's reference
*   counter is zero.
*/
void PythonPlugins::PyActuatorPlugin_dealloc(PyActuatorPlugin* self)
{
    if (self->weakreflist != NULL)
    {
        PyObject_ClearWeakRefs((PyObject *) self);
    }

    if (self->actuatorObj)
    {
        ito::AddInInterfaceBase *aib = self->actuatorObj->getBasePlugin();
        if (!aib)
        {
            std::cerr << "error closing plugin" << std::endl;
            //PyErr_Format(PyExc_RuntimeError, "error closing plugin");
        }
        else
        {
            ito::RetVal retval(ito::retOk);
            ito::AddInManager *aim = qobject_cast<ito::AddInManager*>(AppManagement::getAddInManager());

            ItomSharedSemaphore *waitCond = new ItomSharedSemaphore();
            
            if (QMetaObject::invokeMethod(aim, "closeAddIn", Q_ARG(ito::AddInBase*, (ito::AddInBase*)self->actuatorObj), Q_ARG(ItomSharedSemaphore*, waitCond)))
            {
                waitCond->wait(-1);
                retval += waitCond->returnValue;
            }
            else
            {
                retval += ito::RetVal(ito::retError, 0, QObject::tr("Member 'closeAddIn' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
            }

            waitCond->deleteSemaphore();
            waitCond = NULL;
            
            PythonCommon::transformRetValToPyException(retval);
        }
    }
    DELETE_AND_SET_NULL(self->signalMapper);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

//----------------------------------------------------------------------------------------------------------------------------------
/** constructor for actuator object in python
*   @param [in] type
*   @return     new python actuator object
*
*   Creates a new pythonActuator object. The actual actuator object (itom) is only created later.
*/
PyObject* PythonPlugins::PyActuatorPlugin_new(PyTypeObject *type, PyObject* /*args*/, PyObject* /*kwds*/)
{
   PyActuatorPlugin *self = NULL;

   self = (PyActuatorPlugin *)type->tp_alloc(type, 0);
   if (self != NULL)
   {
      self->actuatorObj = NULL;
      self->base = NULL;
      self->weakreflist = NULL;
      self->signalMapper = new PythonQtSignalMapper();
   }

   return (PyObject *)self;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(pyActuatorInit_doc, "actuator(name, *mandparams, *optparams) -> creates new instance of actuator plugin 'name' \n\
\n\
This is the constructor for an `actuator` plugin. It initializes an new instance of the plugin specified by 'name'. \n\
The initialisation parameters are parsed and unnamed parameters are used in their incoming order to fill first \n\
mandatory parameters and afterwards optional parameters. Parameters may be passed with name as well but after \n\
the first named parameter no more unnamed parameters are allowed.\n\
\n\
See pluginHelp(name) for detail information about the specific initialisation parameters.\n\
\n\
Parameters \n\
----------- \n\
name : {str} \n\
    is the fullname (case sensitive) of an 'actuator'-plugin as specified in the plugin-window. \n\
mandparams : {variant(s)} \n\
    arguments corresponding the mandatory initialization parameters. The number of arguments and their order must fit the the required mandatory parameters \n\
optparams : {variant(s)}, optional \n\
    argument corresponding to the optional initialization parameters. If unnamed arguments are used, their order must correspond to the order of the optional parameters, keyword-based parameters are allowed as well. \n\
\n\
Returns \n\
-------- \n\
inst : {actuator} \n\
    new instance of the actuator-plugin");

/** constructor for actuator object (plugin) accessible from python
*   @param [in] self    the according pythonActuator object
*   @param [in] args    unnamed arguments passed to the constructor in python
*   @param [in] kwds    keyword parameters passed to the constructor in pyhton
*   @return             -1 in case an error occured, else 0
*
*   At first the list of available plugins is searched whether the plugin can be found (by name). If it was found
*   the plugin's manadtory ans optional initialization parameters are retrieved and a parameter check is done. In
*   case everything went right a new instance of a plugin is created with the parameters passed to the constructor.
*/
int PythonPlugins::PyActuatorPlugin_init(PyActuatorPlugin *self, PyObject *args, PyObject *kwds)
{
    self->actuatorObj = NULL;

    if (args == NULL) //args is only NULL, instance of actuator is created by a c-code fragment. Then the content of the type-struct has to be filled by the c-code, too.
    {
        return 0;
    }

    int length = PyTuple_Size(args);

    if (length == 0)
    {
        PyErr_SetString(PyExc_ValueError, "no plugin specified");
        return -1;
    }
    else if (length == 1) //!< copy constructor or name only
    {
        PyActuatorPlugin* copyPlugin = NULL;

        if (PyArg_ParseTuple(args, "O!", &PyActuatorPluginType, &copyPlugin))
        {
            //try to increment reference of copyPlugin->actuatorObj
            if (copyPlugin->actuatorObj)
            {
                copyPlugin->actuatorObj->getBasePlugin()->incRef(copyPlugin->actuatorObj);
            }

            self->actuatorObj = copyPlugin->actuatorObj;
            self->base = copyPlugin->base;
            return 0;
        }
    }

    PyErr_Clear();

    QVector<ito::Param> *paramsMand = NULL;
    QVector<ito::Param> *paramsOpt = NULL;
    ito::RetVal retval = ito::retOk;
    int pluginNum = -1;
    PyObject *pnameObj = NULL;
    PyObject *params = NULL;
    QString pluginName = NULL;

    QVector<ito::ParamBase> paramsMandCpy;
    QVector<ito::ParamBase> paramsOptCpy;

    ito::AddInManager *AIM = qobject_cast<ito::AddInManager*>(AppManagement::getAddInManager());
    if (!AIM)
    {
        PyErr_SetString(PyExc_RuntimeError, "no addin-manager found");
        return -1;
    }

    pnameObj = PyTuple_GetItem(args, 0);
    if (PyUnicode_Check(pnameObj))
    {
        bool ok = false;
        pluginName = PythonQtConversion::PyObjGetString(pnameObj,false,ok);
    }
    else
    {
        PyErr_SetString(PyExc_TypeError, "invalid parameters");
        return -1;
    }


    retval = AIM->getInitParams(pluginName, ito::typeActuator, &pluginNum, paramsMand, paramsOpt);
    if (retval.containsWarningOrError())
    {
        PythonCommon::setReturnValueMessage(retval, pluginName, PythonCommon::loadPlugin);

        return -1;
    }


    bool enableAutoLoadParams = false;
    retval = findAndDeleteReservedInitKeyWords(kwds, &enableAutoLoadParams);
    if (retval.containsWarningOrError())
    {
        PythonCommon::setReturnValueMessage(retval, pluginName, PythonCommon::loadPlugin);

        return -1;
    }
    else
    {
        params = PyTuple_GetSlice(args, 1, PyTuple_Size(args));

        if (parseInitParams(paramsMand, paramsOpt, params, kwds, paramsMandCpy, paramsOptCpy) != ito::retOk)
        {
            Py_XDECREF(params);
            PyErr_SetString(PyExc_RuntimeError, "error while parsing parameters.");
            return -1;
        }
        Py_XDECREF(params);

        ItomSharedSemaphore *waitCond = new ItomSharedSemaphore();
        if (QMetaObject::invokeMethod(AIM, "initAddIn", Q_ARG(int, pluginNum), Q_ARG(QString, pluginName), Q_ARG(ito::AddInActuator**, &self->actuatorObj), Q_ARG(QVector<ito::ParamBase>*, &paramsMandCpy), Q_ARG(QVector<ito::ParamBase>*, &paramsOptCpy), Q_ARG(bool, enableAutoLoadParams), Q_ARG(ItomSharedSemaphore*, waitCond)))
        {
            waitCond->wait(-1);
            retval += waitCond->returnValue;
        }
        else
        {
            retval += ito::RetVal(ito::retError, 0, QObject::tr("Member 'initAddIn' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
        }

        waitCond->deleteSemaphore();
        waitCond = NULL;

        paramsMandCpy.clear();
        paramsOptCpy.clear();
    }

    if (!PythonCommon::setReturnValueMessage(retval, pluginName, PythonCommon::loadPlugin))
    {
        return -1;
    }

    return 0;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyObject* PythonPlugins::PyActuatorPlugin_repr(PyActuatorPlugin *self)
{
    PyObject *result;
    if (self->actuatorObj == NULL)
    {
        result = PyUnicode_FromFormat("empty actuator plugin");
    }
    else
    {
        PyObject *tempObj = NULL;
        if ((tempObj = getName(self->actuatorObj)) != NULL)
        {   
            QString ident = self->actuatorObj->getIdentifier();
            if(ident != "")
            {
                result = PyUnicode_FromFormat("Actuator-Plugin(%U, %s, ID: %i)", tempObj, ident.toLatin1().data(), self->actuatorObj->getID());
            }
            else
            {
                result = PyUnicode_FromFormat("Actuator-Plugin(%U, ID: %i)", tempObj, self->actuatorObj->getID());
            }
            Py_DECREF(tempObj);    
        }
        else
            result = NULL;
    }
    return result;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyMemberDef PythonPlugins::PyActuatorPlugin_members[] = {
    {NULL}  /* Sentinel */
};

//----------------------------------------------------------------------------------------------------------------------------------
//PyDoc_STRVAR(pyActuatorName_doc, -> see pyPluginName_doc);
/** Returns the plugin's name
*   @param [in] self    the plugin object
*   @return             the name of the plugin
*
*                       Queries the name of a plugin by invoking a getParam on the plugin for the name parameter
*/
PyObject* PythonPlugins::PyActuatorPlugin_name(PyActuatorPlugin* self)
{
    return getName(self->actuatorObj);
}

//----------------------------------------------------------------------------------------------------------------------------------
/** returns the list of available parameters
*   @param [in] self    the actuator object (python)
*   @return             a string with all available parameters for this actuator
*
*   All parameters of the plugin are shown. This can be useful as there are only few standard parameters
*   for an actuator. The majority is depending on the actual hardware and accordingly is different for each
*   plugin.
*/
PyObject* PythonPlugins::PyActuatorPlugin_getParamList(PyActuatorPlugin* self)
{
    ito::AddInBase *aib = self->actuatorObj;
    return getParamList(aib);
}

//----------------------------------------------------------------------------------------------------------------------------------
/** returns the list of available parameters and additional information about the plugin
*   @param [in] self    the actuator object (python)
*   @return             a string with all available parameters for this actuator
*
*   All parameters of the plugin are shown with additional information as min, max and infostring.
*   This can be useful as there are only few standard parameters for an actuator. The majority is
*   depending on the actual hardware and accordingly is different for each plugin.
*/
PyObject* PythonPlugins::PyActuatorPlugin_getParamListInfo(PyActuatorPlugin* self, PyObject *args)
{
    ito::AddInBase *aib = self->actuatorObj;
    return getParamListInfo(aib, args);
}

/** returns the list of available ExecFunctions' names
*   @param [in] self    the actuator object (python)
*   @return             a list with all available parameters for this actuator
*
*   All ExecFunctions of the plugin are shown or one specific ExecFunctions with additional information as min, max and infostring is shown.
*   This can be useful as there are only few standard parameters for an actuator. The majority is
*   depending on the actual hardware and accordingly is different for each plugin.
*/
PyObject* PythonPlugins::PyActuatorPlugin_getExecFuncsList(PyActuatorPlugin* self)
{
    ito::AddInBase *aib = self->actuatorObj;
    return getExecFuncsList(aib);
}


/** returns the list of available parameters and additional information about the plugin ExecFunctions
*   @param [in] self    the actuator object (python)
*   @return             a dictionary with all available parameters for this actuator
*
*   All ExecFunctions of the plugin are shown or one specific ExecFunctions with additional information as min, max and infostring is shown.
*   This can be useful as there are only few standard parameters for an actuator. The majority is
*   depending on the actual hardware and accordingly is different for each plugin.
*/
PyObject* PythonPlugins::PyActuatorPlugin_getExecFuncsInfo(PyActuatorPlugin* self, PyObject *args, PyObject *kwds)
{
    ito::AddInBase *aib = self->actuatorObj;
    return getExecFuncsInfo(aib, args, kwds);
}

//----------------------------------------------------------------------------------------------------------------------------------


/** gets a parameter value
*   @param [in] self    the actuator object (python)
*   @param [in] args    the parameter name
*   @return             the parameter value
*
*   The getParam method of the plugin is invoked and the actual parameter value is returned. If the parameter
*   doesn't exist an error is returned.
*/
PyObject* PythonPlugins::PyActuatorPlugin_getParam(PyActuatorPlugin* self, PyObject * args)
{
    return getParam(self->actuatorObj, args);
}

//----------------------------------------------------------------------------------------------------------------------------------
/** set a parameter to a new value
*   @param [in] self    the actuator object (python)
*   @param [in] args    the parameter name and new value
*   @return             an error if the parameter wasn't found or the passed value is out of the limits
*
*   The setParam method of the plugin is invoked and the parameter is set to the new value in case the passed value
*   is within the limits.
*/
PyObject* PythonPlugins::PyActuatorPlugin_setParam(PyActuatorPlugin* self, PyObject * args)
{
    return setParam(self->actuatorObj, args);
}

//----------------------------------------------------------------------------------------------------------------------------------
/** returns dictionary with meta information about desired parameter
*   @param [in] self    the actuator object (python)
*   @param [in] args    the parameter name
*   @return             an error if the parameter wasn't found
*
*   The getParamInfo method of the plugin is invoked
*/
PyObject* PythonPlugins::PyActuatorPlugin_getParamInfo(PyActuatorPlugin* self, PyObject * args)
{
    return getParamInfo(self->actuatorObj, args);
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(pyActuatorCalib_doc, "calib(axis[, axis1, ...]) -> starts calibration or homing of given axes (0-based).\n\
\n\
Most actuators have the possibility to calibrate or home certain axes. Use this command to start the calibration. \n\
\n\
Parameters \n\
----------- \n\
axis : {int}\n\
    index of the first axis to calibrate (e.g. 0 for first axis) \n\
axis1 : {int}\n\
    add the indices of further axes as optional arguments if they should be calibrated as well\n\
\n\
Raises \n\
---------- \n\
NotImplemented \n\
    if calibration not available");
/** calibrate actuator axi(e)s
*   @param [in] self    the actuator object (python)
*   @param [in] args    the axi(e)s numbers
*   @return             status of calibration
*
*   Invokes the calibrate method on an actuator object with the numbers of the axis passed. The status is
*   of the calibration is returned or an error.
*/
PyObject* PythonPlugins::PyActuatorPlugin_calib(PyActuatorPlugin* self, PyObject * args)
{
    ito::RetVal ret = ito::retOk;
    char **cargs = NULL;
    char *cargt = NULL;
    int length = PyTuple_Size(args);
    QVector<int> axisVec;

    if (length == 0)
    {
        PyErr_SetString(PyExc_ValueError, "no axis specified");
        return NULL;
    }
    else
    {
        if (parseParams(args, length, cargs, cargt) < 0)
        {
            //PyErr_SetString(PyExc_TypeError, "invalid parameters"); //message already set
            freeParams(length, cargt, cargs);
            return NULL;
        }
    }

    if (length == 1)
    {
        if (cargt[0] != 'l')
        {
            PyErr_SetString(PyExc_TypeError, "invalid parameter type");
            freeParams(length, cargt, cargs);
            return NULL;
        }
    }
    else
    {
        for (int n = 0; n < length; n++)
        {
            if (cargt[n] != 'l')
            {
                PyErr_SetString(PyExc_TypeError, "invalid parameter type");
                axisVec.clear();
                freeParams(length, cargt, cargs);
                return NULL;
            }
            axisVec.append(*cargs[n]);
        }
    }

    // if a Python script has been interrupted, depending on itom settings, an interrupt is sent to all connected actuators.
    // If these actuators did not check for this flag in the meantime, reset it now.
    self->actuatorObj->resetInterrupt();

    ItomSharedSemaphoreLocker locker(new ItomSharedSemaphore());
    bool invokeOk;
    if (length == 1)
    {
        invokeOk = QMetaObject::invokeMethod(self->actuatorObj, "calib", Q_ARG(int, (const int) *cargs[0]), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore()));
    }
    else
    {
        invokeOk = QMetaObject::invokeMethod(self->actuatorObj, "calib", Q_ARG(QVector<int>, axisVec), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore()));
    }

    if (invokeOk)
    {
        bool timeout = false;

        while (!locker.getSemaphore()->wait(AppManagement::timeouts.pluginGeneral))
        {
            if (!self->actuatorObj->isAlive())
            {
                ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while calibration").toLatin1().data());
                timeout = true;
                break;
            }
        }

        if (!timeout)
        {
            ret += locker.getSemaphore()->returnValue;
        }
    }
    else
    {
        ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'calib' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
    }

    freeParams(length, cargt, cargs);
    axisVec.clear();

    if (!PythonCommon::setReturnValueMessage(ret, "calib", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    Py_RETURN_NONE;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(pyActuatorSetOrigin_doc, "setOrigin(axis[, axis1, ...]) -> defines the actual position of the given axes to value 0. \n\
\n\
The current positions of all indicated axes (axis, axis1,...) are considered to be 0 such that following positioning commands \n\
are relative with respect to the current position. \n\
\n\
Parameters \n\
----------- \n\
axis : {int}\n\
    index of the first axis (e.g. 0 for first axis) \n\
axis1 : {int}\n\
    add the indices of further axes as optional arguments\n\
\n\
Raises \n\
---------- \n\
NotImplemented \n\
    if actuator does not support this feature");

/** set the origin of axi(e)s
*   @param [in] self    the actuator object (python)
*   @param [in] args    the axi(e)s
*   @return             status of setOrigin
*
*   The axi(e)s current position is set as new origin of the axi(e)s.
*/
PyObject* PythonPlugins::PyActuatorPlugin_setOrigin(PyActuatorPlugin* self, PyObject * args)
{
    ito::RetVal ret = ito::retOk;
    int length = PyTuple_Size(args);
    char **cargs = NULL;
    char *cargt = NULL;
    QVector<int> axisVec;

    if (length == 0)
    {
        PyErr_SetString(PyExc_ValueError, "no axis specified");
        return NULL;
    }
    else
    {
        if (parseParams(args, length, cargs, cargt) < 0)
        {
            //PyErr_Format(PyExc_TypeError, "invalid parameters"); //message already set
            freeParams(length, cargt, cargs);
            return NULL;
        }
    }

    if (length == 1)
    {
        if (cargt[0] != 'l')
        {
            PyErr_SetString(PyExc_TypeError, "invalid parameter type");
            freeParams(length, cargt, cargs);
            return NULL;
        }
    }
    else
    {
        for (int n = 0; n < length; n++)
        {
            if (cargt[n] != 'l')
            {
                PyErr_SetString(PyExc_TypeError, "invalid parameter type");
                freeParams(length, cargt, cargs);
                axisVec.clear();
                return NULL;
            }
            axisVec.append(*cargs[n]);
        }
    }

    // if a Python script has been interrupted, depending on itom settings, an interrupt is sent to all connected actuators.
    // If these actuators did not check for this flag in the meantime, reset it now.
    self->actuatorObj->resetInterrupt();

    ItomSharedSemaphoreLocker locker(new ItomSharedSemaphore());
    bool invokeOk;
    if (length == 1)
    {
        invokeOk = QMetaObject::invokeMethod(self->actuatorObj, "setOrigin", Q_ARG(int, (const int) *cargs[0]), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore()));
    }
    else
    {
        invokeOk = QMetaObject::invokeMethod(self->actuatorObj, "setOrigin", Q_ARG(QVector<int>, axisVec), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore()));
    }

    if (invokeOk)
    {
        bool timeout = false;
        while (!locker.getSemaphore()->wait(AppManagement::timeouts.pluginGeneral))
        {
            if (!self->actuatorObj->isAlive())
            {
                ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while setting origin").toLatin1().data());
                break;
            }
        }

        if (!timeout)
        {
            ret += locker.getSemaphore()->returnValue;
        }
    }
    else
    {
        ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'setOrigin' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
    }

    freeParams(length, cargt, cargs);

    if (!PythonCommon::setReturnValueMessage(ret, "setOrigin", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    Py_RETURN_NONE;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(pyActuatorGetStatus_doc, "getStatus([axis = -1]) -> returns a list of status values for each axis or the status value for a specific axis\n\
\n\
Each axis of an actuator plugin has got a status value that is used for informing about the current status of the axis. \n\
\n\
The status value is an or-combination of the following possible values: \n\
\n\
Moving flags: \n\
\n\
* actuatorUnknown     = 0x0001 : unknown current moving status \n\
* actuatorInterrupted = 0x0002 : movement has been interrupted by the user or another error during the movement occurred \n\
* actuatorMoving      = 0x0004 : axis is currently moving \n\
* actuatorAtTarget    = 0x0008 : axis reached the target position \n\
* actuatorTimeout     = 0x0010 : timout during movement. Unknown status of the movement \n\
\n\
Switches flags: \n\
\n\
* actuatorEndSwitch      = 0x0100 : axis reached any end switch (e.g. if only one end switch is available) \n\
* actuatorEndSwitch1 = 0x0200 : axis reached the specified left end switch (if set, also set actuatorEndSwitch)\n\
* actuatorEndSwitch2 = 0x0400 : axis reached the specified left end switch (if set, also set actuatorEndSwitch)\n\
* actuatorRefSwitch      = 0x0800 : axis reached any reference switch (e.g. for calibration...) \n\
* actuatorRefSwitch1 = 0x1000 : axis reached the specified right reference switch (if set, also set actuatorRefSwitch)\n\
* actuatorRefSwitch2 = 0x2000 : axis reached the specified right reference switch (if set, also set actuatorRefSwitch)\n\
\n\
Status flags: \n\
\n\
* actuatorAvailable = 0x4000 : the axis is available \n\
* actuatorEnabled   = 0x8000 : the axis is currently enabled and can be moved \n\
* actuatorError = 0x10000 : axis has encountered error/reports error\n\
\n\
Parameters \n\
----------- \n\
axis : {int}, optional\n\
    index of desired axis. If given, the returned status value is a single value. \n\
    If not given (default), the status of all axes is requested and returned as list. \n\
\n\
Returns \n\
------- \n\
status : {list of integers} \n\
    list of integers (size corresponds to number of axes) with the current status of each axis");
/** get the status of an actuator
*   @param [in] self    the actuator object (python)
*   @param [in] args    the axi(e)s numbers
*   @return             an error if the parameter wasn't found or the passed value is out of the limits
*
*   Returns the status of the axi(e)s passed as parameter.
*/
PyObject* PythonPlugins::PyActuatorPlugin_getStatus(PyActuatorPlugin* self, PyObject * args)
{
    ItomSharedSemaphoreLocker locker(new ItomSharedSemaphore());

    ito::RetVal ret = ito::retOk;
    int length = PyTuple_Size(args);

    int axis = -1;
    PyObject *result = NULL;

    if (!PyArg_ParseTuple(args, "|i", &axis))
    {
        return NULL;
    }
    
    if (axis == -1)
    {
        QSharedPointer<QVector<int> > status(new QVector<int>());

        if (QMetaObject::invokeMethod(self->actuatorObj, "getStatus", Q_ARG(QSharedPointer<QVector<int> >, status), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore())))
        {
            bool timeout = false;
            while (!locker.getSemaphore()->wait(AppManagement::timeouts.pluginGeneral))
            {
                if (!self->actuatorObj->isAlive())
                {
                    ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while getting status").toLatin1().data());
                    timeout = true;
                    break;
                }
            }

            if (!timeout)
            {
                ret += locker.getSemaphore()->returnValue;
            }
        }
        else
        {
            ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'getStatus' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
        }

        if (!PythonCommon::setReturnValueMessage(ret, "getStatus", PythonCommon::invokeFunc))
        {
            return NULL;
        }

        int size = status->size();
        result = PyList_New(size); //new ref
        for (int i = 0; i < size; ++i)
        {
            PyList_SetItem(result, i, PyLong_FromLong((*status)[i]));
        }
    }
    else
    {
        QSharedPointer<int> status(new int);

        if (QMetaObject::invokeMethod(self->actuatorObj, "getStatus", Q_ARG(int, axis), Q_ARG(QSharedPointer<int>, status), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore())))
        {
            bool timeout = false;
            while (!locker.getSemaphore()->wait(AppManagement::timeouts.pluginGeneral))
            {
                if (!self->actuatorObj->isAlive())
                {
                    ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while getting status").toLatin1().data());
                    timeout = true;
                    break;
                }
            }

            if (!timeout)
            {
                ret += locker.getSemaphore()->returnValue;
            }
        }
        else
        {
            ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'getStatus' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
        }

        if (!PythonCommon::setReturnValueMessage(ret, "getStatus", PythonCommon::invokeFunc))
        {
            return NULL;
        }

        result = PyLong_FromLong(*status);
    }

    return result;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(pyActuatorGetPos_doc, "getPos(axis[, axis1, ...]) -> returns the actual positions of the given axes (in mm or degree).\n\
\n\
This method requests the current position(s) of the given axes and returns it. \n\
\n\
Parameters \n\
----------- \n\
axis : {int}\n\
    index of the first axis (e.g. 0 for first axis) \n\
axis1 : {int}\n\
    add the indices of further axes as optional arguments\n\
\n\
Returns \n\
------- \n\
positions : {float or tuple of float} \n\
    Current position as float value if only one axis is given or tuple of floats for multiple axes. The unit is mm or degree. \n\
\n\
See Also \n\
--------- \n\
setPosRel, setPosAbs");                         
                               
/** get the current position of axi(e)S
*   @param [in] self    the actuator object (python)
*   @param [in] args    the axi(e)s numbers
*   @return             the axi(e)s position(s)
*
*   Reads the position of the axi(e)s passed as parameter.
*/
PyObject* PythonPlugins::PyActuatorPlugin_getPos(PyActuatorPlugin* self, PyObject * args)
{
    ito::RetVal ret = ito::retOk;
    int length = PyTuple_Size(args);
    char **cargs = NULL;
    char *cargt = NULL;
    PyObject *result = NULL;
    QVector<int> axisVec;

    QSharedPointer<double> pos(new double);
    *pos = 0.0;
    QSharedPointer<QVector<double> > posVec(new QVector<double>());

    if (length < 1)
    {
        PyErr_SetString(PyExc_ValueError, "no axis specified");
        return NULL;
    }
    else
    {
        if (parseParams(args, length, cargs, cargt) < 0)
        {
            //PyErr_SetString(PyExc_TypeError, "invalid parameters"); //message already set
            freeParams(length, cargt, cargs);
            return NULL;
        }
    }

    if (length == 1)
    {
        if (cargt[0] != 'l')
        {
            PyErr_SetString(PyExc_TypeError, "invalid parameter type");
            freeParams(length, cargt, cargs);
            return NULL;
        }
    }
    else
    {
        for (int n = 0; n < length; n++)
        {
            if (cargt[n] != 'l')
            {
                PyErr_SetString(PyExc_TypeError, "invalid parameter type");
                freeParams(length, cargt, cargs);
                axisVec.clear();
                posVec.clear();
                return NULL;
            }
            axisVec.append(static_cast<int>(*(long *)cargs[n]));
            posVec->append(0);
        }
    }

    ItomSharedSemaphoreLocker locker(new ItomSharedSemaphore());
    bool invokeOk;

    if (length == 1)
    {
        long axis = *(long *)cargs[0];
        invokeOk = QMetaObject::invokeMethod(self->actuatorObj, "getPos", Q_ARG(int, (const int) axis), Q_ARG(QSharedPointer<double>, pos), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore()));
    }
    else
    {
        invokeOk = QMetaObject::invokeMethod(self->actuatorObj, "getPos", Q_ARG(QVector<int>, axisVec), Q_ARG(QSharedPointer<QVector<double> >, posVec), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore()));
    }

    if (invokeOk)
    {
        bool timeout = false;
        while (!locker.getSemaphore()->wait(AppManagement::timeouts.pluginGeneral))
        {
            if (!self->actuatorObj->isAlive())
            {
                ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while getting position values").toLatin1().data());
                timeout = true;
                break;
            }
        }

        if (!timeout)
        {
            ret += locker.getSemaphore()->returnValue;
        }
    }
    else
    {
        ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'getPos' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
    }

    if (length > 1)
    {
        result = PyTuple_New(length);
        for (int n = 0; n < length; n++)
        {
            PyTuple_SetItem(result, n, PyFloat_FromDouble((*posVec)[n]));
        }
    }
    else
    {
        result = PyFloat_FromDouble(*pos);
    }

    freeParams(length, cargt, cargs);
    axisVec.clear();

    if (!PythonCommon::setReturnValueMessage(ret, "getPos", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    return result;
}
//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyActuatorPlugin_getType_doc, "getType() -> returns actuator type");
/** returns the type of the actuator object
*   @param [in] self    the actuator object (python)
*   @return             a string with the type
*
*   This method simply returns the type of the actuator object
*/
PyObject* PythonPlugins::PyActuatorPlugin_getType(PyActuatorPlugin *self)
{
    PyObject *result = NULL;
    if (self == NULL || self->actuatorObj == NULL)
    {
        PyErr_SetString(PyExc_RuntimeError,"empty actuator plugin");
        return NULL;
    }
    else
    {
        ito::AddInInterfaceBase *aib = self->actuatorObj->getBasePlugin();
        if (aib)
        {
            result = PyLong_FromLong(aib->getType());
        }
        else
        {
            PyErr_SetString(PyExc_RuntimeError,"interface of plugin is NULL");
            return NULL;
        }
    }
    
    return result;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyObject* PythonPlugins::PyActuatorPlugin_execFunc(PyActuatorPlugin *self, PyObject *args, PyObject *kwds)
{
    return execFunc(self->actuatorObj, args, kwds);
}

//----------------------------------------------------------------------------------------------------------------------------------
/** open configuration dialog
*   @param [in] self    the actuator object (python)
*
*   This method simply open the configuration dialog
*/
PyObject* PythonPlugins::PyActuatorPlugin_showConfiguration(PyActuatorPlugin* self)
{
    ito::AddInBase *aib = self->actuatorObj;
    return plugin_showConfiguration(aib);
}

//----------------------------------------------------------------------------------------------------------------------------------


/** returns the list of available parameters
*   @param [in] self    the actuator object (python)
*
*   This method simply open the widget
*/
PyObject* PythonPlugins::PyActuatorPlugin_showToolbox(PyActuatorPlugin* self)
{
    ito::AddInBase *aib = self->actuatorObj;
    return plugin_showToolbox(aib);
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(pyActuatorSetInterrupt_doc, "setInterrupt() -> interrupts a movement of an actuator \n\
\n\
Sets the interrupt flag of an actuator. The actuator interrupts the movement of all running axes \
as soon as this flag is checked again.");

/** sets the interrupt flag of the actuator in order to interrupt a movement
*/
PyObject* PythonPlugins::PyActuatorPlugin_setInterrupt(PyActuatorPlugin *self)
{
    if (self->actuatorObj)
    {
        //direct call is thread-safe since the flag is protected by a mutex.
        self->actuatorObj->setInterrupt();
    }
    else
    {
        return PyErr_Format(PyExc_RuntimeError, "actuator is invalid");
    }

    Py_RETURN_NONE;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(pyActuatorConnect_doc, "connect(signalSignature, callableMethod, minRepeatInterval = 0) -> connects the signal of the actuator with the given callable python method \n\
\n\
This instance of *actuator* wraps a actuator, that is defined by a C++-class, that is finally derived from *QObject*. \n\
Every Actuator can send various signals. Use this method to connect any signal to any \n\
callable python method (bounded or unbounded). This method must have the same number of arguments than the signal and the types of the \n\
signal definition must be convertable into a python object. \n\
\n\
Parameters \n\
----------- \n\
signalSignature : {str} \n\
    This must be the valid signature, known from the Qt-method *connect* (e.g. 'reachedTarget(bool)') \n\
callableMethod : {python method or function} \n\
    valid method or function that is called if the signal is emitted. \n\
minRepeatInterval : {int}, optional \n\
    If > 0, the same signal only invokes a slot once within the given interval (in ms). Default: 0 (all signals will invoke the callable python method. \n\
\n\
See Also \n\
--------- \n\
disconnect");
PyObject* PythonPlugins::PyActuatorPlugin_connect(PyActuatorPlugin *self, PyObject* args, PyObject *kwds)
{
    const char *kwlist[] = { "signalSignature", "callableMethod", "minRepeatInterval", NULL };
    const char* signalSignature;
    PyObject *callableMethod;
    int signalIndex;
    int tempType;
    IntList argTypes;
    int minRepeatInterval = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "sO|i", const_cast<char**>(kwlist), &signalSignature, &callableMethod, &minRepeatInterval))
    {
        PyErr_SetString(PyExc_TypeError, "Arguments must be a signal signature and a callable method reference");
        return NULL;
    }
    if (!PyCallable_Check(callableMethod))
    {
        PyErr_SetString(PyExc_TypeError, "given method reference is not callable.");
        return NULL;
    }
    if (!self->actuatorObj)
    {
        PyErr_SetString(PyExc_RuntimeError, "No valid instance of actuator available");
        return NULL;
    }

    QByteArray signature(signalSignature);
    const QMetaObject *mo = self->actuatorObj->metaObject();
    signalIndex = mo->indexOfSignal(QMetaObject::normalizedSignature(signalSignature));
    QMetaMethod metaMethod = mo->method(signalIndex);
    QList<QByteArray> names = metaMethod.parameterTypes();
    foreach(const QByteArray& name, names)
    {
        tempType = QMetaType::type(name.constData());
        if (tempType > 0)
        {
            argTypes.append(tempType);
        }
        else
        {
            QString msg = QString("parameter type %1 is unknown").arg(name.constData());
            PyErr_SetString(PyExc_RuntimeError, msg.toLatin1().data());
            signalIndex = -1;
            return NULL;
        }
    }
    if (self->signalMapper)
    {
        if (!self->signalMapper->addSignalHandler(self->actuatorObj, signalSignature, signalIndex, callableMethod, argTypes, minRepeatInterval))
        {
            PyErr_SetString(PyExc_RuntimeError, "the connection could not be established.");
            return NULL;
        }
    }
    else
    {
        PyErr_SetString(PyExc_RuntimeError, "No signalMapper for this plugin could be found");
        return NULL;
    }

    Py_RETURN_NONE;
}
//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(pyActuatorDisconnect_doc, "disconnect(signalSignature, callableMethod) -> disconnects a connection which must have been established with exactly the same parameters.\n\
\n\
Parameters \n\
----------- \n\
signalSignature : {str} \n\
    This must be the valid signature, known from the Qt-method *connect* (e.g. 'clicked(bool)') \n\
callableMethod : {python method or function} \n\
    valid method or function, that should not be called any more, if the given signal is emitted. \n\
\n\
See Also \n\
--------- \n\
connect \n\
");
PyObject *PythonPlugins::PyActuatorPlugin_disconnect(PyActuatorPlugin *self, PyObject* args, PyObject* kwds)
{
    const char *kwlist[] = { "signalSignature", "callableMethod", NULL };
    int signalIndex;
    const char* signalSignature;
    PyObject *callableMethod;
    IntList argTypes;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "sO", const_cast<char**>(kwlist), &signalSignature, &callableMethod))
    {
        PyErr_SetString(PyExc_TypeError, "Arguments must be a signal signature and a callable method reference");
        return NULL;
    }
    if (!PyCallable_Check(callableMethod))
    {
        PyErr_SetString(PyExc_TypeError, "given method reference is not callable.");
        return NULL;
    }
    if (!self->actuatorObj)
    {
        PyErr_SetString(PyExc_RuntimeError, "No valid instance of actuator available");
        return NULL;
    }

    const QMetaObject *mo = self->actuatorObj->metaObject();
    signalIndex = mo->indexOfSignal(QMetaObject::normalizedSignature(signalSignature));
    QMetaMethod metaMethod = mo->method(signalIndex);
    if (self->signalMapper)
    {
        if (!self->signalMapper->removeSignalHandler(self->actuatorObj, signalIndex, callableMethod))
        {
            PyErr_SetString(PyExc_RuntimeError, "the connection could not be established.");
            return NULL;
        }
    }
    else
    {
        PyErr_SetString(PyExc_RuntimeError, "No signalMapper for this plugin could be found");
        return NULL;
    }

    Py_RETURN_NONE;
}
//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(pyActuatorInfo_doc, "info(verbose = 0) -> returns information about signal and slots.\n\
\n\
Parameters \n\
----------- \n\
verbose : {int} \n\
    0: only slots and signals from the plugin class are printed (default) \n\
    1: all slots and signals from all inherited classes are printed\n\
");
PyObject* PythonPlugins::PyActuatorPlugin_info(PyActuatorPlugin* self, PyObject* args)
{
    int showAll = 0;

    if (!PyArg_ParseTuple(args, "|i", &showAll))
    {
        return NULL;
    }
    if (!self->actuatorObj)
    {
        PyErr_SetString(PyExc_RuntimeError, "No valid instance of actuator available");
        return NULL;
    }
    //QList<QByteArray> signalSignatureList, slotSignatureList;
    QStringList signalSignatureList, slotSignatureList;
    const QMetaObject *mo = self->actuatorObj->metaObject();
    QMetaMethod metaFunc;
    bool again = true;
    int methodIdx;
    if (showAll == 0 || showAll == 1)
    {
        while (again)
        {
            for (methodIdx = mo->methodOffset(); methodIdx < mo->methodCount(); ++methodIdx)
            {
                metaFunc = mo->method(methodIdx);
                if (metaFunc.methodType() == QMetaMethod::Signal)
                {
                    signalSignatureList.append(metaFunc.methodSignature());

                }
                if (metaFunc.methodType() == QMetaMethod::Slot)
                {
                    slotSignatureList.append(metaFunc.methodSignature());
                }

            }
            if (showAll == 1)
            {
                mo = mo->superClass();
                if (mo)
                {
                    again = true;
                    continue;
                }
            }
            again = false;

        }
    }
    else
    {
        PyErr_SetString(PyExc_RuntimeError, "Invalid verbose level. Use level 0 to display all signals and slots defined by the plugin itself. Level 1 also displays all inherited signals and slots");
        return NULL;
    }
    signalSignatureList.sort();
    slotSignatureList.sort();
    if (signalSignatureList.length() || slotSignatureList.length())
    {
        //QByteArray val;
        QString val;
        QString previous;
        std::cout << "Signals: \n";
        foreach(val, signalSignatureList)
        {
            if (val != previous)
            {
                std::cout << "\t" << QString(val).toLatin1().data() << "\n";
            }
            previous = val;
        }
        std::cout << "\nSlots: \n";
        foreach(val, slotSignatureList)
        {
            if (val != previous)
            {
                std::cout << "\t" << QString(val).toLatin1().data() << "\n";
            }
            previous = val;
        }
    }
    Py_RETURN_NONE;
}
//----------------------------------------------------------------------------------------------------------------------------------
/** returns the list of available parameters
*   @param [in] self    the actuator object (python)
*
*   This method simply close the widget
*/
PyObject* PythonPlugins::PyActuatorPlugin_hideToolbox(PyActuatorPlugin* self)
{
    ito::AddInBase *aib = self->actuatorObj;
    return plugin_hideToolbox(aib);
}

//----------------------------------------------------------------------------------------------------------------------------------
/** helper function to parse the positioning parameters for an actuator
*   @param [in]  args       arguments passed to the function (in python)
*   @param [in/out] cargs   parsed argument values
*   @param [in/out] cargt   parsed argument types
*   @param [out]    axisVec Vector with axes numbers
*   @param [out]    posVec  Vector with position values
*   @return                 retOk of parameters could be parsed, retError otherwise
*
*   Parses the parameters passed to a setPos command in python. For each axis that should be positioned
*   an axis number and a position value are expected.
*/
ito::RetVal parsePosParams(PyObject *args, char **&cargs, char *&cargt, QVector<int> &axisVec, QVector<double> &posVec)
{
    ito::RetVal ret = ito::retOk;
    int length = PyTuple_Size(args);

    if (length < 2)
    {
        PyErr_SetString(PyExc_ValueError, "no axis specified of position");
        return ito::retError;
    }
    else if ((length % 2) != 0)
    {
        PyErr_SetString(PyExc_ValueError, "number of axis and position values are not equal");
        return ito::retError;
    }
    else
    {
        if (parseParams(args, length, cargs, cargt) < 0)
        {
            //PyErr_SetString(PyExc_TypeError, "invalid parameters"); //message already set
            freeParams(length, cargt, cargs);
            return ito::retError;
        }
    }

    if (length == 2)
    {
        if ((cargt[0] != 'l') || ((cargt[1] != 'f') && (cargt[1] != 'l')))
        {
            PyErr_SetString(PyExc_TypeError, "invalid parameter type");
            freeParams(length, cargt, cargs);
            return ito::retError;
        }
        if (cargt[1] == 'l')
        {
            double tdouble = *((long*)cargs[1]);
            free(cargs[1]);
            cargs[1] = (char*)malloc(sizeof(double));
            cargt[1] = 'f';
            *(double*)cargs[1] = tdouble;
        }
    }
    else
    {
        for (int n = 0; n < length / 2; n++)
        {
            if (cargt[n * 2] != 'l')
            {
                PyErr_SetString(PyExc_TypeError, "invalid parameter type");
                freeParams(length, cargt, cargs);
                axisVec.clear();
                posVec.clear();
                return ito::retError;
            }
            axisVec.append(static_cast<int>(*(long *)cargs[n * 2]));

            if ((cargt[n * 2 + 1] != 'f') && (cargt[n * 2 + 1] != 'l'))
            {
                PyErr_SetString(PyExc_TypeError, "invalid parameter type");
                freeParams(length, cargt, cargs);
                axisVec.clear();
                posVec.clear();
                return ito::retError;
            }
            if (cargt[n * 2 + 1] == 'f')
            {
                posVec.append(*(double *)cargs[n * 2 + 1]);
            }
            else
            {
                posVec.append(*(long *)cargs[n * 2 + 1]);
            }
        }
    }

    return ito::retOk;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(pyActuatorSetPosAbs_doc,"setPosAbs(axis0, pos0 [, axis1, pos1, ...]) -> moves given axes to given absolute values (in mm or degree).\n\
\n\
All arguments are a pair of axis index and the new target position of this axis. This method starts the absolute positioning of all given axes. \n\
If the 'async' parameter of the plugin is 0 (usually default), a synchronous positioning is started, hence, this method returns after that all \n\
axes reached their target position or a timeout occurred. Else this method immediately returns and the actuator goes on moving. \n\
\n\
Parameters \n\
----------- \n\
axisM : {int} \n\
    index of the axis to position \n\
posM : {float} \n\
    absolute target position of the `axisM` (in mm or degree) \n\
\n\
See Also \n\
--------- \n\
getPos, setPosRel");                             

/** set actuator axi(e)s to new absolute position(s)
*   @param [in] self    the actuator object (python)
*   @param [in] args    the axi(e)s numbers
*   @return             status of positioning command
*
*   The passed parameters are parsed using the helper function \ref parsePosParams and in case a meaningful
*   number of axi(e)s and position(s) are found the setPosAbs method of the actuator object is invoked.
*/
PyObject* PythonPlugins::PyActuatorPlugin_setPosAbs(PyActuatorPlugin* self, PyObject * args)
{
    ito::RetVal ret = ito::retOk;
    int length = PyTuple_Size(args);
    char **cargs = NULL;
    char *cargt = NULL;
    QVector<int> axisVec;
    QVector<double> posVec;

    if ((ret = parsePosParams(args, cargs, cargt, axisVec, posVec)) != ito::retOk)
    {
        return NULL;
    }

    // if a Python script has been interrupted, depending on itom settings, an interrupt is sent to all connected actuators.
    // If these actuators did not check for this flag in the meantime, reset it now.
    self->actuatorObj->resetInterrupt();

    ItomSharedSemaphoreLocker locker(new ItomSharedSemaphore());
    bool invokeOk;

    if (length == 2)
    {
        long axis = *(long *)cargs[0];
        invokeOk = QMetaObject::invokeMethod(self->actuatorObj, "setPosAbs", Q_ARG(int, (const int) axis), Q_ARG(double, (const double)(*((double*)(cargs[1])))), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore()));
    }
    else
    {
        invokeOk = QMetaObject::invokeMethod(self->actuatorObj, "setPosAbs", Q_ARG(QVector<int>, axisVec), Q_ARG(QVector<double>, posVec), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore()));
    }

    if (invokeOk)
    {
        bool timeout = false;
        while (!locker.getSemaphore()->wait(AppManagement::timeouts.pluginGeneral))
        {
            if (!self->actuatorObj->isAlive())
            {
                ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while setting absolute position").toLatin1().data());
                timeout = true;
                break;
            }
        }

        if (!timeout)
        {
            ret += locker.getSemaphore()->returnValue;
        }
    }
    else
    {
        ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'setPosAbs' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
    }

    freeParams(length, cargt, cargs);
    axisVec.clear();
    posVec.clear();

    if (!PythonCommon::setReturnValueMessage(ret, "setPosAbs", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    Py_RETURN_NONE;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(pyActuatorSetPosRel_doc,"setPosRel(axis0, pos0[, axis1, pos1, ...]) -> relatively moves given axes by the given distances [in mm or degree].\n\
\n\
All arguments are a pair of axis index and the relative moving-distance of this axis. This method starts the relative positioning of all given axes. \n\
If the 'async' parameter of the plugin is 0 (usually default), a synchronous positioning is started, hence, this method returns after that all \n\
axes reached their target position or a timeout occurred. Else this method immediately returns and the actuator goes on moving. \n\
\n\
Parameters \n\
----------- \n\
axisM : {int} \n\
    index of the axis to position \n\
posM : {float} \n\
    relative target position of the `axisM` (in mm or degree) \n\
\n\
See Also \n\
--------- \n\
getPos, setPosAbs"); 
/** set actuator axi(e)s to new relative position(s)
*   @param [in] self    the actuator object (python)
*   @param [in] args    the axi(e)s numbers
*   @return             status of positioning command
*
*   The passed parameters are parsed using the helper function \ref parsePosParams and in case a meaningful
*   number of axi(e)s and position(s) are found the setPosRel method of the actuator object is invoked.
*/
PyObject* PythonPlugins::PyActuatorPlugin_setPosRel(PyActuatorPlugin* self, PyObject * args)
{
    ito::RetVal ret = ito::retOk;
    int length = PyTuple_Size(args);
    char **cargs = NULL;
    char *cargt = NULL;
    QVector<int> axisVec;
    QVector<double> posVec;

    if ((ret = parsePosParams(args, cargs, cargt, axisVec, posVec)) != ito::retOk)
    {
        return NULL;
    }

    // if a Python script has been interrupted, depending on itom settings, an interrupt is sent to all connected actuators.
    // If these actuators did not check for this flag in the meantime, reset it now.
    self->actuatorObj->resetInterrupt();

    ItomSharedSemaphoreLocker locker(new ItomSharedSemaphore());
    bool invokeOk;

    if (length == 2)
    {
        long axis = *(long *)cargs[0];
        invokeOk = QMetaObject::invokeMethod(self->actuatorObj, "setPosRel", Q_ARG(int, (const int) axis), Q_ARG(double, (const double)(*((double*)(cargs[1])))), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore()));
    }
    else
    {
        invokeOk = QMetaObject::invokeMethod(self->actuatorObj, "setPosRel", Q_ARG(QVector<int>, axisVec), Q_ARG(QVector<double>, posVec), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore()));
    }

    if (invokeOk)
    {
        bool timeout = false;
        while (!locker.getSemaphore()->wait(AppManagement::timeouts.pluginGeneral))
        {
            if (!self->actuatorObj->isAlive())
            {
                ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while setting relative position").toLatin1().data());
                timeout = true;
                break;
            }
        }

        if (!timeout)
        {
            ret += locker.getSemaphore()->returnValue;
        }
    }
    else
    {
        ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'setPosRel' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
    }

    freeParams(length, cargt, cargs);
    axisVec.clear();
    posVec.clear();

    if (!PythonCommon::setReturnValueMessage(ret, "setPosRel", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    Py_RETURN_NONE;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(pyActuatorGetCurrentStatus_doc, "Get the current status (flag mask, see :py:meth:`~itom.actuator.getStatus`) of all axes \n\
\n\
This property returns a tuple whose size corresponds to the number of axes of this actuator. \n\
The returned tuple contains the current positions of all axes (in mm or degree). \n\
This property is always updated if the plugin signals a change of any current position \n\
via the signal 'actuatorStatusChanged'. Instead of reading this property, you can also connect to this signal \n\
in order to get instantly informed about new current positions. \n\
\n\
The difference between this property and the method :py:meth:`~itom.actuator.getStatus` is that `getStatus` will only \n\
return if the actuator plugin is currently idle. This property always returns immediately, however it \n\
only contains the last reported values which can slightly differ from the real current positions \n\
(if the plugin rarely emits its current states for instance due to performance reasons).");
/*static*/ PyObject* PythonPlugins::PyActuatorPlugin_getCurrentStatus(PyActuatorPlugin *self, void * /*closure*/)
{
    if (!self->actuatorObj)
    {
        PyErr_SetString(PyExc_RuntimeError, "No valid instance of actuator available");
        return NULL;
    }

    QVector<int> status;
    QVector<double> currentPosition;
    QVector<double> targetPosition;
    ito::RetVal ret = self->actuatorObj->getLastSignalledStates(status, currentPosition, targetPosition);

    if (!PythonCommon::setReturnValueMessage(ret, "currentStatus", PythonCommon::getProperty))
    {
        return NULL;
    }

    PyObject* result = PyTuple_New(status.size());
    int i = 0;
    foreach(int s, status)
    {
        PyTuple_SET_ITEM(result, i, PyLong_FromLong(s)); //steals a reference
        i++;
    }

    return result;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(pyActuatorGetCurrentPositions_doc, "Get the current positions (in mm or degree) of all axes \n\
\n\
This property returns a tuple whose size corresponds to the number of axes of this actuator. \n\
The returned tuple contains the current positions of all axes (in mm or degree). \n\
This property is always updated if the plugin signals a change of any current position \n\
via the signal 'actuatorStatusChanged'. Instead of reading this property, you can also connect to this signal \n\
in order to get instantly informed about new current positions. \n\
\n\
This property always returns immediately, however it \n\
only contains the last reported values which can slightly differ from the real current positions \n\
(if the plugin rarely emits its current states for instance due to performance reasons).");
/*static*/ PyObject* PythonPlugins::PyActuatorPlugin_getCurrentPositions(PyActuatorPlugin *self, void * /*closure*/)
{
    if (!self->actuatorObj)
    {
        PyErr_SetString(PyExc_RuntimeError, "No valid instance of actuator available");
        return NULL;
    }

    QVector<int> status;
    QVector<double> currentPosition;
    QVector<double> targetPosition;
    ito::RetVal ret = self->actuatorObj->getLastSignalledStates(status, currentPosition, targetPosition);

    if (!PythonCommon::setReturnValueMessage(ret, "currentPosition", PythonCommon::getProperty))
    {
        return NULL;
    }

    PyObject* result = PyTuple_New(currentPosition.size());
    int i = 0;
    foreach(double s, currentPosition)
    {
        PyTuple_SET_ITEM(result, i, PyFloat_FromDouble(s)); //steals a reference
        i++;
    }

    return result;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(pyActuatorGetTargetPositions_doc, "Get the target positions (in mm or degree) of all axes \n\
\n\
This property returns a tuple whose size corresponds to the number of axes of this actuator. \n\
The returned tuple contains the current target positions of all axes (in mm or degree). \n\
This property is always updated if the plugin signals a change of any target position \n\
via the signal 'targetChanged'. Instead of reading this property, you can also connect to this signal \n\
in order to get instantly informed about new target positions. \n\
\n\
This property always returns immediately, however it \n\
only contains the last reported values which can slightly differ from the real target positions \n\
(if the plugin rarely emits its current states for instance due to performance reasons).");
/*static*/ PyObject* PythonPlugins::PyActuatorPlugin_getTargetPositions(PyActuatorPlugin *self, void * /*closure*/)
{
    if (!self->actuatorObj)
    {
        PyErr_SetString(PyExc_RuntimeError, "No valid instance of actuator available");
        return NULL;
    }

    QVector<int> status;
    QVector<double> currentPosition;
    QVector<double> targetPosition;
    ito::RetVal ret = self->actuatorObj->getLastSignalledStates(status, currentPosition, targetPosition);

    if (!PythonCommon::setReturnValueMessage(ret, "targetPosition", PythonCommon::getProperty))
    {
        return NULL;
    }

    PyObject* result = PyTuple_New(targetPosition.size());
    int i = 0;
    foreach(double s, targetPosition)
    {
        PyTuple_SET_ITEM(result, i, PyFloat_FromDouble(s)); //steals a reference
        i++;
    }

    return result;
}

//-----------------------------------------------------------------------------
PyGetSetDef PythonPlugins::PyActuatorPlugin_getseters[] = {
    {"currentStatus",   (getter)PyActuatorPlugin_getCurrentStatus,    (setter)NULL, pyActuatorGetCurrentStatus_doc, NULL },
    {"currentPositions", (getter)PyActuatorPlugin_getCurrentPositions,  (setter)NULL, pyActuatorGetCurrentPositions_doc, NULL },
    {"targetPositions",  (getter)PyActuatorPlugin_getTargetPositions,   (setter)NULL, pyActuatorGetTargetPositions_doc, NULL},
    {NULL}  /* Sentinel */
};

//----------------------------------------------------------------------------------------------------------------------------------
PyMethodDef PythonPlugins::PyActuatorPlugin_methods[] = {
   {"getParamList", (PyCFunction)PythonPlugins::PyActuatorPlugin_getParamList, METH_NOARGS, pyPluginGetParamList_doc},
   {"getParamInfo", (PyCFunction)PythonPlugins::PyActuatorPlugin_getParamInfo, METH_VARARGS, pyPluginGetParamInfo_doc},
   {"getParamListInfo", (PyCFunction)PythonPlugins::PyActuatorPlugin_getParamListInfo, METH_VARARGS, pyPluginGetParamListInfo_doc},
   {"getExecFuncsList", (PyCFunction)PythonPlugins::PyActuatorPlugin_getExecFuncsList, METH_NOARGS, pyPluginGetExecFuncsList_doc},/*wrong doc atm.*/
   {"getExecFuncsInfo", (PyCFunction)PythonPlugins::PyActuatorPlugin_getExecFuncsInfo, METH_VARARGS | METH_KEYWORDS, pyPlugInGetExecFuncsInfo_doc},
   {"name", (PyCFunction)PythonPlugins::PyActuatorPlugin_name, METH_NOARGS, pyPluginName_doc},
   {"getParam", (PyCFunction)PythonPlugins::PyActuatorPlugin_getParam, METH_VARARGS, pyPluginGetParam_doc},
   {"setParam", (PyCFunction)PythonPlugins::PyActuatorPlugin_setParam, METH_VARARGS, pyPluginSetParam_doc},
   {"calib", (PyCFunction)PythonPlugins::PyActuatorPlugin_calib, METH_VARARGS, pyActuatorCalib_doc},
   {"setOrigin", (PyCFunction)PythonPlugins::PyActuatorPlugin_setOrigin, METH_VARARGS, pyActuatorSetOrigin_doc},
   {"getStatus", (PyCFunction)PythonPlugins::PyActuatorPlugin_getStatus, METH_VARARGS, pyActuatorGetStatus_doc},
   {"getPos", (PyCFunction)PythonPlugins::PyActuatorPlugin_getPos, METH_VARARGS, pyActuatorGetPos_doc},
   {"setPosAbs", (PyCFunction)PythonPlugins::PyActuatorPlugin_setPosAbs, METH_VARARGS, pyActuatorSetPosAbs_doc},
   {"setPosRel", (PyCFunction)PythonPlugins::PyActuatorPlugin_setPosRel, METH_VARARGS, pyActuatorSetPosRel_doc},
   {"getType", (PyCFunction)PythonPlugins::PyActuatorPlugin_getType, METH_NOARGS, PyActuatorPlugin_getType_doc},
   {"exec", (PyCFunction)PythonPlugins::PyActuatorPlugin_execFunc, METH_KEYWORDS | METH_VARARGS, PyPlugin_execFunc_doc},
   {"showConfiguration", (PyCFunction)PythonPlugins::PyActuatorPlugin_showConfiguration, METH_NOARGS, pyPluginShowConfiguration_doc},
   {"showToolbox", (PyCFunction)PythonPlugins::PyActuatorPlugin_showToolbox, METH_NOARGS, pyPluginShowToolbox_doc},
   {"hideToolbox", (PyCFunction)PythonPlugins::PyActuatorPlugin_hideToolbox, METH_NOARGS, pyPluginHideToolbox_doc},
   {"setInterrupt", (PyCFunction)PythonPlugins::PyActuatorPlugin_setInterrupt, METH_NOARGS, pyActuatorSetInterrupt_doc},
   {"connect", (PyCFunction)PythonPlugins::PyActuatorPlugin_connect, METH_VARARGS | METH_KEYWORDS, pyActuatorConnect_doc},
   {"disconnect", (PyCFunction)PythonPlugins::PyActuatorPlugin_disconnect, METH_VARARGS | METH_KEYWORDS, pyActuatorDisconnect_doc},
   {"info",(PyCFunction)PythonPlugins::PyActuatorPlugin_info, METH_VARARGS, pyActuatorInfo_doc},
   {NULL}  /* Sentinel */
};

//----------------------------------------------------------------------------------------------------------------------------------
PyModuleDef PythonPlugins::PyActuatorPluginModule = {
   PyModuleDef_HEAD_INIT,
   "actuatorPlugin",
   QObject::tr("Itom ActuatorPlugin type in python").toLatin1().data(),
   -1,
   NULL, NULL, NULL, NULL, NULL
};

//----------------------------------------------------------------------------------------------------------------------------------
PyTypeObject PythonPlugins::PyActuatorPluginType = {
   PyVarObject_HEAD_INIT(NULL, 0)
   "itom.actuator",                         /* tp_name */
   sizeof(PyActuatorPlugin),                /* tp_basicsize */
   0,                                       /* tp_itemsize */
   (destructor)PyActuatorPlugin_dealloc,    /* tp_dealloc */
   0,                                       /* tp_print */
   0,                                       /* tp_getattr */
   0,                                       /* tp_setattr */
   0,                                       /* tp_reserved */
   (reprfunc)PyActuatorPlugin_repr,         /* tp_repr */
   0,                                       /* tp_as_number */
   0,                                       /* tp_as_sequence */
   0,                                       /* tp_as_mapping */
   0,                                       /* tp_hash  */
   0,                                       /* tp_call */
   0,                                       /* tp_str */
   0,                                       /* tp_getattro */
   0,                                       /* tp_setattro */
   0,                                       /* tp_as_buffer */
   Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,   /* tp_flags */
   pyActuatorInit_doc,                      /* tp_doc */
   0,                                       /* tp_traverse */
   0,                                       /* tp_clear */
   0,                                       /* tp_richcompare */
   offsetof(PyActuatorPlugin, weakreflist), /* tp_weaklistoffset */
   0,                                       /* tp_iter */
   0,                                       /* tp_iternext */
   PyActuatorPlugin_methods,                /* tp_methods */
   PyActuatorPlugin_members,                /* tp_members */
   PyActuatorPlugin_getseters,              /* tp_getset */
   0,                                       /* tp_base */
   0,                                       /* tp_dict */
   0,                                       /* tp_descr_get */
   0,                                       /* tp_descr_set */
   0,                                       /* tp_dictoffset */
   (initproc)PythonPlugins::PyActuatorPlugin_init,      /* tp_init */
   0,                                       /* tp_alloc */
   PyActuatorPlugin_new                     /*PyType_GenericNew*/ /*PythonStream_new,*/                 /* tp_new */
};



/*static*/ void PythonPlugins::PyActuatorPlugin_addTpDict(PyObject* tp_dict)
{
    PyObject *value;
    //Status Moving
    value = Py_BuildValue("i", ito::tActuatorStatus::actuatorUnknown);
    PyDict_SetItemString(tp_dict, "actuatorUnknown", value);
    Py_DECREF(value);

    value = Py_BuildValue("i", ito::tActuatorStatus::actuatorInterrupted);
    PyDict_SetItemString(tp_dict, "actuatorInterrupted", value);
    Py_DECREF(value);

    value = Py_BuildValue("i", ito::tActuatorStatus::actuatorMoving);
    PyDict_SetItemString(tp_dict, "actuatorMoving", value);
    Py_DECREF(value);

    value = Py_BuildValue("i", ito::tActuatorStatus::actuatorAtTarget);
    PyDict_SetItemString(tp_dict, "actuatorAtTarget", value);
    Py_DECREF(value);

    value = Py_BuildValue("i", ito::tActuatorStatus::actuatorTimeout);
    PyDict_SetItemString(tp_dict, "actuatorTimeout", value);
    Py_DECREF(value);

    //status switches
    value = Py_BuildValue("i", ito::tActuatorStatus::actuatorEndSwitch);
    PyDict_SetItemString(tp_dict, "actuatorEndSwitch", value);
    Py_DECREF(value);

    value = Py_BuildValue("i", ito::tActuatorStatus::actuatorEndSwitch1);
    PyDict_SetItemString(tp_dict, "actuatorEndSwitch1", value);
    Py_DECREF(value);

    value = Py_BuildValue("i", ito::tActuatorStatus::actuatorEndSwitch2);
    PyDict_SetItemString(tp_dict, "actuatorEndSwitch2", value);
    Py_DECREF(value);

    value = Py_BuildValue("i", ito::tActuatorStatus::actuatorRefSwitch);
    PyDict_SetItemString(tp_dict, "actuatorRefSwitch", value);
    Py_DECREF(value);

    value = Py_BuildValue("i", ito::tActuatorStatus::actuatorRefSwitch1);
    PyDict_SetItemString(tp_dict, "actuatorRefSwitch1", value);
    Py_DECREF(value);

    value = Py_BuildValue("i", ito::tActuatorStatus::actuatorRefSwitch2);
    PyDict_SetItemString(tp_dict, "actuatorRefSwitch2", value);
    Py_DECREF(value);

    //status Flags
    value = Py_BuildValue("i", ito::tActuatorStatus::actuatorAvailable);
    PyDict_SetItemString(tp_dict, "actuatorAvailable", value);
    Py_DECREF(value);

    value = Py_BuildValue("i", ito::tActuatorStatus::actuatorEnabled);
    PyDict_SetItemString(tp_dict, "actuatorEnabled", value);
    Py_DECREF(value);

    value = Py_BuildValue("i", ito::tActuatorStatus::actuatorError);
    PyDict_SetItemString(tp_dict, "actuatorError", value);
    Py_DECREF(value);

    /*value = Py_BuildValue("i", ito::tActuatorStatus::actMovingMask);
    PyDict_SetItemString(tp_dict, "actuatorMovingMask", value);
    Py_DECREF(value);

    value = Py_BuildValue("i", ito::tActuatorStatus::actEndSwitchMask);
    PyDict_SetItemString(tp_dict, "actuatorEndSwitchMask", value);
    Py_DECREF(value);

    value = Py_BuildValue("i", ito::tActuatorStatus::actRefSwitchMask);
    PyDict_SetItemString(tp_dict, "actuatorRefSwitchMask", value);
    Py_DECREF(value);

    value = Py_BuildValue("i", ito::tActuatorStatus::actSwitchesMask);
    PyDict_SetItemString(tp_dict, "actuatorSwitchesMask", value);
    Py_DECREF(value);

    value = Py_BuildValue("i", ito::tActuatorStatus::actStatusMask);
    PyDict_SetItemString(tp_dict, "actuatorStatusMask", value);
    Py_DECREF(value);*/
}



//----------------------------------------------------------------------------------------------------------------------------------
/** desctructor for dataIO object in python
*   @param [in] self
*
*   Destructs an instance of a dataIO object (plugin), i.e. deletes the according python variable and invokes
*   the closeAddIn function. The object itself is only deleted if the object's <<<erence
*   counter is zero.
*/
void PythonPlugins::PyDataIOPlugin_dealloc(PyDataIOPlugin* self)
{
    if (self->weakreflist != NULL)
    {
        PyObject_ClearWeakRefs((PyObject *) self);
    }

    if (self->dataIOObj)
    {
        ito::AddInInterfaceBase *aib = self->dataIOObj->getBasePlugin();
        if (!aib)
        {
            std::cerr << "error closing plugin" << std::endl;
            //PyErr_SetString(PyExc_RuntimeError, "error closing plugin");
        }
        else
        {
            ito::AddInManager *aim = qobject_cast<ito::AddInManager*>(AppManagement::getAddInManager());
            ito::RetVal retval(ito::retOk);

            ItomSharedSemaphore *waitCond = new ItomSharedSemaphore();

            if (QMetaObject::invokeMethod(aim, "closeAddIn", Q_ARG(ito::AddInBase*, (ito::AddInBase*)self->dataIOObj), Q_ARG(ItomSharedSemaphore*, waitCond)))
            {
                waitCond->wait(-1);
                retval += waitCond->returnValue;
            }
            else
            {
                retval += ito::RetVal(ito::retError, 0, "Member 'closeAddIn' of plugin could not be invoked (error in signal/slot connection).");
            }
            waitCond->deleteSemaphore();
            waitCond = NULL;

            PythonCommon::transformRetValToPyException(retval);
            /*if (retval != ito::retOk)
            {
                PyErr_SetString(PyExc_RuntimeError, "error closing plugin");
            }*/
        }
    }
    DELETE_AND_SET_NULL(self->signalMapper);
    Py_TYPE(self)->tp_free((PyObject*)self);
}

//----------------------------------------------------------------------------------------------------------------------------------
/** constructor for dataIO object in python
*   @param [in] type
*   @return     new python dataIO object
*
*   Creates a new pythonDataIO object. The actual dataIO object (itom) is only created later.
*/
PyObject* PythonPlugins::PyDataIOPlugin_new(PyTypeObject *type, PyObject * /*args*/, PyObject * /*kwds*/)
{
    PyDataIOPlugin *self = NULL;

    self = (PyDataIOPlugin *)type->tp_alloc(type, 0);
    if (self != NULL)
    {
        self->dataIOObj = NULL;
        self->base = NULL;
        self->weakreflist = NULL;
        self->signalMapper = new PythonQtSignalMapper();
    }

    return (PyObject *)self;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(pyDataIOInit_doc, "dataIO(name, *mandparams, *optparams) -> creates new instance of dataIO plugin 'name' \n\
\n\
This is the constructor for a `dataIO` plugin. It initializes an new instance of the plugin specified by 'name'. \n\
The initialisation parameters are parsed and unnamed parameters are used in their incoming order to fill first \n\
mandatory parameters and afterwards optional parameters. Parameters may be passed with name as well but after \n\
the first named parameter no more unnamed parameters are allowed.\n\
\n\
See pluginHelp(name) for detail information about the specific initialisation parameters.\n\
\n\
Parameters \n\
----------- \n\
name : {str} \n\
    is the fullname (case sensitive) of an 'actuator'-plugin as specified in the plugin-window. \n\
mandparams : {variant(s)} \n\
    arguments corresponding the mandatory initialization parameters. The number of arguments and their order must fit the the required mandatory parameters \n\
optparams : {variant(s)}, optional \n\
    argument corresponding to the optional initialization parameters. If unnamed arguments are used, their order must correspond to the order of the optional parameters, keyword-based parameters are allowed as well. \n\
\n\
Returns \n\
-------- \n\
inst : {dataIO} \n\
    new instance of the dataIO-plugin");

/** constructor for dataIO object
*   @param [in] self    the according dataIO object
*   @param [in] args    unnamed arguments passed to the constructor in python
*   @return             -1 in case an error occured, else 0
*
*   The dataIO passed must be a valid dataIO object. In case the autoloading of parameters is activated for this
*   plugin the default parameters are loaded.
*/
int PythonPlugins::PyDataIOPlugin_init(PyDataIOPlugin *self, PyObject *args, PyObject *kwds)
{

    if (args == NULL) //args is only NULL, instance of dataIO is created by a c-code fragment. Then the content of the type-struct has to be filled by the c-code, too.
    {
        return 0;
    }

    self->dataIOObj = NULL;

    int length = PyTuple_Size(args);

    if (length == 0)
    {
        PyErr_SetString(PyExc_ValueError, "no plugin specified");
        return -1;
    }
    else if (length == 1) //!< copy constructor or name only
    {
        PyDataIOPlugin* copyPlugin = NULL;

        if (PyArg_ParseTuple(args, "O!", &PyDataIOPluginType, &copyPlugin))
        {
            //try to increment reference of copyPlugin->dataIOObj
            if (copyPlugin->dataIOObj)
            {
                copyPlugin->dataIOObj->getBasePlugin()->incRef(copyPlugin->dataIOObj);
            }
            
            self->dataIOObj = copyPlugin->dataIOObj;
            self->base = copyPlugin->base;

            return 0;
        }
    }

    PyErr_Clear();
    QVector<ito::Param> *paramsMand = NULL;
    QVector<ito::Param> *paramsOpt = NULL;
    ito::RetVal retval = ito::retOk;
    int pluginNum = -1;
    PyObject *pnameObj = NULL;
    PyObject *params = NULL;
    QString pluginName;

    QVector<ito::ParamBase> paramsMandCpy;
    QVector<ito::ParamBase> paramsOptCpy;

    ito::AddInManager *AIM = qobject_cast<ito::AddInManager*>(AppManagement::getAddInManager());
    if (!AIM)
    {
        PyErr_SetString(PyExc_RuntimeError, "no addin-manager found");
        return -1;
    }

    pnameObj = PyTuple_GetItem(args, 0);
    if (PyUnicode_Check(pnameObj))
    {
        bool ok = false;
        pluginName = PythonQtConversion::PyObjGetString(pnameObj,false,ok);
    }
    else
    {
        PyErr_SetString(PyExc_TypeError, "invalid parameters");
        return -1;
    }

    retval = AIM->getInitParams(pluginName, ito::typeDataIO, &pluginNum, paramsMand, paramsOpt);
    if (retval.containsWarningOrError())
    {
        PythonCommon::setReturnValueMessage(retval, pluginName, PythonCommon::loadPlugin);
        return -1;
    }

    bool enableAutoLoadParams = false;
    retval = findAndDeleteReservedInitKeyWords(kwds, &enableAutoLoadParams);
    if (retval.containsWarningOrError())
    {
        PythonCommon::setReturnValueMessage(retval, pluginName, PythonCommon::loadPlugin);
        return -1;
    }
    else
    {
        params = PyTuple_GetSlice(args, 1, PyTuple_Size(args)); //new reference

        if (parseInitParams(paramsMand, paramsOpt, params, kwds, paramsMandCpy, paramsOptCpy) != ito::retOk)
        {
            Py_XDECREF(params);
            PyErr_SetString(PyExc_ValueError, "error while parsing parameters.");
            return -1;
        }
        Py_XDECREF(params);

        ItomSharedSemaphore *waitCond = new ItomSharedSemaphore();

        if (QMetaObject::invokeMethod(AIM, "initAddIn", Q_ARG(int, pluginNum), Q_ARG(QString, pluginName), Q_ARG(ito::AddInDataIO**, &self->dataIOObj), Q_ARG(QVector<ito::ParamBase>*, &paramsMandCpy), Q_ARG(QVector<ito::ParamBase>*, &paramsOptCpy), Q_ARG(bool, enableAutoLoadParams), Q_ARG(ItomSharedSemaphore*, waitCond)))
        {
            waitCond->wait(-1);
            retval += waitCond->returnValue;
        }
        else
        {
            retval += ito::RetVal(ito::retError, 0, QObject::tr("Member 'initAddIn' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
        }

        waitCond->deleteSemaphore();
        waitCond = NULL;

        paramsMandCpy.clear();
        paramsOptCpy.clear();
    }

    if (!PythonCommon::setReturnValueMessage(retval, pluginName, PythonCommon::loadPlugin))
    {
        return -1;
    }

    return 0;
}



//----------------------------------------------------------------------------------------------------------------------------------   
//PyDoc_STRVAR(PyDataIOPlugin_name_doc, -> see pyPluginName_doc);

/** Returns the plugin's name
*   @param [in] self    the plugin object
*   @return             the name of the plugin
*
*                       Queries the name of a plugin by invoking a getParam on the plugin for the name parameter
*/
PyObject* PythonPlugins::PyDataIOPlugin_name(PyDataIOPlugin* self)
{
    return getName(self->dataIOObj);
}

//----------------------------------------------------------------------------------------------------------------------------------
PyObject* PythonPlugins::PyDataIOPlugin_repr(PyDataIOPlugin *self)
{
    PyObject *result;
    if (self->dataIOObj == NULL)
    {
        result = PyUnicode_FromFormat("empty dataIO plugin");
    }
    else
    {
        PyObject *name = getName(self->dataIOObj);
        if (name)
        {
            QString ident = self->dataIOObj->getIdentifier();
            if(ident != "")
            {
                result = PyUnicode_FromFormat("DataIO-Plugin(%U, %s, ID: %i)", name, ident.toLatin1().data(), self->dataIOObj->getID());
            }
            else
            {
                result = PyUnicode_FromFormat("DataIO-Plugin(%U, ID: %i)", name, self->dataIOObj->getID());
            }
            Py_DECREF(name);
        }
        else
            result = PyUnicode_FromFormat("dataIO-Plugin, time out reading name");
    }
    return result;
}

//----------------------------------------------------------------------------------------------------------------------------------
/** returns the list of available parameters
*   @param [in] self    the dataIO object (python)
*   @return             a string with all available parameters for this dataIO
*
*   All parameters of the plugin are shown. This can be useful as there are only few standard parameters
*   for an dataIO. The majority is depending on the actual hardware and accordingly is different for each
*   plugin.
*/
PyObject* PythonPlugins::PyDataIOPlugin_getParamList(PyDataIOPlugin* self)
{
    ito::AddInBase *aib = self->dataIOObj;
    return getParamList(aib);
}
//----------------------------------------------------------------------------------------------------------------------------------
/** returns the list of available parameters and additional information about the plugin
*   @param [in] self    the dataIO object (python)
*   @return             a string with all available parameters for this dataIO
*
*   All parameters of the plugin are shown with additional information as min, max and infostring.
*   This can be useful as there are only few standard parameters for an dataIO. The majority is
*   depending on the actual hardware and accordingly is different for each plugin.
*/
PyObject* PythonPlugins::PyDataIOPlugin_getParamListInfo(PyDataIOPlugin* self, PyObject *args)
{
    ito::AddInBase *aib = self->dataIOObj;
    return getParamListInfo(aib, args);
}

/** returns the list of available ExecFunctions' names
*   @param [in] self    the actuator object (python)
*   @return             a List with all available parameters for this actuator
*
*   All ExecFunctions of the plugin are shown or one specific ExecFunctions with additional information as min, max and infostring is shown.
*   This can be useful as there are only few standard parameters for an actuator. The majority is
*   depending on the actual hardware and accordingly is different for each plugin.
*/
PyObject* PythonPlugins::PyDataIOPlugin_getExecFuncsList(PyActuatorPlugin* self)
{
    ito::AddInBase *aib = self->actuatorObj;
    return getExecFuncsList(aib);
}
/** returns the list of available parameters and additional information about the plugin ExecFunctions
*   @param [in] self    the actuator object (python)
*   @return             a dictionary with all available parameters for this actuator
*
*   All ExecFunctions of the plugin are shown or one specific ExecFunctions with additional information as min, max and infostring is shown.
*   This can be useful as there are only few standard parameters for an dataIO. The majority is
*   depending on the actual hardware and accordingly is different for each plugin.
*/
PyObject* PythonPlugins::PyDataIOPlugin_getExecFuncsInfo(PyDataIOPlugin* self, PyObject *args, PyObject *kwds)
{
    ito::AddInBase *aib = self->dataIOObj;
    return getExecFuncsInfo(aib, args, kwds);
}

//----------------------------------------------------------------------------------------------------------------------------------
/** return a parameter value
*   @param [in] self        the addIn whoes parameter is requested
*   @param [in] args        the parameter name
*   @return     python object with the parameter value on success (parameter exists), NULL otherwise
*
*   The function tries to retrieve the value of the parameter with the name given in args. If the parameter does not exist
*   NULL is returned. To actually retrieve the value the getParam function of the plugin is invoked.
*/
PyObject* PythonPlugins::PyDataIOPlugin_getParam(PyDataIOPlugin *self, PyObject *args)
{
    return getParam(self->dataIOObj, args);
}

//----------------------------------------------------------------------------------------------------------------------------------
/** set a parameter to a new value
*   @param [in] self    the actuator object (python)
*   @param [in] args    the parameter name and new value
*   @return             an error if the parameter wasn't found or the passed value is out of the limits
*
*   The setParam method of the plugin is invoked and the parameter is set to the new value in case the passed value
*   is within the limits.
*/
PyObject* PythonPlugins::PyDataIOPlugin_setParam(PyDataIOPlugin *self, PyObject *args)
{
    return setParam(self->dataIOObj, args);
}

//----------------------------------------------------------------------------------------------------------------------------------
/** returns dictionary with meta information about desired parameter
*   @param [in] self    the actuator object (python)
*   @param [in] args    the parameter name
*   @return             an error if the parameter wasn't found
*
*   The getParamInfo method of the plugin is invoked
*/
PyObject* PythonPlugins::PyDataIOPlugin_getParamInfo(PyDataIOPlugin* self, PyObject * args)
{
    return getParamInfo(self->dataIOObj, args);
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyDataIOPlugin_startDevice_doc,"startDevice(count = 1) -> starts the given dataIO-plugin. \n\
\n\
This command starts the dataIO plugin such that it is ready for data acquisition. Call this method before you start \n\
using commands like acquire, `getVal` or `copyVal`. If the device already is started, an internal start-counter is incremented \n\
by the parameter 'count'. The corresponding `stopDevice` method then decrements this counter and finally stops the device once \n\
the counter drops to zero again. \n\
\n\
The counter is necessary, since every connected live image needs to start the device without knownledge about any \n\
previous start. No acquisition is possible, if the device has not been started, hence the counter is 0. \n\
\n\
Parameters \n\
----------- \n\
count : {int}, optional \n\
    Number of increments to the internal start-counter [default:1] \n\
\n\
See Also \n\
--------- \n\
stopDevice()");
/** start a dataIO device, i.e. prepare it for recording data
*   @param [in] self    the dataIO object (python)
*   @param [in] args    should be empty
*   @return             an error if the device could not be started
*
*   Start a dataIO device, i.e. prepare it for the acquisition of data. Usually the device is first initialized, then
*   then it is started using this function afterwards a number of acquisitions is done (using \ref PyDataIOPlugin_acquire and
*   \ref PyDataIOPlugin_getVal) and only after the last data set is recorded it is stopped again.
*/
PyObject* PythonPlugins::PyDataIOPlugin_startDevice(PyDataIOPlugin *self, PyObject *args)
{
    int count = 1;

    if (!PyArg_ParseTuple(args, "|i", &count))
    {
        return NULL;
    }

    if (count < 0)
    {
        PyErr_SetString(PyExc_ValueError, "argument 'count' must be >= 0");
        return NULL;
    }
    ito::RetVal ret = ito::retOk;
    ItomSharedSemaphore *waitCond = NULL;
    bool timeout = false;

    for (int i = 0 ; i < count ; i++)
    {
        waitCond = new ItomSharedSemaphore();
        if (QMetaObject::invokeMethod(self->dataIOObj, "startDevice", Q_ARG(ItomSharedSemaphore*, waitCond)))
        {

            while (!waitCond->wait(AppManagement::timeouts.pluginGeneral))
            {
                if (!self->dataIOObj->isAlive())
                {
                    ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while calling 'startDevice'").toLatin1().data());
                    timeout = true;
                    break;
                }
            }

            if (!timeout)
            {
                ret += waitCond->returnValue;
            }
        }
        else
        {
            ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'startDevice' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
        }

        waitCond->deleteSemaphore();
        waitCond = NULL;
        if (!PythonCommon::setReturnValueMessage(ret, "startDevice", PythonCommon::invokeFunc))
        {
            return NULL;
        }
    }
    
    Py_RETURN_NONE;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyDataIOPlugin_stopDevice_doc,"stopDevice(count = 1) -> stops the given dataIO-plugin. \n\
\n\
If this method is called as many times as the corresponding `startDevice` (or if the counts are equal), the \n\
dataIO device is stopped (not deleted) and it is not possible to acquire further data. \n\
\n\
Once a live image is connected to a camera, `startDevice` is automatically called at start of the live acquisition \n\
and `stopDevice` at shutdown. \n\
\n\
Parameters \n\
----------- \n\
count : {int}, optional\n\
    default = 1\n\
    if count > 1, `stopDevice` is executed 'count' times, in order to decrement the grabber internal start counter. \n\
    You can also use -1 as count argument, then `stopDevice` is repeated until the internal start counter is 0. The number of effective counts is then returned \n\
\n\
Returns \n\
-------- \n\
counts : {None or int} \n\
    If `count == -1` the number of required counts to finally stop the device is returned. Else: None \n\
\n\
See Also \n\
--------- \n\
startDevice()");

/** stop a dataIO device
*   @param [in] self    the dataIO object (python)QString
*   @param [in] args    should be empty
*   @return             an error if the device could not be stopped
*
*   Stop a dataIO device, i.e. it is no longer possible to acquire data with it. See also \ref PyDataIOPlugin_startDevice
*/
PyObject* PythonPlugins::PyDataIOPlugin_stopDevice(PyDataIOPlugin *self, PyObject *args)
{
    int count = 1;

    if (!PyArg_ParseTuple(args, "|i", &count))
    {
        return NULL;
    }

    ito::RetVal ret = ito::retOk;
    ItomSharedSemaphore *waitCond = NULL;
    bool timeout = false;

    if (count >= 0)
    {
        for (int i = 0 ; i < count ; i++)
        {
            waitCond = new ItomSharedSemaphore();
            if (QMetaObject::invokeMethod(self->dataIOObj, "stopDevice", Q_ARG(ItomSharedSemaphore*, waitCond)))
            {
                while (!waitCond->wait(AppManagement::timeouts.pluginGeneral))
                {
                    if (!self->dataIOObj->isAlive())
                    {
                        ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while stopping device").toLatin1().data());
                        timeout = true;
                        break;
                    }
                }

                if (!timeout)
                {
                    ret += waitCond->returnValue;
                }
            }
            else
            {
                ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'stopDevice' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
            }

            waitCond->deleteSemaphore();
            waitCond = NULL;

            if (!PythonCommon::setReturnValueMessage(ret, "stopDevice", PythonCommon::invokeFunc))
            {
                return NULL;
            }
        }
    
        Py_RETURN_NONE;
    }
    else if (count == -1)
    {
        count = -1;
        bool timeout = false;
        while(!ret.containsWarningOrError())
        {
            count++;
            waitCond = new ItomSharedSemaphore();
            QMetaObject::invokeMethod(self->dataIOObj, "stopDevice", Q_ARG(ItomSharedSemaphore*, waitCond));

            while (!waitCond->wait(AppManagement::timeouts.pluginGeneral))
            {
                if (!self->dataIOObj->isAlive())
                {
                    ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while stopping device").toLatin1().data());
                    timeout = true;
                    break;
                }
            }

            ret += waitCond->returnValue;
            waitCond->deleteSemaphore();
            waitCond = NULL;
        }

        if (timeout)
        {
            if (!PythonCommon::setReturnValueMessage(ret, "stopDevice", PythonCommon::invokeFunc))
            {
                return NULL;
            }
            return NULL;
        }
        else
        {
            return Py_BuildValue("i",count);
        }

    }
    else
    {
        PyErr_SetString(PyExc_ValueError, "argument 'count' must be >= 0 or -1");
        return NULL;
    }
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyDataIOPlugin_acquire_doc,"acquire(trigger = dataIO.TRIGGER_SOFTWARE) -> triggers a new the camera acquisition \n\
\n\
This method triggers a new data acquisition. This method immediately returns even if the acquisition is not finished yet. \n\
Use `getVal` or `copyVal` to get the acquired data. Both methods block until the data is available. \n\
\n\
Parameters \n\
----------- \n\
trigger : {int}, optional\n\
    Type of the trigger: \n\
    \n\
    * `dataIO.TRIGGER_SOFTWARE = 0` : a software trigger is started, hence, the acquisition is immediately started when calling this method\n\
    * others : depending on your camera, this parameter can be used to set other triggers, like hardware trigger with raising or falling edges...");

/** acquire data with a dataIO device
*   @param [in] self    the dataIO object (python)
*   @param [in] args    number of acquisitions
*   @return             an error if no data could be acquired
*
*   After the device has been initialized and started this method can be used to trigger the acquisition of a
*   data set. The data is then recorded depending on the actually set parameters of the device and can
*   be afterwards retrieved from the device using the \ref getVal method.
*/
PyObject* PythonPlugins::PyDataIOPlugin_acquire(PyDataIOPlugin *self, PyObject *args)
{
    int trigger = 0;
    ito::RetVal ret = ito::retOk;

    if (PyArg_ParseTuple(args, "|i", &trigger) == false)
    {
        return NULL;
    }

    ItomSharedSemaphore *waitCond = new ItomSharedSemaphore();
    bool timeout = false;
    if (QMetaObject::invokeMethod(self->dataIOObj, "acquire", Q_ARG(int, trigger), Q_ARG(ItomSharedSemaphore*, waitCond)))
    {

        while (!waitCond->wait(AppManagement::timeouts.pluginGeneral))
        {
            if (!self->dataIOObj->isAlive())
            {
                ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while calling 'acquire'").toLatin1().data());
                timeout = true;
                break;
            }
        }

        if (!timeout)
        {
            ret += waitCond->returnValue;
        }
    }
    else
    {
        ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'acquire' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
    }

    waitCond->deleteSemaphore();
    waitCond = NULL;

    if (!PythonCommon::setReturnValueMessage(ret, "acquire", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    Py_RETURN_NONE;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyDataIOPlugin_stop_doc, "stop() -> stops a started, continuous acquisition \n\
\n\
This method stops a previously started, continuous data acquisition. This method is not always \n\
implemented in plugins. A common example for its implementation is to stop an infinite, continuous \n\
acquisition job of a AD-converter plugin. \n\
\n\
See also\n\
---------\n\
acquire()");

/** stop continuous acquisiiton with a dataIO device
*   @param [in] self    the dataIO object (python)
*   @return             an error if no data could be acquired
*/
PyObject* PythonPlugins::PyDataIOPlugin_stop(PyDataIOPlugin *self)
{
    ito::RetVal ret = ito::retOk;

    ItomSharedSemaphore *waitCond = new ItomSharedSemaphore();
    bool timeout = false;
    
    if (QMetaObject::invokeMethod(self->dataIOObj, "stop", Q_ARG(ItomSharedSemaphore*, waitCond)))
    {
        while (!waitCond->wait(AppManagement::timeouts.pluginGeneral))
        {
            if (!self->dataIOObj->isAlive())
            {
                ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while calling 'stop'").toLatin1().data());
                timeout = true;
                break;
            }
        }

        if (!timeout)
        {
            ret += waitCond->returnValue;
        }
    }
    else
    {
        ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'stop' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
    }

    waitCond->deleteSemaphore();
    waitCond = NULL;

    if (!PythonCommon::setReturnValueMessage(ret, "stop", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    Py_RETURN_NONE;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyDataIOPlugin_getVal_doc,"getVal(buffer=`dataObject`|`bytearray`|`bytes` , length = maxlength) -> returns shallow copy of internal camera image if `dataObject`-buffer is provided. Else values from plugin are copied to given byte or byte-array buffer. \n\
\n\
Returns a reference (shallow copy) of the recently acquired image (located in the internal memory if the plugin) if the plugin is a grabber or camera and the buffer is a `dataObject`. \n\
Please consider that the values of the `dataObject` might change if a new image is acquired since it is only a reference. Therefore consider copying the `dataObject` or directly use \n\
`copyVal`. \n\
\n\
If no acquisition has been triggered, this method raises a RuntimeError. If the acquisition is not finished yet, this method \n\
blocks and waits until the end of the acquisition. \n\
\n\
If the plugin is another type than a grabber or camera (e.g. serialIO), this method requires any buffer-object that is preallocated with a reasonable size. Then, the currently available \n\
data is copied into this buffer object and the size of the copied data is returned. If the buffer is too small, only the data that fits into the buffer is copied. Another call to \n\
`getVal` will copy the rest. \n\
\n\
Parameters \n\
----------- \n\
buffer : {`dataObject`, `bytearray`, `bytes` or `str`} \n\
    this parameter depends on the type of dataIO-instance: \n\
    \n\
    * cameras, grabber: the buffer must be a `dataObject` (no length parameter): A reference (shallow copy) to the internal memory of the camera plugin is set to the given data object. \
    Therefore its content may change if a new image is being acquired by the camera. Consider taking a deep copy if the image (`dataObject.copy`) or use the method `copyVal`. \n\
    * other IO-devices (AD-converters): The buffer must be an object of type `dataObject`, bytearray, bytes or unicode string. The length parameter is then set to the size of the buffers. The effective \
    size of the used memory in buffer is returned. \n\
length : {int}, optional \n\
    size of the given buffer. This value is usually automatically determined and must not be given. \n\
\n\
Returns \n\
-------- \n\
out : {None or int} \n\
    None or size of used buffer if buffer is no `dataObject` \n\
\n\
See Also \n\
--------- \n\
copyVal()");

/** get values from a dataIO device
*   @param [in] self    the dataIO object (python)
*   @param [in] args    input buffer
*   @return             an error if no data could be retrieved
*
*   After a device has been started and an acquisition was triggered the result can be retrieved from the device with the
*   getVal method. As argument the input buffer is passed.
*/
PyObject* PythonPlugins::PyDataIOPlugin_getVal(PyDataIOPlugin *self, PyObject *args)
{
    ito::RetVal ret = ito::retOk;
    PyObject* bufferObj = NULL;
    PythonDataObject::PyDataObject* bufferDataObj = NULL;
    ito::DataObject *dObj = NULL;
    Py_ssize_t length = -1;
    ItomSharedSemaphoreLocker locker;
    unsigned int invokeMethod = -1;
    QSharedPointer<int> maxLength(new int);
    *maxLength = 0;
    QSharedPointer<char> sharedBuffer;
    char* tempBuf = NULL;

    //check whether object is a data object
    if (PyArg_ParseTuple(args, "O!", &PythonDataObject::PyDataObjectType, &bufferDataObj))
    {
        dObj = ((PythonDataObject::PyDataObject *)bufferDataObj)->dataObject;

        if (dObj == NULL)
        {
            PyErr_SetString(PyExc_RuntimeError, "given data object is empty (internal dataObject-pointer is NULL)");
            return NULL;
        }

        locker = (new ItomSharedSemaphore());
        QMetaObject::invokeMethod(self->dataIOObj, "getVal", Q_ARG(void*, (void*)dObj), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore()));
        invokeMethod = 1;
    }
    else if (PyErr_Clear(), PyArg_ParseTuple(args, "O|i", &bufferObj, &length))
    {
        if (PyByteArray_Check(bufferObj))
        {
            tempBuf  = (char *)PyByteArray_AsString(bufferObj);
            sharedBuffer = PythonSharedPointerGuard::createPythonSharedPointer<char>(tempBuf, bufferObj);
            *maxLength = static_cast<int>(length < 0 ? PyByteArray_Size(bufferObj) : qMin(PyByteArray_Size(bufferObj),length));
        }
        else if (PyBytes_Check(bufferObj))
        {
            tempBuf  = (char *)PyBytes_AsString(bufferObj);
            sharedBuffer = PythonSharedPointerGuard::createPythonSharedPointer<char>(tempBuf, bufferObj);
            *maxLength = static_cast<int>(length < 0 ? PyBytes_Size(bufferObj) : qMin(PyBytes_Size(bufferObj),length));
        }
        else if (sizeof(Py_UNICODE) == sizeof(char) && PyUnicode_Check(bufferObj))
        {
            tempBuf = (char*)PyUnicode_AS_DATA(bufferObj);
            sharedBuffer = PythonSharedPointerGuard::createPythonSharedPointer<char>(tempBuf, bufferObj);
            *maxLength = static_cast<int>(length < 0 ? (Py_ssize_t)strlen(tempBuf) : qMin((Py_ssize_t)strlen(tempBuf), length));
        }
        else
        {
            PyErr_SetString(PyExc_RuntimeError, "arguments of method must be a byte array, byte object or unicode object (only if unicode corresponds to a 8bit char) - in the case that a length value is provided");
            return NULL;
        }

        if (*maxLength <= 0)
        {
            PyErr_SetString(PyExc_RuntimeError, "length of given buffer is zero.");
            return NULL;
        }

        locker = (new ItomSharedSemaphore());
        QMetaObject::invokeMethod(self->dataIOObj, "getVal", Q_ARG(QSharedPointer<char>, sharedBuffer), Q_ARG(QSharedPointer<int>, maxLength), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore()));
        invokeMethod = 2;
    }
    else
    {
        PyErr_Clear();
        PyErr_SetString(PyExc_RuntimeError, "arguments of method must be either one data object or a byte array, byte object or unicode object (only if unicode corresponds to a 8bit char) followed by an optional maximum length.");
        return NULL;
    }

    bool timeout = false;
    while (!locker.getSemaphore()->wait(AppManagement::timeouts.pluginGeneral))
    {
        if (!self->dataIOObj->isAlive())
        {
            ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while calling 'getVal'").toLatin1().data());
            timeout = true;
            break;
        }
    }

    if (!timeout)
    {
        ret += locker.getSemaphore()->returnValue;
    }
    
    if (!PythonCommon::setReturnValueMessage(ret, "getVal", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    if (invokeMethod == 1)
    {
        Py_RETURN_NONE; //in case of data-object
    }
    else
    {
        return PyLong_FromLong(*maxLength);
    }
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyDataIOPlugin_copyVal_doc,"copyVal(destObject) -> gets deep copy of data of this plugin, stored in the given data object. \n\
\n\
Returns a deep copy of the recently acquired data (for grabber and ADDA only) of the camera or AD-converter device. \n\
The deep copy sometimes requires one copy operation more than the similar command `getVal`. However, `getVal` only returns \n\
a reference to the plugin internal data structure whose values might be changed if another data acquisition is started. \n\
\n\
If no acquisition has been triggered, this method raises a RuntimeError. If the acquisition is not finished yet, this method \n\
blocks and waits until the end of the acquisition. \n\
\n\
Parameters \n\
----------- \n\
destObject : {dataObject}\n\
    `dataObject` where the plugin data is copied to. Either provide an empty `dataObject` or a `dataObject` whose size (or region of interest) \n\
    exactly has the same size than the available data of the plugin. Therefore you can allocate a 3D data object, set a region of interest \n\
    to one plane such that the data from the plugin is copied into this plane. \n\
\n\
Raises \n\
------- \n\
RuntimeError \n\
    if the dataIO plugin is anything else than ADDA or grabber\n\
    or if no acquisition has been triggered \n\
\n\
See Also \n\
--------- \n\
getVal()");
/** copy values from a dataIO device to an existing dataObject
*   @param [in] self    the dataIO object (python)
*   @param [in] args    input buffer
*   @return             an error if no data could be retrieved
*
*   After a device has been started and an acquisition was triggered the result can be retrieved from the device with the
*   getVal method. As argument the input buffer is passed.
*/
PyObject* PythonPlugins::PyDataIOPlugin_copyVal(PyDataIOPlugin *self, PyObject *args)
{
    int length = PyTuple_Size(args);
    PyObject *tempObj = NULL;
    ito::RetVal ret = ito::retOk;

    if (self->dataIOObj->getBasePlugin()->getType() & ito::typeGrabber)
    {
        if (length != 1)
        {
            PyErr_Format(PyExc_ValueError, "too many parameters");
            return NULL;
        }

        tempObj = PyTuple_GetItem(args, 0);
        ito::DataObject *dObj = NULL;

        if ((Py_TYPE(tempObj) == &PythonDataObject::PyDataObjectType))
        {
            dObj = ((PythonDataObject::PyDataObject *)tempObj)->dataObject;
        }
        else
        {
            PyErr_SetString(PyExc_TypeError, "argument must be of type itom.dataObject.");
            return NULL;
        }

        if (dObj == NULL)
        {
            PyErr_SetString(PyExc_ValueError, "invalid dataObject");
            return NULL;
        }

        ItomSharedSemaphoreLocker locker(new ItomSharedSemaphore());

        if (QMetaObject::invokeMethod(self->dataIOObj, "copyVal", Q_ARG(void*, (void *)dObj), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore())))
        {
            bool timeout = false;

            while (!locker.getSemaphore()->wait(AppManagement::timeouts.pluginGeneral))
            {
                if (!self->dataIOObj->isAlive())
                {
                    timeout = true;
                    ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while calling 'copyVal'").toLatin1().data());
                    break;
                }
            }

            if (!timeout)
            {
                ret += locker.getSemaphore()->returnValue;
            }
        }
        else
        {
            ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'copyVal' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
        }

    }
    else if (self->dataIOObj->getBasePlugin()->getType() & ito::typeADDA)
    {
        if (length != 1)
        {
            PyErr_SetString(PyExc_ValueError, "too many parameters");
            return NULL;
        }

        ito::DataObject *dObj = NULL;
        tempObj = PyTuple_GetItem(args, 0);

        if ((Py_TYPE(tempObj) == &PythonDataObject::PyDataObjectType))
        {
            dObj = ((PythonDataObject::PyDataObject *)tempObj)->dataObject;
        }

        ItomSharedSemaphoreLocker locker(new ItomSharedSemaphore());
        
        if (QMetaObject::invokeMethod(self->dataIOObj, "copyVal", Q_ARG(void *, (void *)dObj), Q_ARG(ItomSharedSemaphore*, locker.getSemaphore())))
        {
            bool timeout = false;

            while (!locker.getSemaphore()->wait(AppManagement::timeouts.pluginGeneral))
            {
                if (!self->dataIOObj->isAlive())
                {
                    timeout = true;
                    ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while calling 'copyVal'").toLatin1().data());
                    break;
                }
            }

            ret += locker.getSemaphore()->returnValue;

        }
        else
        {
            ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'copyVal' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
        }
    }
    else
    {
        ret += ito::RetVal(ito::retError, 0, QObject::tr("copyVal function only implemented for typeADDA and typeGrabber").toLatin1().data());
    }

    if (!PythonCommon::setReturnValueMessage(ret, "copyVal", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    Py_RETURN_NONE;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyDataIOPlugin_setVal_doc,"setVal(dataObjectOrBuffer [, length=1]) -> transfer given `dataObject` to ADDA plugin or further buffer to other dataIO plugin.\n\
\n\
If the dataIO plugin has the subtype ADDA, this method is used to send data to one or more analog outputs of the device. \n\
In this case a `dataObject` must be given as first argument and the second argument `length` must be 1. \n\
\n\
For other dataIO plugins, the first argument must be any buffer object, like `bytearray`, `bytes` or `unicode string`. The length is then extracted \n\
from this value. However it is also possible to define a user-defined size using the 'length' argument. \n\
\n\
Parameters \n\
----------- \n\
dataObjectOrBuffer : {`dataObject`, `bytearray`, `bytes`, `str`}\n\
    value to send to plugin. For an ADDA plugin, a `dataObject` is required whose content is sent to the analogous outputs of the device. For other dataIO \n\
    plugins buffer values like `bytearray`, `bytes` or `unicode string` are required. \n\
length : {int}, optional \n\
    usually this value is not required, since the length of the buffer is automatically extracted from the given objects and 1 for a `dataObject`");

/** write values to a dataIO device
*   @param [in] self    the dataIO object (python)
*   @param [in] args    output buffer
*   @return             an error if no data could be retrieved
*
*   Analog to the \ref getVal method this method writes data to a dataIO device (e.g. a DA converter or serial port).The
*   data passed in the output buffer is written to the device according to its current parameters.
*/
PyObject* PythonPlugins::PyDataIOPlugin_setVal(PyDataIOPlugin *self, PyObject *args)
{
    int length = PyTuple_Size(args);
    PyObject *tempObj = NULL;
    PyObject *tempObj1 = NULL;
    ito::RetVal ret = ito::retOk;

    if (length == 0 || length > 2)
    {
        PyErr_SetString(PyExc_ValueError, "invalid number of parameters (1 or 2 arguments requested)");
        return NULL;
    }

    if (self->dataIOObj->getBasePlugin()->getType() & ito::typeADDA)
    {
        ito::DataObject *dObj = NULL;
        int datalen = 0;
        tempObj = PyTuple_GetItem(args, 0);
        if (length > 1)
        {
            tempObj1 = PyTuple_GetItem(args, 1);
            datalen = PyLong_AsLong(tempObj1);
            if (datalen != 1)
            {
                PyErr_SetString(PyExc_ValueError, "only one dataobject can be passed");
                return NULL;
            }
        }

        if ((Py_TYPE(tempObj) == &PythonDataObject::PyDataObjectType))
        {
            dObj = ((PythonDataObject::PyDataObject *)tempObj)->dataObject;
        }

        ItomSharedSemaphore *waitCond = new ItomSharedSemaphore();
        if (QMetaObject::invokeMethod(self->dataIOObj, "setVal", Q_ARG(const char *, (const char *)dObj), Q_ARG(int, 1), Q_ARG(ItomSharedSemaphore*, waitCond)))
        {
            bool timeout = false;

            while (!waitCond->wait(AppManagement::timeouts.pluginGeneral))
            {
                if (!self->dataIOObj->isAlive())
                {
                    timeout = true;
                    ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while calling 'setVal'").toLatin1().data());
                    break;
                }
            }

            if (!timeout)
            {
                ret += waitCond->returnValue;
            }
        }
        else
        {
            ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'setVal' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
        }

        waitCond->deleteSemaphore();
        waitCond = NULL;
    }
    else
    {
        const char *buf = NULL;
        tempObj = PyTuple_GetItem(args, 0);

        if (length >= 2)
        {
            tempObj1 = PyTuple_GetItem(args, 1);
        }

        QString tempString;
        QByteArray ba;
        int datalen = 0;

        if (PyByteArray_Check(tempObj))
        {
            buf = PyByteArray_AsString(tempObj);
            datalen = PyByteArray_Size(tempObj);
        }
        else if (PyBytes_Check(tempObj))
        {
            buf = PyBytes_AsString(tempObj);
            datalen = PyBytes_Size(tempObj);
        }
        else if (PyUnicode_Check(tempObj))
        {
            //Py_ssize_t stringLengthByte = PyUnicode_GET_DATA_SIZE(tempObj);
            if (sizeof(Py_UNICODE) == sizeof(wchar_t))
            {
                tempString = QString::fromWCharArray((wchar_t*)PyUnicode_AS_DATA(tempObj));
                ba = tempString.toLatin1();
                buf = ba.data();
                datalen = ba.length();
            }
            else if (sizeof(Py_UNICODE) == 1)
            {
                buf = PyUnicode_AS_DATA(tempObj);
                datalen = (int)strlen(buf);
            }
            else if (sizeof(Py_UNICODE) == 2)
            {
                tempString = QString::fromUtf16((ushort*)PyUnicode_AS_DATA(tempObj));
                ba = tempString.toLatin1();
                buf = ba.data();
                datalen = ba.length();
            }
            else if (sizeof(Py_UNICODE) == 4)
            {
                tempString = QString::fromUcs4((uint*)PyUnicode_AS_DATA(tempObj));
                ba = tempString.toLatin1();
                buf = ba.data();
                datalen = ba.length();
            }
            else
            {
                PyErr_Format(PyExc_TypeError, "given unicode must have an element size of 1,2 or 4 bytes. Given is %i.", sizeof(Py_UNICODE));
                return NULL;
            }
        }
        else
        {
            PyErr_SetString(PyExc_TypeError, "wrong parameter type (char buffer | byte array)");
            return NULL;
        }

        if (length == 2)
        {
            if (PyLong_Check(tempObj1))
            {
                datalen = PyLong_AsLong(tempObj1);
            }
            else
            {
                PyErr_SetString(PyExc_RuntimeError, "given length parameter must be a fixed-point number");
                return NULL;
            }
        }

        ItomSharedSemaphore *waitCond = new ItomSharedSemaphore();
        
        if (QMetaObject::invokeMethod(self->dataIOObj, "setVal", Q_ARG(const char *, (const char *)buf), Q_ARG(int, datalen), Q_ARG(ItomSharedSemaphore*, waitCond)))
        {        
            bool timeout = false;
            while (!waitCond->wait(AppManagement::timeouts.pluginGeneral))
            {
                if (!self->dataIOObj->isAlive())
                {
                    timeout = true;
                    ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while calling 'setVal'").toLatin1().data());
                    break;
                }
            }

            if (!timeout)
            {
                ret += waitCond->returnValue;
            }
        }
        else
        {
            ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'setVal' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
        }

        waitCond->deleteSemaphore();
        waitCond = NULL;
    }

    if (!PythonCommon::setReturnValueMessage(ret, "setVal", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    Py_RETURN_NONE;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyDataIOPlugin_enableAutoGrabbing_doc,"enableAutoGrabbing() -> enable auto grabbing for the grabber (camera...), \n\
\n\
If the auto grabbing flag is set, the camera acquisition is automatically and continuously triggered if at least one live image is \n\
connected. This is an undesired behaviour if a measurement is started where the acquisition should be controlled by a specific \n\
script or something similar. Then disable the auto grabbing property. All connected live images will then get new images when \n\
`getVal` or `copyVal` is called by the script. The live image timer is disabled. \n\
\n\
This method enables the auto grabbing flag. \n\
\n\
See Also \n\
--------- \n\
setAutoGrabbing(on), disableAutoGrabbing(), getAutoGrabbing()");
               
/** enable timer triggered autograbbing of a dataIO device
*   @param [in] self    the dataIO object (python)
*   @param [in] args    empty
*   @return             an error if autograbbing is not possible
*
*   For live viewing of data incoming from a dataIO device the autograbbing must be enabled. It starts a timer which triggers
*   periodically the data acquisition and pushes the new buffer to the output graph(s).
*/
PyObject *PythonPlugins::PyDataIOPlugin_enableAutoGrabbing(PyDataIOPlugin *self, PyObject * /*args*/)
{
    ito::RetVal ret = ito::retOk;
    ItomSharedSemaphore *waitCond = new ItomSharedSemaphore();
    if (QMetaObject::invokeMethod(self->dataIOObj, "enableAutoGrabbing", Q_ARG(ItomSharedSemaphore*, waitCond)))
    {
        bool timeout = false;
        while (!waitCond->wait(AppManagement::timeouts.pluginGeneral))
        {
            if (!self->dataIOObj->isAlive())
            {
                timeout = true;
                ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while calling 'enableAutoGrabbing'").toLatin1().data());
                break;
            }
        }

        if (!timeout)
        {
            ret += waitCond->returnValue;
        }
    }
    else
    {
        ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'enableAutoGrabbing' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
    }

    waitCond->deleteSemaphore();
    waitCond = NULL;

    if (!PythonCommon::setReturnValueMessage(ret, "enableAutoGrabbing", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    Py_RETURN_NONE;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyDataIOPlugin_disableAutoGrabbing_doc,"disableAutoGrabbing() -> Disable auto grabbing for the grabber (camera...), \n\
\n\
If the auto grabbing flag is set, the camera acquisition is automatically and continuously triggered if at least one live image is \n\
connected. This is an undesired behaviour if a measurement is started where the acquisition should be controlled by a specific \n\
script or something similar. Then disable the auto grabbing property. All connected live images will then get new images when \n\
`getVal` or `copyVal` is called by the script. The live image timer is disabled. \n\
\n\
This method disables the auto grabbing flag. \n\
\n\
See Also \n\
--------- \n\
setAutoGrabbing(on), disableAutoGrabbing(), getAutoGrabbing()");                                                  
/** disable timer triggered autograbbing of a dataIO device
*   @param [in] self    the dataIO object (python)
*   @param [in] args    empty
*   @return             an error if autograbbing could not be stopped
*
*   When the autograbbing is stopped the device will no longer periodically acquire data triggered by an internal
*   timer event. Anyway if the connected live view is still present it will receive data recorded by manual
*   acquisitions. This may be usful when a sort of live view is desired within a measurement loop where a
*   timer based autograbbing would disturbe the measurement process.
*/
PyObject *PythonPlugins::PyDataIOPlugin_disableAutoGrabbing(PyDataIOPlugin *self, PyObject * /*args*/)
{
    ito::RetVal ret = ito::retOk;
    ItomSharedSemaphore *waitCond = new ItomSharedSemaphore();
    
    if (QMetaObject::invokeMethod(self->dataIOObj, "disableAutoGrabbing", Q_ARG(ItomSharedSemaphore*, waitCond)))
    {
        bool timeout = false;
        while (!waitCond->wait(AppManagement::timeouts.pluginGeneral))
        {
            if (!self->dataIOObj->isAlive())
            {
                ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while calling 'disableAutoGrabbing'").toLatin1().data());
                timeout = true;
                break;
            }
        }

        if (!timeout)
        {
            ret += waitCond->returnValue;
        }
    }
    else
    {
        ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'disableAutoGrabbing' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
    }

    waitCond->deleteSemaphore();
    waitCond = NULL;

    if (!PythonCommon::setReturnValueMessage(ret, "disableAutoGrabbing", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    Py_RETURN_NONE;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyDataIOPlugin_setAutoGrabbing_doc,"setAutoGrabbing(on) -> Set auto grabbing of the grabber device to on or off\n\
\n\
If the auto grabbing flag is set, the camera acquisition is automatically and continuously triggered if at least one live image is \n\
connected. This is an undesired behaviour if a measurement is started where the acquisition should be controlled by a specific \n\
script or something similar. Then disable the auto grabbing property. All connected live images will then get new images when \n\
`getVal` or `copyVal` is called by the script. The live image timer is disabled. \n\
\n\
This method allows setting this flag. \n\
\n\
Parameters \n\
----------- \n\
on : {bool}\n\
    * TRUE = on\n\
    * FALSE = off\n\
\n\
See Also \n\
--------- \n\
enableAutoGrabbing(), disableAutoGrabbing(), getAutoGrabbing()");
PyObject *PythonPlugins::PyDataIOPlugin_setAutoGrabbing(PyDataIOPlugin *self, PyObject * args)
{
    ito::RetVal ret = ito::retOk;
    bool val;

    if (!PyArg_ParseTuple(args, "b", &val))
    {
        return NULL;
    }

    ItomSharedSemaphore *waitCond = new ItomSharedSemaphore();
    bool invokeOk;
    if (val)
    {
        invokeOk = QMetaObject::invokeMethod(self->dataIOObj, "enableAutoGrabbing", Q_ARG(ItomSharedSemaphore*, waitCond));
    }
    else
    {
        invokeOk = QMetaObject::invokeMethod(self->dataIOObj, "disableAutoGrabbing", Q_ARG(ItomSharedSemaphore*, waitCond));
    }

    if (invokeOk)
    {
        bool timeout = false;
        while (!waitCond->wait(AppManagement::timeouts.pluginGeneral))
        {
            if (!self->dataIOObj->isAlive())
            {
                timeout = true;
                ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while calling 'enable/disableAutoGrabbing'").toLatin1().data());
                break;
            }
        }

        if (!timeout)
        {
            ret += waitCond->returnValue;
        }
    }
    else
    {
        ret += ito::RetVal(ito::retError, 0, QObject::tr("Member 'enableAutoGrabbing' or 'disableAutoGrabbing' of plugin could not be invoked (error in signal/slot connection).").toLatin1().data());
    }

    waitCond->deleteSemaphore();
    waitCond = NULL;

    if (!PythonCommon::setReturnValueMessage(ret, "setAutoGrabbing", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    Py_RETURN_NONE;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyDataIOPlugin_getAutoGrabbing_doc,"getAutoGrabbing() -> return the status of the auto grabbing flag. \n\
\n\
If the auto grabbing flag is set, the camera acquisition is automatically and continuously triggered if at least one live image is \n\
connected. This is an undesired behaviour if a measurement is started where the acquisition should be controlled by a specific \n\
script or something similar. Then disable the auto grabbing property. All connected live images will then get new images when \n\
`getVal` or `copyVal` is called by the script. The live image timer is disabled. \n\
\n\
Returns \n\
------- \n\
auto grabbing flag : {bool}\n\
    * False = auto grabbing off \n\
    * True = auto grabbing on. \n\
\n\
See Also \n\
--------- \n\
enableAutoGrabbing(), disableAutoGrabbing(), setAutoGrabbing(bool)");

/** return the status of the autograbbing
*   @param [in] self    the dataIO object (python)
*   @param [in] args    empty
*   @return             the status of the autograbbing
*
*   This method simply returns the status of the autograbbing.
*/
PyObject *PythonPlugins::PyDataIOPlugin_getAutoGrabbing(PyDataIOPlugin *self, PyObject * /*args*/)
{
    if (self->dataIOObj->getAutoGrabbing())
    {
        Py_RETURN_TRUE;
    }
    Py_RETURN_FALSE;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyDataIOPlugin_setAutoGrabbingInterval_doc, "setAutoGrabbingInterval() -> Sets the current auto grabbing interval (in ms) without dis- or enabling the auto grabber\n\
\n\
If auto grabbing is enabled for a grabber device, a timer is set that continuously acquires data or images from the devices and sends it \n\
to all connected windows or listeners. The timer event will occur with a certain interval (in ms). However, if the image acquisition \n\
requires more time than the interval, several events can be omitted, such that the next image is only acquired if the grabber device \n\
is in an idle state. Hence, the interval is considered to be a minimum value. \n\
\n\
Parameters \n\
----------- \n\
interval : {int}\n\
    Interval in ms.  \n\
\n\
See Also \n\
--------- \n\
enableAutoGrabbing(), disableAutoGrabbing(), getAutoGrabbing(), setAutoGrabbing(), getAutoGrabbingInterval()");
PyObject *PythonPlugins::PyDataIOPlugin_setAutoGrabbingInterval(PyDataIOPlugin *self, PyObject *args)
{
    ito::RetVal ret;

    int val;

    if (!PyArg_ParseTuple(args, "i", &val))
    {
        return NULL;
    }
    else if (val <= 0)
    {
        PyErr_SetString(PyExc_ValueError, "interval must be > 0.");
        return NULL;
    }

    ItomSharedSemaphore *waitCond = new ItomSharedSemaphore();
    QSharedPointer<int> interval(new int);
    *interval = val;
    QMetaObject::invokeMethod(self->dataIOObj, "setAutoGrabbingInterval", Q_ARG(QSharedPointer<int>, interval), Q_ARG(ItomSharedSemaphore*, waitCond));

    bool timeout = false;
    while (!waitCond->wait(AppManagement::timeouts.pluginGeneral))
    {
        if (!self->dataIOObj->isAlive())
        {
            timeout = true;
            ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while setting the current 'autoGrabbingInterval'").toLatin1().data());
            break;
        }
    }

    if (!timeout)
    {
        ret += waitCond->returnValue;
    }

    waitCond->deleteSemaphore();
    waitCond = NULL;

    if (!PythonCommon::setReturnValueMessage(ret, "setAutoGrabbingInterval", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    Py_RETURN_NONE;
}

//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyDataIOPlugin_getAutoGrabbingInterval_doc, "getAutoGrabbingInterval() -> Returns the current auto grabbing interval (in ms), even if auto grabbing is disabled\n\
\n\
If auto grabbing is enabled for a grabber device, a timer is set that continuously acquires data or images from the devices and sends it \n\
to all connected windows or listeners. The timer event will occur with a certain interval (in ms). However, if the image acquisition \n\
requires more time than the interval, several events can be omitted, such that the next image is only acquired if the grabber device \n\
is in an idle state. Hence, the interval is considered to be a minimum value. \n\
\n\
See Also \n\
--------- \n\
enableAutoGrabbing(), disableAutoGrabbing(), getAutoGrabbing(), setAutoGrabbing(), setAutoGrabbingInterval()");
PyObject *PythonPlugins::PyDataIOPlugin_getAutoGrabbingInterval(PyDataIOPlugin *self)
{
    ito::RetVal ret;

    ItomSharedSemaphore *waitCond = new ItomSharedSemaphore();
    QSharedPointer<int> interval(new int);
    *interval = 0; //setAutoGrabbingInterval with interval=0 only returns the current interval
    QMetaObject::invokeMethod(self->dataIOObj, "setAutoGrabbingInterval", Q_ARG(QSharedPointer<int>, interval), Q_ARG(ItomSharedSemaphore*, waitCond));
    
    bool timeout = false;
    while (!waitCond->wait(AppManagement::timeouts.pluginGeneral))
    {
        if (!self->dataIOObj->isAlive())
        {
            timeout = true;
            ret += ito::RetVal(ito::retError, 0, QObject::tr("timeout while obtaining the current 'autoGrabbingInterval'").toLatin1().data());
            break;
        }
    }

    if (!timeout)
    {
        ret += waitCond->returnValue;
    }

    waitCond->deleteSemaphore();
    waitCond = NULL;

    if (!PythonCommon::setReturnValueMessage(ret, "getAutoGrabbingInterval", PythonCommon::invokeFunc))
    {
        return NULL;
    }

    return Py_BuildValue("i", *interval);
}
PyDoc_STRVAR(PyDataIOPlugin_connect_doc, "connect(signalSignature, callableMethod, minRepeatInterval = 0) -> connects the signal of the actuator with the given callable python method \n\
\n\
This instance of *dataIO* wraps a dataIO device (ADDA, grabber or rawIO), that is defined by a C++ - class, that is finally derived from *QObject*. \n\
Every dataIO can send various signals. Use this method to connect any signal to any \n\
callable python method(bounded or unbounded).This method must have the same number of arguments than the signal and the types of the \n\
signal definition must be convertable into a python object. \n\
\n\
Parameters \n\
---------- - \n\
signalSignature : {str} \n\
    This must be the valid signature, known from the Qt - method *connect* (e.g. 'reachedTarget(bool)') \n\
callableMethod : {python method or function} \n\
    valid method or function that is called if the signal is emitted. \n\
minRepeatInterval : {int}, optional \n\
    If > 0, the same signal only invokes a slot once within the given interval (in ms). Default: 0 (all signals will invoke the callable python method. \n\
\n\
See Also \n\
-------- - \n\
disconnect\n\
");
PyObject *PythonPlugins::PyDataIOPlugin_connect(PyDataIOPlugin *self, PyObject *args, PyObject *kwds)
{
    const char *kwlist[] = { "signalSignature", "callableMethod", "minRepeatInterval", NULL };
    const char* signalSignature;
    PyObject *callableMethod;
    int signalIndex;
    int tempType;
    IntList argTypes;
    int minRepeatInterval = 0;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "sO|i", const_cast<char**>(kwlist), &signalSignature, &callableMethod, &minRepeatInterval))
    {
        PyErr_SetString(PyExc_TypeError, "Arguments must be a signal signature and a callable method reference");
        return NULL;
    }
    if (!PyCallable_Check(callableMethod))
    {
        PyErr_SetString(PyExc_TypeError, "given method reference is not callable.");
        return NULL;
    }
    if (!self->dataIOObj)
    {
        PyErr_SetString(PyExc_RuntimeError, "No valid instance of dataIO available");
        return NULL;
    }

    QByteArray signature(signalSignature);
    const QMetaObject *mo = self->dataIOObj->metaObject();
    signalIndex = mo->indexOfSignal(QMetaObject::normalizedSignature(signalSignature));
    QMetaMethod metaMethod = mo->method(signalIndex);
    QList<QByteArray> names = metaMethod.parameterTypes();
    foreach(const QByteArray& name, names)
    {
        tempType = QMetaType::type(name.constData());
        if (tempType > 0)
        {
            argTypes.append(tempType);
        }
        else
        {
            QString msg = QString("parameter type %1 is unknown").arg(name.constData());
            PyErr_SetString(PyExc_RuntimeError, msg.toLatin1().data());
            signalIndex = -1;
            return NULL;
        }
    }
    if (self->signalMapper)
    {
        if (!self->signalMapper->addSignalHandler(self->dataIOObj, signalSignature, signalIndex, callableMethod, argTypes, minRepeatInterval))
        {
            PyErr_SetString(PyExc_RuntimeError, "the connection could not be established. Maybe a wrong sifnature is used");
            return NULL;
        }
    }
    else
    {
        PyErr_SetString(PyExc_RuntimeError, "No signalMapper for this plugin could be found");
        return NULL;
    }

    Py_RETURN_NONE;
}

//--------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyDataIOPlugin_disconnect_doc, "disconnect(signalSignature, callableMethod) -> disconnects a connection which must have been established with exactly the same parameters.\n\
\n\
Parameters \n\
----------- \n\
signalSignature : {str} \n\
    This must be the valid signature, known from the Qt-method *connect* (e.g. 'clicked(bool)') \n\
callableMethod : {python method or function} \n\
    valid method or function, that should not be called any more, if the given signal is emitted. \n\
\n\
See Also \n\
--------- \n\
connect \n\
");
PyObject *PythonPlugins::PyDataIOPlugin_disconnect(PyDataIOPlugin *self, PyObject *args, PyObject *kwds)
{
    const char *kwlist[] = { "signalSignature", "callableMethod", NULL };
    int signalIndex;
    const char* signalSignature;
    PyObject *callableMethod;
    IntList argTypes;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "sO", const_cast<char**>(kwlist), &signalSignature, &callableMethod))
    {
        PyErr_SetString(PyExc_TypeError, "Arguments must be a signal signature and a callable method reference");
        return NULL;
    }
    if (!PyCallable_Check(callableMethod))
    {
        PyErr_SetString(PyExc_TypeError, "given method reference is not callable.");
        return NULL;
    }
    if (!self->dataIOObj)
    {
        PyErr_SetString(PyExc_RuntimeError, "No valid instance of actuator available");
        return NULL;
    }

    const QMetaObject *mo = self->dataIOObj->metaObject();
    signalIndex = mo->indexOfSignal(QMetaObject::normalizedSignature(signalSignature));
    QMetaMethod metaMethod = mo->method(signalIndex);
    if (self->signalMapper)
    {
        if (!self->signalMapper->removeSignalHandler(self->dataIOObj, signalIndex, callableMethod))
        {
            PyErr_SetString(PyExc_RuntimeError, "the connection could not be established.");
            return NULL;
        }
    }
    else
    {
        PyErr_SetString(PyExc_RuntimeError, "No signalMapper for this plugin could be found");
        return NULL;
    }

    Py_RETURN_NONE;
}
//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyDataIOPlugin_getType_doc, "getType() -> returns dataIO type");
/** returns the type of the dataIO object
*   @param [in] self    the dataIO object (python)
*   @return             a string with the type
*
*   This method simply returns the type of the dataIO object
*/
PyObject* PythonPlugins::PyDataIOPlugin_getType(PyDataIOPlugin *self)
{
    PyObject *result = NULL;
    if (self == NULL || self->dataIOObj == NULL)
    {
        PyErr_SetString(PyExc_RuntimeError,"empty dataIO plugin");
        return NULL;
    }
    else
    {
        ito::AddInInterfaceBase *aib = self->dataIOObj->getBasePlugin();
        if (aib)
        {
            result = PyLong_FromLong(aib->getType());
        }
        else
        {
            PyErr_SetString(PyExc_RuntimeError,"interface of plugin is NULL");
            return NULL;
        }
    }
    
    return result; 
}
//----------------------------------------------------------------------------------------------------------------------------------
PyDoc_STRVAR(PyDataIOPlugin_info_doc, "info(verbose = 0) -> returns information about signal and slots.\n\
\n\
Parameters \n\
----------- \n\
verbose : {int} \n\
    0: only slots and signals from the plugin class are printed (default) \n\
    1: all slots and signals from all inherited classes are printed\n\
");
PyObject* PythonPlugins::PyDataIOPlugin_info(PyDataIOPlugin* self, PyObject* args)
{
    int showAll = 0;

    if (!PyArg_ParseTuple(args, "|i", &showAll))
    {
        return NULL;
    }
    if (!self->dataIOObj)
    {
        PyErr_SetString(PyExc_RuntimeError, "No valid instance of dataIO available");
        return NULL;
    }
    //QList<QByteArray> signalSignatureList, slotSignatureList;
    QStringList signalSignatureList, slotSignatureList;
    const QMetaObject *mo = self->dataIOObj->metaObject();
    QMetaMethod metaFunc;
    bool again = true;
    int methodIdx;
    if (showAll == 0 || showAll == 1)
    {
        while (again)
        {
            for (methodIdx = mo->methodOffset(); methodIdx < mo->methodCount(); ++methodIdx)
            {
                metaFunc = mo->method(methodIdx);
                if (metaFunc.methodType() == QMetaMethod::Signal)
                {
                    signalSignatureList.append(metaFunc.methodSignature());

                }
                if (metaFunc.methodType() == QMetaMethod::Slot)
                {
                    slotSignatureList.append(metaFunc.methodSignature());
                }

            }
            if (showAll == 1)
            {
                mo = mo->superClass();
                if (mo)
                {
                    again = true;
                    continue;
                }
            }
            again = false;

        }
    }
    else
    {
        PyErr_SetString(PyExc_RuntimeError, "Invalid verbose level. Use level 0 to display all signals and slots defined by the plugin itself. Level 1 also displays all inherited signals and slots");
        return NULL;
    }
    signalSignatureList.sort();
    slotSignatureList.sort();
    if (signalSignatureList.length() || slotSignatureList.length())
    {
        //QByteArray val;
        QString val;
        QString previous;
        std::cout << "Signals: \n";
        foreach(val, signalSignatureList)
        {
            if (val != previous)
            {
                std::cout << "\t" << QString(val).toLatin1().data() << "\n";
            }
            previous = val;
        }
        std::cout << "\nSlots: \n";
        foreach(val, slotSignatureList)
        {
            if (val != previous)
            {
                std::cout << "\t" << QString(val).toLatin1().data() << "\n";
            }
            previous = val;
        }
    }
    Py_RETURN_NONE;
}
//----------------------------------------------------------------------------------------------------------------------------------
PyObject* PythonPlugins::PyDataIOPlugin_execFunc(PyDataIOPlugin *self, PyObject *args, PyObject *kwds)
{
    return execFunc(self->dataIOObj, args, kwds);
}

//----------------------------------------------------------------------------------------------------------------------------------
/** open configuration dialog
*   @param [in] self    the actuator object (python)
*
*   This method simply open the configuration dialog
*/
PyObject* PythonPlugins::PyDataIOPlugin_showConfiguration(PyDataIOPlugin* self)
{
    ito::AddInBase *aib = self->dataIOObj;
    return plugin_showConfiguration(aib);
}

//----------------------------------------------------------------------------------------------------------------------------------
/** returns the list of available parameters
*   @param [in] self    the actuator object (python)
*
*   This method simply open the widget
*/
PyObject* PythonPlugins::PyDataIOPlugin_showToolbox(PyDataIOPlugin* self)
{
    ito::AddInBase *aib = self->dataIOObj;
    return plugin_showToolbox(aib);
}

//----------------------------------------------------------------------------------------------------------------------------------
/** returns the list of available parameters
*   @param [in] self    the actuator object (python)
*
*   This method simply close the widget
*/
PyObject* PythonPlugins::PyDataIOPlugin_hideToolbox(PyDataIOPlugin* self)
{
    ito::AddInBase *aib = self->dataIOObj;
    return plugin_hideToolbox(aib);
}

//----------------------------------------------------------------------------------------------------------------------------------
PyMemberDef PythonPlugins::PyDataIOPlugin_members[] = {
    {NULL}  /* Sentinel */
};

//----------------------------------------------------------------------------------------------------------------------------------
PyMethodDef PythonPlugins::PyDataIOPlugin_methods[] = {
   {"getParamList", (PyCFunction)PythonPlugins::PyDataIOPlugin_getParamList, METH_NOARGS, pyPluginGetParamList_doc},
   {"getParamInfo", (PyCFunction)PythonPlugins::PyDataIOPlugin_getParamInfo, METH_VARARGS, pyPluginGetParamInfo_doc},
   {"getParamListInfo", (PyCFunction)PythonPlugins::PyDataIOPlugin_getParamListInfo, METH_VARARGS, pyPluginGetParamListInfo_doc},
   {"getExecFuncsList", (PyCFunction)PythonPlugins::PyDataIOPlugin_getExecFuncsList, METH_NOARGS, pyPluginGetExecFuncsList_doc },
   {"getExecFuncsInfo", (PyCFunction)PythonPlugins::PyDataIOPlugin_getExecFuncsInfo, METH_VARARGS | METH_KEYWORDS, pyPlugInGetExecFuncsInfo_doc},
   {"name", (PyCFunction)PythonPlugins::PyDataIOPlugin_name, METH_NOARGS, pyPluginName_doc},
   {"getParam", (PyCFunction)PythonPlugins::PyDataIOPlugin_getParam, METH_VARARGS, pyPluginGetParam_doc},
   {"setParam", (PyCFunction)PythonPlugins::PyDataIOPlugin_setParam, METH_VARARGS, pyPluginSetParam_doc},
   {"startDevice", (PyCFunction)PythonPlugins::PyDataIOPlugin_startDevice, METH_VARARGS, PyDataIOPlugin_startDevice_doc},
   {"stopDevice", (PyCFunction)PythonPlugins::PyDataIOPlugin_stopDevice, METH_VARARGS, PyDataIOPlugin_stopDevice_doc},
   {"acquire", (PyCFunction)PythonPlugins::PyDataIOPlugin_acquire, METH_VARARGS, PyDataIOPlugin_acquire_doc},
   {"stop", (PyCFunction)PythonPlugins::PyDataIOPlugin_stop, METH_NOARGS, PyDataIOPlugin_stop_doc},
   {"getVal", (PyCFunction)PythonPlugins::PyDataIOPlugin_getVal, METH_VARARGS, PyDataIOPlugin_getVal_doc},
   {"copyVal", (PyCFunction)PythonPlugins::PyDataIOPlugin_copyVal, METH_VARARGS, PyDataIOPlugin_copyVal_doc},
   {"setVal", (PyCFunction)PythonPlugins::PyDataIOPlugin_setVal, METH_VARARGS, PyDataIOPlugin_setVal_doc},
   {"enableAutoGrabbing", (PyCFunction)PythonPlugins::PyDataIOPlugin_enableAutoGrabbing, METH_NOARGS, PyDataIOPlugin_enableAutoGrabbing_doc},
   {"disableAutoGrabbing", (PyCFunction)PythonPlugins::PyDataIOPlugin_disableAutoGrabbing, METH_NOARGS, PyDataIOPlugin_disableAutoGrabbing_doc},
   {"setAutoGrabbing", (PyCFunction)PythonPlugins::PyDataIOPlugin_setAutoGrabbing, METH_VARARGS, PyDataIOPlugin_setAutoGrabbing_doc},
   {"getAutoGrabbing", (PyCFunction)PythonPlugins::PyDataIOPlugin_getAutoGrabbing, METH_NOARGS, PyDataIOPlugin_getAutoGrabbing_doc},
   {"setAutoGrabbingInterval", (PyCFunction)PythonPlugins::PyDataIOPlugin_setAutoGrabbingInterval, METH_VARARGS, PyDataIOPlugin_setAutoGrabbingInterval_doc },
   {"getAutoGrabbingInterval", (PyCFunction)PythonPlugins::PyDataIOPlugin_getAutoGrabbingInterval, METH_NOARGS, PyDataIOPlugin_getAutoGrabbingInterval_doc },
   {"getType", (PyCFunction)PythonPlugins::PyDataIOPlugin_getType, METH_NOARGS, PyDataIOPlugin_getType_doc},
   {"exec", (PyCFunction)PythonPlugins::PyDataIOPlugin_execFunc, METH_KEYWORDS | METH_VARARGS, PyPlugin_execFunc_doc},
   {"showConfiguration", (PyCFunction)PythonPlugins::PyDataIOPlugin_showConfiguration, METH_NOARGS, pyPluginShowConfiguration_doc},
   {"showToolbox", (PyCFunction)PythonPlugins::PyDataIOPlugin_showToolbox, METH_NOARGS, pyPluginShowToolbox_doc},
   {"hideToolbox", (PyCFunction)PythonPlugins::PyDataIOPlugin_hideToolbox, METH_NOARGS, pyPluginHideToolbox_doc},
   {"connect", (PyCFunction)PythonPlugins::PyDataIOPlugin_connect, METH_VARARGS | METH_KEYWORDS, PyDataIOPlugin_connect_doc},
   {"disconnect", (PyCFunction)PythonPlugins::PyDataIOPlugin_disconnect, METH_VARARGS | METH_KEYWORDS, PyDataIOPlugin_disconnect_doc },
   { "info",(PyCFunction)PythonPlugins::PyDataIOPlugin_info, METH_VARARGS,PyDataIOPlugin_info_doc },
   {NULL}  /* Sentinel */
};

//----------------------------------------------------------------------------------------------------------------------------------
PyModuleDef PythonPlugins::PyDataIOPluginModule = {
   PyModuleDef_HEAD_INIT,
   "dataIOPlugin",
   QObject::tr("Itom DataIOPlugin type in python").toLatin1().data(),
   -1,
   NULL, NULL, NULL, NULL, NULL
};

//----------------------------------------------------------------------------------------------------------------------------------
PyTypeObject PythonPlugins::PyDataIOPluginType = {
   PyVarObject_HEAD_INIT(NULL, 0)
   "itom.dataIO",                       /* tp_name */
   sizeof(PyDataIOPlugin),              /* tp_basicsize */
   0,                                   /* tp_itemsize */
   (destructor)PyDataIOPlugin_dealloc,  /* tp_dealloc */
   0,                                   /* tp_print */
   0,                                   /* tp_getattr */
   0,                                   /* tp_setattr */
   0,                                   /* tp_reserved */
   (reprfunc)PyDataIOPlugin_repr,       /* tp_repr */
   0,                                   /* tp_as_number */
   0,                                   /* tp_as_sequence */
   0,                                   /* tp_as_mapping */
   0,                                   /* tp_hash  */
   0,                                   /* tp_call */
   0,                                   /* tp_str */
   0,                                   /* tp_getattro */
   0,                                   /* tp_setattro */
   0,                                   /* tp_as_buffer */
   Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,   /* tp_flags */
   pyDataIOInit_doc,                    /* tp_doc */
   0,                                    /* tp_traverse */
   0,                                    /* tp_clear */
   0,                                    /* tp_richcompare */
   offsetof(PyDataIOPlugin, weakreflist),/* tp_weaklistoffset */
   0,                                    /* tp_iter */
   0,                                    /* tp_iternext */
   PyDataIOPlugin_methods,              /* tp_methods */
   PyDataIOPlugin_members,              /* tp_members */
   0,                                   /* tp_getset */
   0,                                   /* tp_base */
   0,                                   /* tp_dict */
   0,                                   /* tp_descr_get */
   0,                                   /* tp_descr_set */
   0,                                   /* tp_dictoffset */
   (initproc)PythonPlugins::PyDataIOPlugin_init,      /* tp_init */
   0,                                   /* tp_alloc */
   PyDataIOPlugin_new                   /*PyType_GenericNew*/ /*PythonStream_new,*/                 /* tp_new */
};

/*static*/ void PythonPlugins::PyDataIOPlugin_addTpDict(PyObject *tp_dict)
{
    PyObject *value = NULL;

    //add dialog types
    value = Py_BuildValue("i", 0);
    PyDict_SetItemString(tp_dict, "TRIGGER_SOFTWARE", value);
    Py_DECREF(value);
    
}


} //end namespace ito

//----------------------------------------------------------------------------------------------------------------------------------
